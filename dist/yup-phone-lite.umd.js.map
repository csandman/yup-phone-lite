{"version":3,"file":"yup-phone-lite.umd.js","sources":["../node_modules/libphonenumber-js/metadata.min.json.js","../node_modules/libphonenumber-js/min/exports/withMetadataArgument.js","../node_modules/libphonenumber-js/es6/ParseError.js","../node_modules/libphonenumber-js/es6/constants.js","../node_modules/libphonenumber-js/es6/tools/semver-compare.js","../node_modules/libphonenumber-js/es6/metadata.js","../node_modules/libphonenumber-js/es6/helpers/extension/createExtensionPattern.js","../node_modules/libphonenumber-js/es6/helpers/isViablePhoneNumber.js","../node_modules/libphonenumber-js/es6/helpers/extension/extractExtension.js","../node_modules/libphonenumber-js/es6/helpers/parseDigits.js","../node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js","../node_modules/libphonenumber-js/es6/helpers/mergeArrays.js","../node_modules/libphonenumber-js/es6/helpers/checkNumberLength.js","../node_modules/libphonenumber-js/es6/isPossibleNumber_.js","../node_modules/libphonenumber-js/es6/helpers/RFC3966.js","../node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js","../node_modules/libphonenumber-js/es6/helpers/getNumberType.js","../node_modules/libphonenumber-js/es6/validate_.js","../node_modules/libphonenumber-js/es6/helpers/applyInternationalSeparatorStyle.js","../node_modules/libphonenumber-js/es6/helpers/formatNationalNumberUsingFormat.js","../node_modules/libphonenumber-js/es6/helpers/getIddPrefix.js","../node_modules/libphonenumber-js/es6/format_.js","../node_modules/libphonenumber-js/es6/PhoneNumber.js","../node_modules/libphonenumber-js/es6/helpers/stripIddPrefix.js","../node_modules/libphonenumber-js/es6/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js","../node_modules/libphonenumber-js/es6/helpers/extractNationalNumber.js","../node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js","../node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCode.js","../node_modules/libphonenumber-js/es6/helpers/getCountryByCallingCode.js","../node_modules/libphonenumber-js/es6/parse_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString_.js","../node_modules/libphonenumber-js/es6/isValidPhoneNumber.js","../node_modules/libphonenumber-js/es6/findNumbers/LRUCache.js","../node_modules/libphonenumber-js/es6/findNumbers/RegExpCache.js","../node_modules/libphonenumber-js/es6/findNumbers/util.js","../node_modules/libphonenumber-js/es6/findNumbers/utf-8.js","../node_modules/libphonenumber-js/es6/findNumbers/Leniency.js","../node_modules/libphonenumber-js/es6/findNumbers/parsePreCandidate.js","../node_modules/libphonenumber-js/es6/findNumbers/isValidPreCandidate.js","../node_modules/libphonenumber-js/es6/findNumbers/isValidCandidate.js","../node_modules/libphonenumber-js/es6/PhoneNumberMatcher.js","../node_modules/libphonenumber-js/es6/AsYouTypeState.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.util.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.complete.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.PatternMatcher.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.js","../node_modules/libphonenumber-js/es6/AsYouTypeParser.js","../node_modules/libphonenumber-js/es6/AsYouType.js","../node_modules/libphonenumber-js/min/exports/isValidPhoneNumber.js","../node_modules/libphonenumber-js/min/exports/PhoneNumberMatcher.js","../node_modules/libphonenumber-js/min/exports/AsYouType.js","../node_modules/libphonenumber-js/min/exports/Metadata.js","../node_modules/libphonenumber-js/es6/findPhoneNumbers_.js","../node_modules/libphonenumber-js/index.es6.exports/PhoneNumberSearch.js","../src/yup-phone-lite.ts"],"sourcesContent":["// This file is a workaround for a bug in web browsers' \"native\"\n// ES6 importing system which is uncapable of importing \"*.json\" files.\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\nexport default {\"version\":4,\"country_calling_codes\":{\"1\":[\"US\",\"AG\",\"AI\",\"AS\",\"BB\",\"BM\",\"BS\",\"CA\",\"DM\",\"DO\",\"GD\",\"GU\",\"JM\",\"KN\",\"KY\",\"LC\",\"MP\",\"MS\",\"PR\",\"SX\",\"TC\",\"TT\",\"VC\",\"VG\",\"VI\"],\"7\":[\"RU\",\"KZ\"],\"20\":[\"EG\"],\"27\":[\"ZA\"],\"30\":[\"GR\"],\"31\":[\"NL\"],\"32\":[\"BE\"],\"33\":[\"FR\"],\"34\":[\"ES\"],\"36\":[\"HU\"],\"39\":[\"IT\",\"VA\"],\"40\":[\"RO\"],\"41\":[\"CH\"],\"43\":[\"AT\"],\"44\":[\"GB\",\"GG\",\"IM\",\"JE\"],\"45\":[\"DK\"],\"46\":[\"SE\"],\"47\":[\"NO\",\"SJ\"],\"48\":[\"PL\"],\"49\":[\"DE\"],\"51\":[\"PE\"],\"52\":[\"MX\"],\"53\":[\"CU\"],\"54\":[\"AR\"],\"55\":[\"BR\"],\"56\":[\"CL\"],\"57\":[\"CO\"],\"58\":[\"VE\"],\"60\":[\"MY\"],\"61\":[\"AU\",\"CC\",\"CX\"],\"62\":[\"ID\"],\"63\":[\"PH\"],\"64\":[\"NZ\"],\"65\":[\"SG\"],\"66\":[\"TH\"],\"81\":[\"JP\"],\"82\":[\"KR\"],\"84\":[\"VN\"],\"86\":[\"CN\"],\"90\":[\"TR\"],\"91\":[\"IN\"],\"92\":[\"PK\"],\"93\":[\"AF\"],\"94\":[\"LK\"],\"95\":[\"MM\"],\"98\":[\"IR\"],\"211\":[\"SS\"],\"212\":[\"MA\",\"EH\"],\"213\":[\"DZ\"],\"216\":[\"TN\"],\"218\":[\"LY\"],\"220\":[\"GM\"],\"221\":[\"SN\"],\"222\":[\"MR\"],\"223\":[\"ML\"],\"224\":[\"GN\"],\"225\":[\"CI\"],\"226\":[\"BF\"],\"227\":[\"NE\"],\"228\":[\"TG\"],\"229\":[\"BJ\"],\"230\":[\"MU\"],\"231\":[\"LR\"],\"232\":[\"SL\"],\"233\":[\"GH\"],\"234\":[\"NG\"],\"235\":[\"TD\"],\"236\":[\"CF\"],\"237\":[\"CM\"],\"238\":[\"CV\"],\"239\":[\"ST\"],\"240\":[\"GQ\"],\"241\":[\"GA\"],\"242\":[\"CG\"],\"243\":[\"CD\"],\"244\":[\"AO\"],\"245\":[\"GW\"],\"246\":[\"IO\"],\"247\":[\"AC\"],\"248\":[\"SC\"],\"249\":[\"SD\"],\"250\":[\"RW\"],\"251\":[\"ET\"],\"252\":[\"SO\"],\"253\":[\"DJ\"],\"254\":[\"KE\"],\"255\":[\"TZ\"],\"256\":[\"UG\"],\"257\":[\"BI\"],\"258\":[\"MZ\"],\"260\":[\"ZM\"],\"261\":[\"MG\"],\"262\":[\"RE\",\"YT\"],\"263\":[\"ZW\"],\"264\":[\"NA\"],\"265\":[\"MW\"],\"266\":[\"LS\"],\"267\":[\"BW\"],\"268\":[\"SZ\"],\"269\":[\"KM\"],\"290\":[\"SH\",\"TA\"],\"291\":[\"ER\"],\"297\":[\"AW\"],\"298\":[\"FO\"],\"299\":[\"GL\"],\"350\":[\"GI\"],\"351\":[\"PT\"],\"352\":[\"LU\"],\"353\":[\"IE\"],\"354\":[\"IS\"],\"355\":[\"AL\"],\"356\":[\"MT\"],\"357\":[\"CY\"],\"358\":[\"FI\",\"AX\"],\"359\":[\"BG\"],\"370\":[\"LT\"],\"371\":[\"LV\"],\"372\":[\"EE\"],\"373\":[\"MD\"],\"374\":[\"AM\"],\"375\":[\"BY\"],\"376\":[\"AD\"],\"377\":[\"MC\"],\"378\":[\"SM\"],\"380\":[\"UA\"],\"381\":[\"RS\"],\"382\":[\"ME\"],\"383\":[\"XK\"],\"385\":[\"HR\"],\"386\":[\"SI\"],\"387\":[\"BA\"],\"389\":[\"MK\"],\"420\":[\"CZ\"],\"421\":[\"SK\"],\"423\":[\"LI\"],\"500\":[\"FK\"],\"501\":[\"BZ\"],\"502\":[\"GT\"],\"503\":[\"SV\"],\"504\":[\"HN\"],\"505\":[\"NI\"],\"506\":[\"CR\"],\"507\":[\"PA\"],\"508\":[\"PM\"],\"509\":[\"HT\"],\"590\":[\"GP\",\"BL\",\"MF\"],\"591\":[\"BO\"],\"592\":[\"GY\"],\"593\":[\"EC\"],\"594\":[\"GF\"],\"595\":[\"PY\"],\"596\":[\"MQ\"],\"597\":[\"SR\"],\"598\":[\"UY\"],\"599\":[\"CW\",\"BQ\"],\"670\":[\"TL\"],\"672\":[\"NF\"],\"673\":[\"BN\"],\"674\":[\"NR\"],\"675\":[\"PG\"],\"676\":[\"TO\"],\"677\":[\"SB\"],\"678\":[\"VU\"],\"679\":[\"FJ\"],\"680\":[\"PW\"],\"681\":[\"WF\"],\"682\":[\"CK\"],\"683\":[\"NU\"],\"685\":[\"WS\"],\"686\":[\"KI\"],\"687\":[\"NC\"],\"688\":[\"TV\"],\"689\":[\"PF\"],\"690\":[\"TK\"],\"691\":[\"FM\"],\"692\":[\"MH\"],\"850\":[\"KP\"],\"852\":[\"HK\"],\"853\":[\"MO\"],\"855\":[\"KH\"],\"856\":[\"LA\"],\"880\":[\"BD\"],\"886\":[\"TW\"],\"960\":[\"MV\"],\"961\":[\"LB\"],\"962\":[\"JO\"],\"963\":[\"SY\"],\"964\":[\"IQ\"],\"965\":[\"KW\"],\"966\":[\"SA\"],\"967\":[\"YE\"],\"968\":[\"OM\"],\"970\":[\"PS\"],\"971\":[\"AE\"],\"972\":[\"IL\"],\"973\":[\"BH\"],\"974\":[\"QA\"],\"975\":[\"BT\"],\"976\":[\"MN\"],\"977\":[\"NP\"],\"992\":[\"TJ\"],\"993\":[\"TM\"],\"994\":[\"AZ\"],\"995\":[\"GE\"],\"996\":[\"KG\"],\"998\":[\"UZ\"]},\"countries\":{\"AC\":[\"247\",\"00\",\"(?:[01589]\\\\d|[46])\\\\d{4}\",[5,6]],\"AD\":[\"376\",\"00\",\"(?:1|6\\\\d)\\\\d{7}|[135-9]\\\\d{5}\",[6,8,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"[135-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]]],\"AE\":[\"971\",\"00\",\"(?:[4-7]\\\\d|9[0-689])\\\\d{7}|800\\\\d{2,9}|[2-4679]\\\\d{7}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{2,9})\",\"$1 $2\",[\"60|8\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[236]|[479][2-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{5})\",\"$1 $2 $3\",[\"[479]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AF\":[\"93\",\"00\",\"[2-7]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"]],\"0\"],\"AG\":[\"1\",\"011\",\"(?:268|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([457]\\\\d{6})$\",\"268$1\",0,\"268\"],\"AI\":[\"1\",\"011\",\"(?:264|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2457]\\\\d{6})$\",\"264$1\",0,\"264\"],\"AL\":[\"355\",\"00\",\"(?:700\\\\d\\\\d|900)\\\\d{3}|8\\\\d{5,7}|(?:[2-5]|6\\\\d)\\\\d{7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"80|9\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2358][2-5]|4\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[23578]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"]],\"0\"],\"AM\":[\"374\",\"00\",\"(?:[1-489]\\\\d|55|60|77)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0 $1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2|3[12]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"1|47\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[3-9]\"],\"0$1\"]],\"0\"],\"AO\":[\"244\",\"00\",\"[29]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[29]\"]]]],\"AR\":[\"54\",\"00\",\"(?:11|[89]\\\\d\\\\d)\\\\d{8}|[2368]\\\\d{9}\",[10,11],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2-$3\",[\"2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])\",\"2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"1\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[23]\"],\"0$1\",1],[\"(\\\\d)(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9(?:2[2-469]|3[3-578])\",\"9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))\",\"9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 15-$3-$4\",[\"91\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9\"],\"0$1\",0,\"$1 $2 $3-$4\"]],\"0\",0,\"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?\",\"9$1\"],\"AS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|684|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([267]\\\\d{6})$\",\"684$1\",0,\"684\"],\"AT\":[\"43\",\"00\",\"1\\\\d{3,12}|2\\\\d{6,12}|43(?:(?:0\\\\d|5[02-9])\\\\d{3,9}|2\\\\d{4,5}|[3467]\\\\d{4}|8\\\\d{4,6}|9\\\\d{4,7})|5\\\\d{4,12}|8\\\\d{7,12}|9\\\\d{8,12}|(?:[367]\\\\d|4[0-24-9])\\\\d{4,11}\",[4,5,6,7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3,12})\",\"$1 $2\",[\"1(?:11|[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})\",\"$1 $2\",[\"517\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"5[079]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,10})\",\"$1 $2\",[\"(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,9})\",\"$1 $2\",[\"[2-467]|5[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,7})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AU\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{7}(?:\\\\d(?:\\\\d{2})?)?|8[0-24-9]\\\\d{7})|[2-478]\\\\d{8}|1\\\\d{4,7}\",[5,6,7,8,9,10,12],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"16\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"16\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"14|4\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[2378]\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:30|[89])\"]]],\"0\",0,\"0|(183[12])\",0,0,0,[[\"(?:(?:2(?:[0-26-9]\\\\d|3[0-8]|4[02-9]|5[0135-9])|3(?:[0-3589]\\\\d|4[0-578]|6[1-9]|7[0-35-9])|7(?:[013-57-9]\\\\d|2[0-8]))\\\\d{3}|8(?:51(?:0(?:0[03-9]|[12479]\\\\d|3[2-9]|5[0-8]|6[1-9]|8[0-7])|1(?:[0235689]\\\\d|1[0-69]|4[0-589]|7[0-47-9])|2(?:0[0-79]|[18][13579]|2[14-9]|3[0-46-9]|[4-6]\\\\d|7[89]|9[0-4]))|(?:6[0-8]|[78]\\\\d)\\\\d{3}|9(?:[02-9]\\\\d{3}|1(?:(?:[0-58]\\\\d|6[0135-9])\\\\d|7(?:0[0-24-9]|[1-9]\\\\d)|9(?:[0-46-9]\\\\d|5[0-79])))))\\\\d{3}\",[9]],[\"4(?:83[0-38]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,[\"163\\\\d{2,6}\",[5,6,7,8,9]],[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"AW\":[\"297\",\"00\",\"(?:[25-79]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[25-9]\"]]]],\"AX\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"2\\\\d{4,9}|35\\\\d{4,5}|(?:60\\\\d\\\\d|800)\\\\d{4,6}|7\\\\d{5,11}|(?:[14]\\\\d|3[0-46-9]|50)\\\\d{4,8}\",[5,6,7,8,9,10,11,12],0,\"0\",0,0,0,0,\"18\",0,\"00\"],\"AZ\":[\"994\",\"00\",\"365\\\\d{6}|(?:[124579]\\\\d|60|88)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[28]|2|365|46\",\"1[28]|2|365[45]|46\",\"1[28]|2|365(?:4|5[02])|46\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[13-9]\"],\"0$1\"]],\"0\"],\"BA\":[\"387\",\"00\",\"6\\\\d{8}|(?:[35689]\\\\d|49|70)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[1-3]|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2-$3\",[\"[3-5]|6[56]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\"]],\"0\"],\"BB\":[\"1\",\"011\",\"(?:246|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"246$1\",0,\"246\"],\"BD\":[\"880\",\"00\",\"[1-469]\\\\d{9}|8[0-79]\\\\d{7,8}|[2-79]\\\\d{8}|[2-9]\\\\d{7}|[3-9]\\\\d{6}|[57-9]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1-$2\",[\"31[5-8]|[459]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1-$2\",[\"3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,6})\",\"$1-$2\",[\"[13-9]|22\"],\"0$1\"],[\"(\\\\d)(\\\\d{7,8})\",\"$1-$2\",[\"2\"],\"0$1\"]],\"0\"],\"BE\":[\"32\",\"00\",\"4\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:80|9)0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[239]|4[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[15-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4\"],\"0$1\"]],\"0\"],\"BF\":[\"226\",\"00\",\"[025-7]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[025-7]\"]]]],\"BG\":[\"359\",\"00\",\"[2-7]\\\\d{6,7}|[89]\\\\d{6,8}|2\\\\d{5}\",[6,7,8,9],[[\"(\\\\d)(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"43[1-6]|70[1-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:70|8)0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"43[1-7]|7\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[48]|9[08]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"BH\":[\"973\",\"00\",\"[136-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[13679]|8[047]\"]]]],\"BI\":[\"257\",\"00\",\"(?:[267]\\\\d|31)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2367]\"]]]],\"BJ\":[\"229\",\"00\",\"(?:[25689]\\\\d|40)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-689]\"]]]],\"BL\":[\"590\",\"00\",\"(?:590|(?:69|80)\\\\d|976)\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:2[7-9]|5[12]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"976[01]\\\\d{5}\"]]],\"BM\":[\"1\",\"011\",\"(?:441|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-8]\\\\d{6})$\",\"441$1\",0,\"441\"],\"BN\":[\"673\",\"00\",\"[2-578]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-578]\"]]]],\"BO\":[\"591\",\"00(?:1\\\\d)?\",\"(?:[2-467]\\\\d\\\\d|8001)\\\\d{5}\",[8,9],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[23]|4[46]\"]],[\"(\\\\d{8})\",\"$1\",[\"[67]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,\"0(1\\\\d)?\"],\"BQ\":[\"599\",\"00\",\"(?:[34]1|7\\\\d)\\\\d{5}\",[7],0,0,0,0,0,0,\"[347]\"],\"BR\":[\"55\",\"00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)\",\"(?:[1-46-9]\\\\d\\\\d|5(?:[0-46-9]\\\\d|5[0-24679]))\\\\d{8}|[1-9]\\\\d{9}|[3589]\\\\d{8}|[34]\\\\d{7}\",[8,9,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"300|4(?:0[02]|37)\",\"4(?:02|37)0|[34]00\"]],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:[358]|90)0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1 $2-$3\",[\"[16][1-9]|[2-57-9]\"],\"($1)\"]],\"0\",0,\"(?:0|90)(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\\\d{10,11}))?\",\"$2\"],\"BS\":[\"1\",\"011\",\"(?:242|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([3-8]\\\\d{6})$\",\"242$1\",0,\"242\"],\"BT\":[\"975\",\"00\",\"[17]\\\\d{7}|[2-8]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-68]|7[246]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[67]|7\"]]]],\"BW\":[\"267\",\"00\",\"(?:0800|(?:[37]|800)\\\\d)\\\\d{6}|(?:[2-6]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[24-6]|3[15-79]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"BY\":[\"375\",\"810\",\"(?:[12]\\\\d|33|44|902)\\\\d{7}|8(?:0[0-79]\\\\d{5,7}|[1-7]\\\\d{9})|8(?:1[0-489]|[5-79]\\\\d)\\\\d{7}|8[1-79]\\\\d{6,7}|8[0-79]\\\\d{5}|8\\\\d{5}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"800\"],\"8 $1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,4})\",\"$1 $2 $3\",[\"800\"],\"8 $1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{3})\",\"$1 $2-$3\",[\"1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])\",\"1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"1(?:[56]|7[467])|2[1-3]\"],\"8 0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-4]\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"8 $1\"]],\"8\",0,\"0|80?\",0,0,0,0,\"8~10\"],\"BZ\":[\"501\",\"00\",\"(?:0800\\\\d|[2-8])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-8]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"0\"]]]],\"CA\":[\"1\",\"011\",\"(?:[2-8]\\\\d|90)\\\\d{8}\",[10],0,\"1\",0,0,0,0,0,[[\"(?:2(?:04|[23]6|[48]9|50|63)|3(?:06|43|6[578])|4(?:03|1[68]|3[178]|50|68|74)|5(?:06|1[49]|48|79|8[147])|6(?:04|13|39|47|72)|7(?:0[59]|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|(?:5(?:00|2[125-7]|33|44|66|77|88)|622)[2-9]\\\\d{6}\"],0,0,0,[\"600[2-9]\\\\d{6}\"]]],\"CC\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"0|([59]\\\\d{7})$\",\"8$1\",0,0,[[\"8(?:51(?:0(?:02|31|60|89)|1(?:18|76)|223)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\\\d|70[23]|959))\\\\d{3}\",[9]],[\"4(?:83[0-38]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CD\":[\"243\",\"00\",\"[189]\\\\d{8}|[1-68]\\\\d{6}\",[7,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[1-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"CF\":[\"236\",\"00\",\"(?:[27]\\\\d{3}|8776)\\\\d{4}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[278]\"]]]],\"CG\":[\"242\",\"00\",\"222\\\\d{6}|(?:0\\\\d|80)\\\\d{7}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[02]\"]]]],\"CH\":[\"41\",\"00\",\"8\\\\d{11}|[2-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8[047]|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]|81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"8\"],\"0$1\"]],\"0\"],\"CI\":[\"225\",\"00\",\"[02]\\\\d{9}\",[10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d)(\\\\d{5})\",\"$1 $2 $3 $4\",[\"2\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"0\"]]]],\"CK\":[\"682\",\"00\",\"[2-578]\\\\d{4}\",[5],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"[2-578]\"]]]],\"CL\":[\"56\",\"(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0\",\"12300\\\\d{6}|6\\\\d{9,10}|[2-9]\\\\d{8}\",[9,10,11],[[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"219\",\"2196\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[1-36]\"],\"($1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"9[2-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"60|8\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"60\"]]]],\"CM\":[\"237\",\"00\",\"[26]\\\\d{8}|88\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"88\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[26]|88\"]]]],\"CN\":[\"86\",\"00|1(?:[12]\\\\d|79)\\\\d\\\\d00\",\"1[127]\\\\d{8,9}|2\\\\d{9}(?:\\\\d{2})?|[12]\\\\d{6,7}|86\\\\d{6}|(?:1[03-689]\\\\d|6)\\\\d{7,9}|(?:[3-579]\\\\d|8[0-57-9])\\\\d{6,9}\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5,6})\",\"$1 $2\",[\"(?:10|2[0-57-9])[19]\",\"(?:10|2[0-57-9])(?:10|9[56])\",\"(?:10|2[0-57-9])(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]\",\"(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))[19]\",\"85[23](?:10|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:10|9[56])\",\"85[23](?:100|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:4|80)0\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|2(?:[02-57-9]|1[1-9])\",\"10|2(?:[02-57-9]|1[1-9])\",\"10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-578]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"1[3-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"[12]\"],\"0$1\",1]],\"0\",0,\"0|(1(?:[12]\\\\d|79)\\\\d\\\\d)\",0,0,0,0,\"00\"],\"CO\":[\"57\",\"00(?:4(?:[14]4|56)|[579])\",\"(?:(?:1\\\\d|[36])\\\\d{3}|9101)\\\\d{6}|[124-8]\\\\d{7}\",[8,10,11],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[146][2-9]|[2578]\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"6\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"[39]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{7})\",\"$1-$2-$3\",[\"1\"],\"0$1\",0,\"$1 $2 $3\"]],\"0\",0,\"0([3579]|4(?:[14]4|56))?\"],\"CR\":[\"506\",\"00\",\"(?:8\\\\d|90)\\\\d{8}|(?:[24-8]\\\\d{3}|3005)\\\\d{4}\",[8,10],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[3-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[89]\"]]],0,0,\"(19(?:0[0-2468]|1[09]|20|66|77|99))\"],\"CU\":[\"53\",\"119\",\"[27]\\\\d{6,7}|[34]\\\\d{5,7}|(?:5|8\\\\d\\\\d)\\\\d{7}\",[6,7,8,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"2[1-4]|[34]\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{6,7})\",\"$1 $2\",[\"7\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"8\"],\"0$1\"]],\"0\"],\"CV\":[\"238\",\"0\",\"(?:[2-59]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2-589]\"]]]],\"CW\":[\"599\",\"00\",\"(?:[34]1|60|(?:7|9\\\\d)\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[3467]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9[4-8]\"]]],0,0,0,0,0,\"[69]\"],\"CX\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"0|([59]\\\\d{7})$\",\"8$1\",0,0,[[\"8(?:51(?:0(?:01|30|59|88)|1(?:17|46|75)|2(?:22|35))|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\\\d|7(?:0[01]|1[0-2])|958))\\\\d{3}\",[9]],[\"4(?:83[0-38]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CY\":[\"357\",\"00\",\"(?:[279]\\\\d|[58]0)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[257-9]\"]]]],\"CZ\":[\"420\",\"00\",\"(?:[2-578]\\\\d|60)\\\\d{7}|9\\\\d{8,11}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]|9[015-7]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"96\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]]],\"DE\":[\"49\",\"00\",\"[2579]\\\\d{5,14}|49(?:[34]0|69|8\\\\d)\\\\d\\\\d?|49(?:37|49|60|7[089]|9\\\\d)\\\\d{1,3}|49(?:1\\\\d|2[02-9]|3[2-689]|7[1-7])\\\\d{1,8}|(?:1|[368]\\\\d|4[0-8])\\\\d{3,13}|49(?:[05]\\\\d|[23]1|[46][1-8])\\\\d{1,9}\",[4,5,6,7,8,9,10,11,12,13,14,15],[[\"(\\\\d{2})(\\\\d{3,13})\",\"$1 $2\",[\"3[02]|40|[68]9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,12})\",\"$1 $2\",[\"2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\",\"2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2,11})\",\"$1 $2\",[\"[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]\",\"[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"138\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{2,10})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,11})\",\"$1 $2\",[\"181\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{4,10})\",\"$1 $2 $3\",[\"1(?:3|80)|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"1[67]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,12})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"185\",\"1850\",\"18500\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"18[68]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"15[0568]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"15[1279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{8})\",\"$1 $2\",[\"18\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{7,8})\",\"$1 $2 $3\",[\"1(?:6[023]|7)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{7})\",\"$1 $2 $3\",[\"15[279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{8})\",\"$1 $2 $3\",[\"15\"],\"0$1\"]],\"0\"],\"DJ\":[\"253\",\"00\",\"(?:2\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[27]\"]]]],\"DK\":[\"45\",\"00\",\"[2-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-9]\"]]]],\"DM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|767|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"767$1\",0,\"767\"],\"DO\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"8001|8[024]9\"],\"DZ\":[\"213\",\"00\",\"(?:[1-4]|[5-79]\\\\d|80)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-8]\"],\"0$1\"]],\"0\"],\"EC\":[\"593\",\"00\",\"1\\\\d{9,10}|(?:[2-7]|9\\\\d)\\\\d{7}\",[8,9,10,11],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[2-7]\"],\"(0$1)\",0,\"$1-$2-$3\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"EE\":[\"372\",\"00\",\"8\\\\d{9}|[4578]\\\\d{7}|(?:[3-8]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88\",\"[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88\"]],[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[45]|8(?:00|[1-49])\",\"[45]|8(?:00[1-9]|[1-49])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"EG\":[\"20\",\"00\",\"[189]\\\\d{8,9}|[24-6]\\\\d{8}|[135]\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{7,8})\",\"$1 $2\",[\"[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,7})\",\"$1 $2\",[\"1[35]|[4-6]|8[2468]|9[235-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[189]\"],\"0$1\"]],\"0\"],\"EH\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],0,\"0\",0,0,0,0,\"528[89]\"],\"ER\":[\"291\",\"00\",\"[178]\\\\d{6}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[178]\"],\"0$1\"]],\"0\"],\"ES\":[\"34\",\"00\",\"[5-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]00\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-9]\"]]]],\"ET\":[\"251\",\"00\",\"(?:11|[2-59]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-59]\"],\"0$1\"]],\"0\"],\"FI\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"[1-35689]\\\\d{4}|7\\\\d{10,11}|(?:[124-7]\\\\d|3[0-46-9])\\\\d{8}|[1-9]\\\\d{5,8}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d)(\\\\d{4,9})\",\"$1 $2\",[\"[2568][1-8]|3(?:0[1-9]|[1-9])|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[12]00|[368]|70[07-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,8})\",\"$1 $2\",[\"[1245]|7[135]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,10})\",\"$1 $2\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,\"1[03-79]|[2-9]\",0,\"00\"],\"FJ\":[\"679\",\"0(?:0|52)\",\"45\\\\d{5}|(?:0800\\\\d|[235-9])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[235-9]|45\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]]],0,0,0,0,0,0,0,\"00\"],\"FK\":[\"500\",\"00\",\"[2-7]\\\\d{4}\",[5]],\"FM\":[\"691\",\"00\",\"(?:[39]\\\\d\\\\d|820)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[389]\"]]]],\"FO\":[\"298\",\"00\",\"[2-9]\\\\d{5}\",[6],[[\"(\\\\d{6})\",\"$1\",[\"[2-9]\"]]],0,0,\"(10(?:01|[12]0|88))\"],\"FR\":[\"33\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0 $1\"],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[1-79]\"],\"0$1\"]],\"0\"],\"GA\":[\"241\",\"00\",\"(?:[067]\\\\d|11)\\\\d{6}|[2-7]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"11|[67]\"],\"0$1\"]],0,0,\"0(11\\\\d{6}|60\\\\d{6}|61\\\\d{6}|6[256]\\\\d{6}|7[467]\\\\d{6})\",\"$1\"],\"GB\":[\"44\",\"00\",\"[1-357-9]\\\\d{9}|[18]\\\\d{8}|8\\\\d{6}\",[7,9,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"800\",\"8001\",\"80011\",\"800111\",\"8001111\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"845\",\"8454\",\"84546\",\"845464\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"1(?:38|5[23]|69|76|94)\",\"1(?:(?:38|69)7|5(?:24|39)|768|946)\",\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"1(?:[2-69][02-9]|[78])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[25]|7(?:0|6[02-9])\",\"[25]|7(?:0|6(?:[03-9]|2[356]))\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1389]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:1(?:3(?:[0-58]\\\\d\\\\d|73[0235])|4(?:[0-5]\\\\d\\\\d|69[7-9]|70[0359])|(?:5[0-26-9]|[78][0-49])\\\\d\\\\d|6(?:[0-4]\\\\d\\\\d|50[0-24-69]))|2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\\\d)\\\\d\\\\d|1(?:[0-7]\\\\d\\\\d|8(?:[02]\\\\d|1[0-27-9])))|(?:3(?:0\\\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\\\d\\\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\\\d{3})\\\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\\\d)|76\\\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\\\d|7[4-79])|295[5-7]|35[34]\\\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\\\d{3}\",[9,10]],[\"7(?:457[0-57-9]|700[01]|911[028])\\\\d{5}|7(?:[1-3]\\\\d\\\\d|4(?:[0-46-9]\\\\d|5[0-689])|5(?:0[0-8]|[13-9]\\\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\\\d|8[02-9]|9[0-689])|8(?:[014-9]\\\\d|[23][0-8])|9(?:[024-9]\\\\d|1[02-9]|3[0-689]))\\\\d{6}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[2-49]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-2]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]],0,\" x\"],\"GD\":[\"1\",\"011\",\"(?:473|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"473$1\",0,\"473\"],\"GE\":[\"995\",\"00\",\"(?:[3-57]\\\\d\\\\d|800)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"32\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[57]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[348]\"],\"0$1\"]],\"0\"],\"GF\":[\"594\",\"00\",\"(?:[56]94|80\\\\d|976)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"GG\":[\"44\",\"00\",\"(?:1481|[357-9]\\\\d{3})\\\\d{6}|8\\\\d{6}(?:\\\\d{2})?\",[7,9,10],0,\"0\",0,\"0|([25-9]\\\\d{5})$\",\"1481$1\",0,0,[[\"1481[25-9]\\\\d{5}\",[10]],[\"7(?:(?:781|839)\\\\d|911[17])\\\\d{5}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[0-3]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-2]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]]],\"GH\":[\"233\",\"00\",\"(?:[235]\\\\d{3}|800)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[235]\"],\"0$1\"]],\"0\"],\"GI\":[\"350\",\"00\",\"(?:[25]\\\\d\\\\d|606)\\\\d{5}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2\"]]]],\"GL\":[\"299\",\"00\",\"(?:19|[2-689]\\\\d|70)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"19|[2-9]\"]]]],\"GM\":[\"220\",\"00\",\"[2-9]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"GN\":[\"224\",\"00\",\"722\\\\d{6}|(?:3|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"3\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[67]\"]]]],\"GP\":[\"590\",\"00\",\"(?:590|(?:69|80)\\\\d|976)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"590(?:0[1-68]|[14][0-24-9]|2[0-68]|3[1289]|5[3-579]|6[0189]|7[08]|8[0-689]|9\\\\d)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"976[01]\\\\d{5}\"]]],\"GQ\":[\"240\",\"00\",\"222\\\\d{6}|(?:3\\\\d|55|[89]0)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235]\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[89]\"]]]],\"GR\":[\"30\",\"00\",\"5005000\\\\d{3}|8\\\\d{9,11}|(?:[269]\\\\d|70)\\\\d{8}\",[10,11,12],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"21|7\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2689]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{5})\",\"$1 $2 $3\",[\"8\"]]]],\"GT\":[\"502\",\"00\",\"(?:1\\\\d{3}|[2-7])\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"GU\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|671|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([3-9]\\\\d{6})$\",\"671$1\",0,\"671\"],\"GW\":[\"245\",\"00\",\"[49]\\\\d{8}|4\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"40\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"]]]],\"GY\":[\"592\",\"001\",\"9008\\\\d{3}|(?:[2-467]\\\\d\\\\d|862)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46-9]\"]]]],\"HK\":[\"852\",\"00(?:30|5[09]|[126-9]?)\",\"8[0-46-9]\\\\d{6,7}|9\\\\d{4,7}|(?:[2-7]|9\\\\d{3})\\\\d{7}\",[5,6,7,8,9,11],[[\"(\\\\d{3})(\\\\d{2,5})\",\"$1 $2\",[\"900\",\"9003\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[1-4]|9(?:0[1-9]|[1-8])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,0,\"00\"],\"HN\":[\"504\",\"00\",\"8\\\\d{10}|[237-9]\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[237-9]\"]]]],\"HR\":[\"385\",\"00\",\"(?:[24-69]\\\\d|3[0-79])\\\\d{7}|80\\\\d{5,7}|[1-79]\\\\d{7}|6\\\\d{5,6}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"6[01]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-5]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"HT\":[\"509\",\"00\",\"[2-489]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-489]\"]]]],\"HU\":[\"36\",\"00\",\"[235-7]\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"06 $1\"]],\"06\"],\"ID\":[\"62\",\"00[89]\",\"(?:(?:00[1-9]|8\\\\d)\\\\d{4}|[1-36])\\\\d{6}|00\\\\d{10}|[1-9]\\\\d{8,10}|[2-9]\\\\d{7}\",[7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"15\"]],[\"(\\\\d{2})(\\\\d{5,9})\",\"$1 $2\",[\"2[124]|[36]1\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,7})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,8})\",\"$1 $2\",[\"[2-79]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{3})\",\"$1-$2-$3\",[\"8[1-35-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6,8})\",\"$1 $2\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"804\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"80\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"]],\"0\"],\"IE\":[\"353\",\"00\",\"(?:1\\\\d|[2569])\\\\d{6,8}|4\\\\d{6,9}|7\\\\d{8}|8\\\\d{8,9}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"2[24-9]|47|58|6[237-9]|9[35-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[45]0\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2569]|4[1-69]|7[14]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"81\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"IL\":[\"972\",\"0(?:0|1[2-9])\",\"1\\\\d{6}(?:\\\\d{3,5})?|[57]\\\\d{8}|[1-489]\\\\d{7}\",[7,8,9,10,11,12],[[\"(\\\\d{4})(\\\\d{3})\",\"$1-$2\",[\"125\"]],[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"121\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[2-489]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"12\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1-$2\",[\"159\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"1[7-9]\"]],[\"(\\\\d{3})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3-$4\",[\"15\"]]],\"0\"],\"IM\":[\"44\",\"00\",\"1624\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"0|([25-8]\\\\d{5})$\",\"1624$1\",0,\"74576|(?:16|7[56])24\"],\"IN\":[\"91\",\"00\",\"(?:000800|[2-9]\\\\d\\\\d)\\\\d{7}|1\\\\d{7,12}\",[8,9,10,11,12,13],[[\"(\\\\d{8})\",\"$1\",[\"5(?:0|2[23]|3[03]|[67]1|88)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)\"],0,1],[\"(\\\\d{4})(\\\\d{4,5})\",\"$1 $2\",[\"180\",\"1800\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"140\"],0,1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"11|2[02]|33|4[04]|79[1-7]|80[2-46]\",\"11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])\",\"11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807\",\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]\",\"1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\\\d|7(?:1(?:[013-8]\\\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]))[2-7]\"],\"0$1\",1],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"[6-9]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{2,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:6|8[06])\",\"1(?:6|8[06]0)\"],0,1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"18\"],0,1]],\"0\"],\"IO\":[\"246\",\"00\",\"3\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"3\"]]]],\"IQ\":[\"964\",\"00\",\"(?:1|7\\\\d\\\\d)\\\\d{7}|[2-6]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"IR\":[\"98\",\"00\",\"[1-9]\\\\d{9}|(?:[1-8]\\\\d\\\\d|9)\\\\d{3,4}\",[4,5,6,7,10],[[\"(\\\\d{4,5})\",\"$1\",[\"96\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,5})\",\"$1 $2\",[\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-8]\"],\"0$1\"]],\"0\"],\"IS\":[\"354\",\"00|1(?:0(?:01|[12]0)|100)\",\"(?:38\\\\d|[4-9])\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,0,\"00\"],\"IT\":[\"39\",\"00\",\"0\\\\d{5,10}|1\\\\d{8,10}|3(?:[0-8]\\\\d{7,10}|9\\\\d{7,8})|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?\",[6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"0[26]\"]],[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"0[13-57-9][0159]|8(?:03|4[17]|9[2-5])\",\"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|3[04]|[45][0-4]))\"]],[\"(\\\\d{4})(\\\\d{2,6})\",\"$1 $2\",[\"0(?:[13-579][2-46-8]|8[236-8])\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"894\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[26]|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1(?:44|[679])|[38]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[13-57-9][0159]|14\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{5})\",\"$1 $2 $3\",[\"0[26]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,[[\"0669[0-79]\\\\d{1,6}|0(?:1(?:[0159]\\\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\\\d\\\\d|3(?:[0159]\\\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\\\d|6[0-8])|7(?:[0159]\\\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\\\d{2,7}\"],[\"3[1-9]\\\\d{8}|3[2-9]\\\\d{7}\",[9,10]],[\"80(?:0\\\\d{3}|3)\\\\d{3}\",[6,9]],[\"(?:0878\\\\d{3}|89(?:2\\\\d|3[04]|4(?:[0-4]|[5-9]\\\\d\\\\d)|5[0-4]))\\\\d\\\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],0,0,0,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\",[6,9]]]],\"JE\":[\"44\",\"00\",\"1534\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"0|([0-24-8]\\\\d{5})$\",\"1534$1\",0,0,[[\"1534[0-24-8]\\\\d{5}\"],[\"7(?:(?:(?:50|82)9|937)\\\\d|7(?:00[378]|97[7-9]))\\\\d{5}\"],[\"80(?:07(?:35|81)|8901)\\\\d{4}\"],[\"(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\\\d{4}\"],[\"701511\\\\d{4}\"],0,[\"(?:3(?:0(?:07(?:35|81)|8901)|3\\\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\\\d{4})\\\\d{4}\"],[\"76(?:464|652)\\\\d{5}|76(?:0[0-2]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\"],[\"56\\\\d{8}\"]]],\"JM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|658|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"658|876\"],\"JO\":[\"962\",\"00\",\"(?:(?:[2689]|7\\\\d)\\\\d|32|53)\\\\d{6}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2356]|87\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"70\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"JP\":[\"81\",\"010\",\"00[1-9]\\\\d{6,14}|[257-9]\\\\d{9}|(?:00|[1-9]\\\\d\\\\d)\\\\d{6}\",[8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"(?:12|57|99)0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:49|80|9[16])\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9]|636)|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9]|636[457-9])|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[36]|4(?:2[09]|7[01])\",\"[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[27-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|51|6(?:[0-24]|36|5[0-3589]|72|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3\",[\"[14]|[289][2-9]|5[3-9]|7[2-4679]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"800\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[257-9]\"],\"0$1\"]],\"0\"],\"KE\":[\"254\",\"000\",\"(?:[17]\\\\d\\\\d|900)\\\\d{6}|(?:2|80)0\\\\d{6,7}|[4-6]\\\\d{6,8}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"[24-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[17]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"KG\":[\"996\",\"00\",\"8\\\\d{9}|(?:[235-8]\\\\d|99)\\\\d{7}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3(?:1[346]|[24-79])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235-79]|88\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d)(\\\\d{2,3})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"KH\":[\"855\",\"00[14-9]\",\"1\\\\d{9}|[1-9]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"KI\":[\"686\",\"00\",\"(?:[37]\\\\d|6[0-79])\\\\d{6}|(?:[2-48]\\\\d|50)\\\\d{3}\",[5,8],0,\"0\"],\"KM\":[\"269\",\"00\",\"[3478]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[3478]\"]]]],\"KN\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"869$1\",0,\"869\"],\"KP\":[\"850\",\"00|99\",\"85\\\\d{6}|(?:19\\\\d|[2-7])\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"KR\":[\"82\",\"00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))\",\"00[1-9]\\\\d{8,11}|(?:[12]|5\\\\d{3})\\\\d{7}|[13-6]\\\\d{9}|(?:[1-6]\\\\d|80)\\\\d{7}|[3-6]\\\\d{4,5}|(?:00|7)0\\\\d{8}\",[5,6,8,9,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1-$2\",[\"(?:3[1-3]|[46][1-4]|5[1-5])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"1\"]],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"[1346]|5[1-5]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1-$2-$3\",[\"5\"],\"0$1\"]],\"0\",0,\"0(8(?:[1-46-8]|5\\\\d\\\\d))?\"],\"KW\":[\"965\",\"00\",\"18\\\\d{5}|(?:[2569]\\\\d|41)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[169]|2(?:[235]|4[1-35-9])|52\"]],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[245]\"]]]],\"KY\":[\"1\",\"011\",\"(?:345|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"345$1\",0,\"345\"],\"KZ\":[\"7\",\"810\",\"(?:33622|8\\\\d{8})\\\\d{5}|[78]\\\\d{9}\",[10,14],0,\"8\",0,0,0,0,\"33|7\",0,\"8~10\"],\"LA\":[\"856\",\"00\",\"[23]\\\\d{9}|3\\\\d{8}|(?:[235-8]\\\\d|41)\\\\d{6}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2[13]|3[14]|[4-8]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"30[013-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\"],\"LB\":[\"961\",\"00\",\"[27-9]\\\\d{7}|[13-9]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27-9]\"]]],\"0\"],\"LC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|758|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-8]\\\\d{6})$\",\"758$1\",0,\"758\"],\"LI\":[\"423\",\"00\",\"[68]\\\\d{8}|(?:[2378]\\\\d|90)\\\\d{5}\",[7,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2379]|8(?:0[09]|7)\",\"[2379]|8(?:0(?:02|9)|7)\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"69\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],\"0\",0,\"0|(1001)\"],\"LK\":[\"94\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[1-689]\"],\"0$1\"]],\"0\"],\"LR\":[\"231\",\"00\",\"(?:2|33|5\\\\d|77|88)\\\\d{7}|[4-6]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[4-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\"]],\"0\"],\"LS\":[\"266\",\"00\",\"(?:[256]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2568]\"]]]],\"LT\":[\"370\",\"00\",\"(?:[3469]\\\\d|52|[78]0)\\\\d{6}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"52[0-7]\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"8 $1\",1],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"37|4(?:[15]|6[1-8])\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"(8-$1)\",1]],\"8\",0,\"[08]\"],\"LU\":[\"352\",\"00\",\"35[013-9]\\\\d{4,8}|6\\\\d{8}|35\\\\d{2,4}|(?:[2457-9]\\\\d|3[0-46-9])\\\\d{2,9}\",[4,5,6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"20[2-689]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"80[01]|90[015]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"20\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4 $5\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,5})\",\"$1 $2 $3 $4\",[\"[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]\"]]],0,0,\"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\\\d)\"],\"LV\":[\"371\",\"00\",\"(?:[268]\\\\d|90)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[269]|8[01]\"]]]],\"LY\":[\"218\",\"00\",\"[2-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MA\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],[[\"(\\\\d{5})(\\\\d{4})\",\"$1-$2\",[\"5(?:29|38)\",\"5(?:29|38)[89]\",\"5(?:29|38)[89]0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5[45]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1-$2\",[\"5(?:2[2-489]|3[5-9]|9)|892\",\"5(?:2(?:[2-49]|8[235-9])|3[5-9]|9)|892\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"8\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1-$2\",[\"[5-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"5(?:29(?:[189][05]|2[29]|3[01])|38(?:8[057]|9[05]))\\\\d{4}|5(?:2(?:[0-25-7]\\\\d|3[1-578]|4[02-46-8]|8[0235-7]|90)|3(?:[0-47]\\\\d|5[02-9]|6[02-8]|80|9[3-9])|(?:4[067]|5[03])\\\\d)\\\\d{5}\"],[\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:[017]\\\\d|6[0-367]))\\\\d{6}\"],[\"80\\\\d{7}\"],[\"89\\\\d{7}\"],0,0,0,0,[\"592(?:4[0-2]|93)\\\\d{4}\"]]],\"MC\":[\"377\",\"00\",\"(?:[3489]|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[389]\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"6\"],\"0$1\"]],\"0\"],\"MD\":[\"373\",\"00\",\"(?:[235-7]\\\\d|[89]0)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"22|3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[25-7]\"],\"0$1\"]],\"0\"],\"ME\":[\"382\",\"00\",\"(?:20|[3-79]\\\\d)\\\\d{6}|80\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MF\":[\"590\",\"00\",\"(?:590|(?:69|80)\\\\d|976)\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"976[01]\\\\d{5}\"]]],\"MG\":[\"261\",\"00\",\"[23]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\",0,\"0|([24-9]\\\\d{6})$\",\"20$1\"],\"MH\":[\"692\",\"011\",\"329\\\\d{4}|(?:[256]\\\\d|45)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-6]\"]]],\"1\"],\"MK\":[\"389\",\"00\",\"[2-578]\\\\d{7}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2|34[47]|4(?:[37]7|5[47]|64)\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[347]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[58]\"],\"0$1\"]],\"0\"],\"ML\":[\"223\",\"00\",\"[24-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-9]\"]]]],\"MM\":[\"95\",\"00\",\"1\\\\d{5,7}|95\\\\d{6}|(?:[4-7]|9[0-46-9])\\\\d{6,8}|(?:2|8\\\\d)\\\\d{5,8}\",[6,7,8,9,10],[[\"(\\\\d)(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"16|2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[4-7]|8[1-35]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4,6})\",\"$1 $2 $3\",[\"9(?:2[0-4]|[35-9]|4[137-9])\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"92\"],\"0$1\"],[\"(\\\\d)(\\\\d{5})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"MN\":[\"976\",\"001\",\"[12]\\\\d{7,9}|[57-9]\\\\d{7}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[12]1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[57-9]\"]],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[12]2[1-3]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])\",\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"[12]\"],\"0$1\"]],\"0\"],\"MO\":[\"853\",\"00\",\"0800\\\\d{3}|(?:28|[68]\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[268]\"]]]],\"MP\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:67|90)0\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"670$1\",0,\"670\"],\"MQ\":[\"596\",\"00\",\"(?:69|80)\\\\d{7}|(?:59|97)6\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"MR\":[\"222\",\"00\",\"(?:[2-4]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-48]\"]]]],\"MS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|664|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([34]\\\\d{6})$\",\"664$1\",0,\"664\"],\"MT\":[\"356\",\"00\",\"3550\\\\d{4}|(?:[2579]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2357-9]\"]]]],\"MU\":[\"230\",\"0(?:0|[24-7]0|3[03])\",\"(?:5|8\\\\d\\\\d)\\\\d{7}|[2-468]\\\\d{6}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46]|8[013]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"5\"]],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"8\"]]],0,0,0,0,0,0,0,\"020\"],\"MV\":[\"960\",\"0(?:0|19)\",\"(?:800|9[0-57-9]\\\\d)\\\\d{7}|[34679]\\\\d{6}\",[7,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[3467]|9[13-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,0,\"00\"],\"MW\":[\"265\",\"00\",\"(?:[129]\\\\d|31|77|88)\\\\d{7}|1\\\\d{6}\",[7,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[137-9]\"],\"0$1\"]],\"0\"],\"MX\":[\"52\",\"0[09]\",\"1(?:(?:44|99)[1-9]|65[0-689])\\\\d{7}|(?:1(?:[017]\\\\d|[235][1-9]|4[0-35-9]|6[0-46-9]|8[1-79]|9[1-8])|[2-9]\\\\d)\\\\d{8}\",[10,11],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"33|5[56]|81\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-9]\"],0,1],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 $3 $4\",[\"1(?:33|5[56]|81)\"],0,1],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 $3 $4\",[\"1\"],0,1]],\"01\",0,\"0(?:[12]|4[45])|1\",0,0,0,0,\"00\"],\"MY\":[\"60\",\"00\",\"1\\\\d{8,9}|(?:3\\\\d|[4-9])\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"[4-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1-$2 $3\",[\"1(?:[02469]|[378][1-9])|8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"3\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3-$4\",[\"1[36-8]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"15\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"MZ\":[\"258\",\"00\",\"(?:2|8\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2|8[2-79]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"NA\":[\"264\",\"00\",\"[68]\\\\d{7,8}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"87\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"NC\":[\"687\",\"00\",\"(?:050|[2-57-9]\\\\d\\\\d)\\\\d{3}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1.$2.$3\",[\"[02-57-9]\"]]]],\"NE\":[\"227\",\"00\",\"[027-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"08\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[089]|2[013]|7[04]\"]]]],\"NF\":[\"672\",\"00\",\"[13]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"1[0-3]\"]],[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"[13]\"]]],0,0,\"([0-258]\\\\d{4})$\",\"3$1\"],\"NG\":[\"234\",\"009\",\"(?:[124-7]|9\\\\d{3})\\\\d{6}|[1-9]\\\\d{7}|[78]\\\\d{9,13}\",[7,8,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"78\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]|9(?:0[3-9]|[1-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-7]|8[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})(\\\\d{5,6})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"]],\"0\"],\"NI\":[\"505\",\"00\",\"(?:1800|[25-8]\\\\d{3})\\\\d{4}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[125-8]\"]]]],\"NL\":[\"31\",\"00\",\"(?:[124-7]\\\\d\\\\d|3(?:[02-9]\\\\d|1[0-8]))\\\\d{6}|8\\\\d{6,9}|9\\\\d{6,10}|1\\\\d{4,5}\",[5,6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{4,7})\",\"$1 $2\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"66\"],\"0$1\"],[\"(\\\\d)(\\\\d{8})\",\"$1 $2\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[16-8]|2[259]|3[124]|4[17-9]|5[124679]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-578]|91\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"NO\":[\"47\",\"00\",\"(?:0|[2-9]\\\\d{3})\\\\d{4}\",[5,8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[489]|59\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[235-7]\"]]],0,0,0,0,0,\"[02-689]|7[0-8]\"],\"NP\":[\"977\",\"00\",\"(?:1\\\\d|9)\\\\d{9}|[1-9]\\\\d{7}\",[8,10,11],[[\"(\\\\d)(\\\\d{7})\",\"$1-$2\",[\"1[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1-$2\",[\"1[01]|[2-8]|9(?:[1-579]|6[2-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"9\"]]],\"0\"],\"NR\":[\"674\",\"00\",\"(?:444|(?:55|8\\\\d)\\\\d|666)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-68]\"]]]],\"NU\":[\"683\",\"00\",\"(?:[47]|888\\\\d)\\\\d{3}\",[4,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8\"]]]],\"NZ\":[\"64\",\"0(?:0|161)\",\"[29]\\\\d{7,9}|50\\\\d{5}(?:\\\\d{2,3})?|6[0-35-9]\\\\d{6}|7\\\\d{7,8}|8\\\\d{4,9}|(?:11\\\\d|[34])\\\\d{7}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,8})\",\"$1 $2\",[\"8[1-579]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"50[036-8]|[89]0\",\"50(?:[0367]|88)|[89]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"24|[346]|7[2-57-9]|9[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:10|74)|[59]|80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1|2[028]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,5})\",\"$1 $2 $3\",[\"2(?:[169]|7[0-35-9])|7|86\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"00\"],\"OM\":[\"968\",\"00\",\"(?:1505|[279]\\\\d{3}|500)\\\\d{4}|800\\\\d{5,6}\",[7,8,9],[[\"(\\\\d{3})(\\\\d{4,6})\",\"$1 $2\",[\"[58]\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[179]\"]]]],\"PA\":[\"507\",\"00\",\"(?:00800|8\\\\d{3})\\\\d{6}|[68]\\\\d{7}|[1-57-9]\\\\d{6}\",[7,8,10,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[1-57-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[68]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]]],\"PE\":[\"51\",\"19(?:1[124]|77|90)00\",\"(?:[14-8]|9\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[4-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"]]],\"0\",0,0,0,0,0,0,0,\" Anexo \"],\"PF\":[\"689\",\"00\",\"4\\\\d{5}(?:\\\\d{2})?|8\\\\d{7,8}\",[6,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4|8[7-9]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]]],\"PG\":[\"675\",\"00|140[1-3]\",\"(?:180|[78]\\\\d{3})\\\\d{4}|(?:[2-589]\\\\d|64)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"18|[2-69]|85\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[78]\"]]],0,0,0,0,0,0,0,\"00\"],\"PH\":[\"63\",\"00\",\"(?:[2-7]|9\\\\d)\\\\d{8}|2\\\\d{5}|(?:1800|8)\\\\d{7,9}\",[6,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"2\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2\",\"3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"346|4(?:27|9[35])|883\",\"3469|4(?:279|9(?:30|56))|8834\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|8[2-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{4})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"1\"]]],\"0\"],\"PK\":[\"92\",\"00\",\"122\\\\d{6}|[24-8]\\\\d{10,11}|9(?:[013-9]\\\\d{8,10}|2(?:[01]\\\\d\\\\d|2(?:[06-8]\\\\d|1[01]))\\\\d{7})|(?:[2-8]\\\\d{3}|92(?:[0-7]\\\\d|8[1-9]))\\\\d{6}|[24-9]\\\\d{8}|[89]\\\\d{7}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,7})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{6,7})\",\"$1 $2\",[\"2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])\",\"9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{7,8})\",\"$1 $2\",[\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"58\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[24-9]\"],\"(0$1)\"]],\"0\"],\"PL\":[\"48\",\"00\",\"6\\\\d{5}(?:\\\\d{2})?|8\\\\d{9}|[1-9]\\\\d{6}(?:\\\\d{2})?\",[6,7,8,9,10],[[\"(\\\\d{5})\",\"$1\",[\"19\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"11|64\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1\",\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"64\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"21|39|45|5[0137]|6[0469]|7[02389]|8(?:0[14]|8)\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[2-8]|[2-7]|8[1-79]|9[145]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"8\"]]]],\"PM\":[\"508\",\"00\",\"(?:[45]|80\\\\d\\\\d)\\\\d{5}\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"PR\":[\"1\",\"011\",\"(?:[589]\\\\d\\\\d|787)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"787|939\"],\"PS\":[\"970\",\"00\",\"[2489]2\\\\d{6}|(?:1\\\\d|5)\\\\d{8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2489]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"PT\":[\"351\",\"00\",\"1693\\\\d{5}|(?:[26-9]\\\\d|30)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2[12]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"16|[236-9]\"]]]],\"PW\":[\"680\",\"01[12]\",\"(?:[24-8]\\\\d\\\\d|345|900)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"PY\":[\"595\",\"00\",\"59\\\\d{4,6}|9\\\\d{5,10}|(?:[2-46-8]\\\\d|5[0-8])\\\\d{4,7}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"[2-9]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{4,5})\",\"$1 $2\",[\"2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"87\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"9(?:[5-79]|8[1-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"]]],\"0\"],\"QA\":[\"974\",\"00\",\"[2-7]\\\\d{7}|800\\\\d{4}(?:\\\\d{2})?|2\\\\d{6}\",[7,8,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"2[126]|8\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]]]],\"RE\":[\"262\",\"00\",\"9769\\\\d{5}|(?:26|[68]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2689]\"],\"0$1\"]],\"0\",0,0,0,0,\"26[23]|69|[89]\"],\"RO\":[\"40\",\"00\",\"(?:[2378]\\\\d|90)\\\\d{7}|[23]\\\\d{5}\",[6,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"2[3-6]\",\"2[3-6]\\\\d9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"219|31\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[237-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\" int \"],\"RS\":[\"381\",\"00\",\"38[02-9]\\\\d{6,9}|6\\\\d{7,9}|90\\\\d{4,8}|38\\\\d{5,6}|(?:7\\\\d\\\\d|800)\\\\d{3,9}|(?:[12]\\\\d|3[0-79])\\\\d{5,10}\",[6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3,9})\",\"$1 $2\",[\"(?:2[389]|39)0|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5,10})\",\"$1 $2\",[\"[1-36]\"],\"0$1\"]],\"0\"],\"RU\":[\"7\",\"810\",\"8\\\\d{13}|[347-9]\\\\d{9}\",[10,14],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-8]|2[1-9])\",\"7(?:1(?:[0-6]2|7|8[27])|2(?:1[23]|[2-9]2))\",\"7(?:1(?:[0-6]2|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2\"],\"8 ($1)\",1],[\"(\\\\d{5})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-68]|2[1-9])\",\"7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))\",\"7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[349]|8(?:[02-7]|1[1-8])\"],\"8 ($1)\",1],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"8\"],\"8 ($1)\"]],\"8\",0,0,0,0,\"3[04-689]|[489]\",0,\"8~10\"],\"RW\":[\"250\",\"00\",\"(?:06|[27]\\\\d\\\\d|[89]00)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"]]],\"0\"],\"SA\":[\"966\",\"00\",\"92\\\\d{7}|(?:[15]|8\\\\d)\\\\d{8}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\"],\"SB\":[\"677\",\"0[01]\",\"(?:[1-6]|[7-9]\\\\d\\\\d)\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7|8[4-9]|9(?:[1-8]|9[0-8])\"]]]],\"SC\":[\"248\",\"010|0[0-2]\",\"800\\\\d{4}|(?:[249]\\\\d|64)\\\\d{5}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[246]|9[57]\"]]],0,0,0,0,0,0,0,\"00\"],\"SD\":[\"249\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"SE\":[\"46\",\"00\",\"(?:[26]\\\\d\\\\d|9)\\\\d{9}|[1-9]\\\\d{8}|[1-689]\\\\d{7}|[1-4689]\\\\d{6}|2\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"20\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"9(?:00|39|44|9)\"],\"0$1\",0,\"$1 $2\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3\",[\"[12][136]|3[356]|4[0246]|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d)(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{3})\",\"$1-$2 $3\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"10|7\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1-$2 $3 $4\",[\"9\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4 $5\",[\"[26]\"],\"0$1\",0,\"$1 $2 $3 $4 $5\"]],\"0\"],\"SG\":[\"65\",\"0[0-3]\\\\d\",\"(?:(?:1\\\\d|8)\\\\d\\\\d|7000)\\\\d{7}|[3689]\\\\d{7}\",[8,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[369]|8(?:0[1-5]|[1-9])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"SH\":[\"290\",\"00\",\"(?:[256]\\\\d|8)\\\\d{3}\",[4,5],0,0,0,0,0,0,\"[256]\"],\"SI\":[\"386\",\"00|10(?:22|66|88|99)\",\"[1-7]\\\\d{7}|8\\\\d{4,7}|90\\\\d{4,6}\",[5,6,7,8],[[\"(\\\\d{2})(\\\\d{3,6})\",\"$1 $2\",[\"8[09]|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"59|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37][01]|4[0139]|51|6\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-57]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,0,\"00\"],\"SJ\":[\"47\",\"00\",\"0\\\\d{4}|(?:[489]\\\\d|[57]9)\\\\d{6}\",[5,8],0,0,0,0,0,0,\"79\"],\"SK\":[\"421\",\"00\",\"[2-689]\\\\d{8}|[2-59]\\\\d{6}|[2-5]\\\\d{5}\",[6,7,9],[[\"(\\\\d)(\\\\d{2})(\\\\d{3,4})\",\"$1 $2 $3\",[\"21\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-5][1-8]1\",\"[3-5][1-8]1[67]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[689]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"[3-5]\"],\"0$1\"]],\"0\"],\"SL\":[\"232\",\"00\",\"(?:[237-9]\\\\d|66)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[236-9]\"],\"(0$1)\"]],\"0\"],\"SM\":[\"378\",\"00\",\"(?:0549|[5-7]\\\\d)\\\\d{6}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"0\"]]],0,0,\"([89]\\\\d{5})$\",\"0549$1\"],\"SN\":[\"221\",\"00\",\"(?:[378]\\\\d|93)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[379]\"]]]],\"SO\":[\"252\",\"00\",\"[346-9]\\\\d{8}|[12679]\\\\d{7}|[1-5]\\\\d{6}|[1348]\\\\d{5}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"8[125]\"]],[\"(\\\\d{6})\",\"$1\",[\"[134]\"]],[\"(\\\\d)(\\\\d{6})\",\"$1 $2\",[\"[15]|2[0-79]|3[0-46-8]|4[0-7]\"]],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"24|[67]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[3478]|64|90\"]],[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"1|28|6(?:0[5-7]|[1-35-9])|9[2-9]\"]]],\"0\"],\"SR\":[\"597\",\"00\",\"(?:[2-5]|68|[78]\\\\d)\\\\d{5}\",[6,7],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"56\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1-$2\",[\"[2-5]\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[6-8]\"]]]],\"SS\":[\"211\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"ST\":[\"239\",\"00\",\"(?:22|9\\\\d)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[29]\"]]]],\"SV\":[\"503\",\"00\",\"[267]\\\\d{7}|[89]00\\\\d{4}(?:\\\\d{4})?\",[7,8,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[89]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[267]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]]],\"SX\":[\"1\",\"011\",\"7215\\\\d{6}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|(5\\\\d{6})$\",\"721$1\",0,\"721\"],\"SY\":[\"963\",\"00\",\"[1-39]\\\\d{8}|[1-5]\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-5]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\",1]],\"0\"],\"SZ\":[\"268\",\"00\",\"0800\\\\d{4}|(?:[237]\\\\d|900)\\\\d{6}\",[8,9],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[0237]\"]],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"9\"]]]],\"TA\":[\"290\",\"00\",\"8\\\\d{3}\",[4],0,0,0,0,0,0,\"8\"],\"TC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|649|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-479]\\\\d{6})$\",\"649$1\",0,\"649\"],\"TD\":[\"235\",\"00|16\",\"(?:22|[69]\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2679]\"]]],0,0,0,0,0,0,0,\"00\"],\"TG\":[\"228\",\"00\",\"[279]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[279]\"]]]],\"TH\":[\"66\",\"00[1-9]\",\"(?:001800|[2-57]|[689]\\\\d)\\\\d{7}|1\\\\d{7,9}\",[8,9,10,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[13-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"TJ\":[\"992\",\"810\",\"(?:00|[1-57-9]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{6})(\\\\d)(\\\\d{2})\",\"$1 $2 $3\",[\"331\",\"3317\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[34]7|91[78]\"]],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"3[1-5]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[0-57-9]\"]]],0,0,0,0,0,0,0,\"8~10\"],\"TK\":[\"690\",\"00\",\"[2-47]\\\\d{3,6}\",[4,5,6,7]],\"TL\":[\"670\",\"00\",\"7\\\\d{7}|(?:[2-47]\\\\d|[89]0)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-489]|70\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"7\"]]]],\"TM\":[\"993\",\"810\",\"[1-6]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"12\"],\"(8 $1)\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-5]\"],\"(8 $1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"6\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"TN\":[\"216\",\"00\",\"[2-57-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-57-9]\"]]]],\"TO\":[\"676\",\"00\",\"(?:0800|(?:[5-8]\\\\d\\\\d|999)\\\\d)\\\\d{3}|[2-8]\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1-$2\",[\"[2-4]|50|6[09]|7[0-24-69]|8[05]\"]],[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]]]],\"TR\":[\"90\",\"00\",\"4\\\\d{6}|8\\\\d{11,12}|(?:[2-58]\\\\d\\\\d|900)\\\\d{7}\",[7,10,12,13],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"512|8[01589]|90\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5(?:[0-59]|61)\",\"5(?:[0-59]|616)\",\"5(?:[0-59]|6161)\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24][1-8]|3[1-9]\"],\"(0$1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{6,7})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1]],\"0\"],\"TT\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-46-8]\\\\d{6})$\",\"868$1\",0,\"868\"],\"TV\":[\"688\",\"00\",\"(?:2|7\\\\d\\\\d|90)\\\\d{4}\",[5,6,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"TW\":[\"886\",\"0(?:0[25-79]|19)\",\"[2-689]\\\\d{8}|7\\\\d{9,10}|[2-8]\\\\d{7}|2\\\\d{6}\",[7,8,9,10,11],[[\"(\\\\d{2})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"202\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[258]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]\",\"[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\"#\"],\"TZ\":[\"255\",\"00[056]\",\"(?:[26-8]\\\\d|41|90)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[24]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"]],\"0\"],\"UA\":[\"380\",\"00\",\"[89]\\\\d{9}|[3-9]\\\\d{8}\",[9,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]\",\"6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[45][0-5]|5(?:0|6[37])|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]\",\"4[45][0-5]|5(?:0|6(?:3[14-7]|7))|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"0~0\"],\"UG\":[\"256\",\"00[057]\",\"800\\\\d{6}|(?:[29]0|[347]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"202\",\"2024\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[27-9]|4(?:6[45]|[7-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[34]\"],\"0$1\"]],\"0\"],\"US\":[\"1\",\"011\",\"[2-9]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",[\"[2-9]\"],0,1,\"$1-$2-$3\"]],\"1\",0,0,0,0,0,[[\"5(?:05(?:[2-57-9]\\\\d\\\\d|6(?:[0-35-9]\\\\d|44))|82(?:2(?:0[0-3]|[268]2)|3(?:0[02]|22|33)|4(?:00|4[24]|65|82)|5(?:00|29|58|83)|6(?:00|66|82)|7(?:58|77)|8(?:00|42|88)|9(?:00|9[89])))\\\\d{4}|(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[01356]|3[0-24679]|4[167]|5[12]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[023578]|58|6[349]|7[0589]|8[04])|5(?:0[1-47-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[0-5]|8[056])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[01679]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[0-59]|8[156])|8(?:0[1-68]|1[02-8]|2[08]|3[0-289]|4[03578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[0157-9]|5[12469]|7[0-389]|8[04-69]))[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-7]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"UY\":[\"598\",\"0(?:0|1[3-9]\\\\d)\",\"4\\\\d{9}|[1249]\\\\d{7}|(?:[49]\\\\d|80)\\\\d{5}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"405|8|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[124]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"00\",\" int. \"],\"UZ\":[\"998\",\"810\",\"(?:33|55|[679]\\\\d|88)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[35-9]\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"VA\":[\"39\",\"00\",\"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11],0,0,0,0,0,0,\"06698\"],\"VC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|784|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"784$1\",0,\"784\"],\"VE\":[\"58\",\"00\",\"[68]00\\\\d{7}|(?:[24]\\\\d|[59]0)\\\\d{8}\",[10],[[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"[24-689]\"],\"0$1\"]],\"0\"],\"VG\":[\"1\",\"011\",\"(?:284|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-578]\\\\d{6})$\",\"284$1\",0,\"284\"],\"VI\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:34|90)0\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"340$1\",0,\"340\"],\"VN\":[\"84\",\"00\",\"[12]\\\\d{9}|[135-9]\\\\d{8}|[16]\\\\d{7}|[16-8]\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"1\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[69]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[48]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\",1]],\"0\"],\"VU\":[\"678\",\"00\",\"[57-9]\\\\d{6}|(?:[238]\\\\d|48)\\\\d{3}\",[5,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[57-9]\"]]]],\"WF\":[\"681\",\"00\",\"(?:40|72)\\\\d{4}|8\\\\d{5}(?:\\\\d{3})?\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[478]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]]],\"WS\":[\"685\",\"0\",\"(?:[2-6]|8\\\\d{5})\\\\d{4}|[78]\\\\d{6}|[68]\\\\d{5}\",[5,6,7,10],[[\"(\\\\d{5})\",\"$1\",[\"[2-5]|6[1-9]\"]],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[68]\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"XK\":[\"383\",\"00\",\"[23]\\\\d{7,8}|(?:4\\\\d\\\\d|[89]00)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[23]\"],\"0$1\"]],\"0\"],\"YE\":[\"967\",\"00\",\"(?:1|7\\\\d)\\\\d{7}|[1-7]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-6]|7[24-68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"YT\":[\"262\",\"00\",\"80\\\\d{7}|(?:26|63)9\\\\d{6}\",[9],0,\"0\",0,0,0,0,\"269|63\"],\"ZA\":[\"27\",\"00\",\"[1-79]\\\\d{8}|8\\\\d{4,9}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"860\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"ZM\":[\"260\",\"00\",\"800\\\\d{6}|(?:21|63|[79]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[28]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[79]\"],\"0$1\"]],\"0\"],\"ZW\":[\"263\",\"00\",\"2(?:[0-57-9]\\\\d{6,8}|6[0-24-9]\\\\d{6,7})|[38]\\\\d{9}|[35-8]\\\\d{8}|[3-6]\\\\d{7}|[1-689]\\\\d{6}|[1-3569]\\\\d{5}|[1356]\\\\d{4}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{3,5})\",\"$1 $2\",[\"2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2\",\"2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)\",\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"29[013-9]|39|54\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,5})\",\"$1 $2\",[\"(?:25|54)8\",\"258|5483\"],\"0$1\"]],\"0\"]},\"nonGeographic\":{\"800\":[\"800\",0,\"(?:005|[1-9]\\\\d\\\\d)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"\\\\d\"]]],0,0,0,0,0,0,[0,0,[\"(?:005|[1-9]\\\\d\\\\d)\\\\d{5}\"]]],\"808\":[\"808\",0,\"[1-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[1-9]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,0,[\"[1-9]\\\\d{7}\"]]],\"870\":[\"870\",0,\"7\\\\d{11}|[35-7]\\\\d{8}\",[9,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[35-7]\"]]],0,0,0,0,0,0,[0,[\"(?:[356]|774[45])\\\\d{8}|7[6-8]\\\\d{7}\"]]],\"878\":[\"878\",0,\"10\\\\d{10}\",[12],[[\"(\\\\d{2})(\\\\d{5})(\\\\d{5})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"10\\\\d{10}\"]]],\"881\":[\"881\",0,\"[0-36-9]\\\\d{8}\",[9],[[\"(\\\\d)(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"[0-36-9]\"]]],0,0,0,0,0,0,[0,[\"[0-36-9]\\\\d{8}\"]]],\"882\":[\"882\",0,\"[13]\\\\d{6}(?:\\\\d{2,5})?|285\\\\d{9}|(?:[19]\\\\d|49)\\\\d{6}\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"16|342\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"4\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"3[23]\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"34[57]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"34\"]],[\"(\\\\d{2})(\\\\d{4,5})(\\\\d{5})\",\"$1 $2 $3\",[\"[1-3]\"]]],0,0,0,0,0,0,[0,[\"342\\\\d{4}|(?:337|49)\\\\d{6}|3(?:2|47|7\\\\d{3})\\\\d{7}\",[7,8,9,10,12]],0,0,0,0,0,0,[\"1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\\\d{4}|6\\\\d{5,10})|(?:(?:285\\\\d\\\\d|3(?:45|[69]\\\\d{3}))\\\\d|9[89])\\\\d{6}\"]]],\"883\":[\"883\",0,\"(?:210|370\\\\d\\\\d)\\\\d{7}|51\\\\d{7}(?:\\\\d{3})?\",[9,10,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"510\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"51[13]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[35]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"(?:210|(?:370[1-9]|51[013]0)\\\\d)\\\\d{7}|5100\\\\d{5}\"]]],\"888\":[\"888\",0,\"\\\\d{11}\",[11],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\"]],0,0,0,0,0,0,[0,0,0,0,0,0,[\"\\\\d{11}\"]]],\"979\":[\"979\",0,\"[1359]\\\\d{8}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1359]\"]]],0,0,0,0,0,0,[0,0,0,[\"[1359]\\\\d{8}\"]]]}}","// Importing from a \".js\" file is a workaround for Node.js \"ES Modules\"\r\n// importing system which is even uncapable of importing \"*.json\" files.\r\nimport metadata from '../../metadata.min.json.js'\r\n\r\nexport default function withMetadataArgument(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}","function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n// https://stackoverflow.com/a/46971044/970769\n// \"Breaking changes in Typescript 2.1\"\n// \"Extending built-ins like Error, Array, and Map may no longer work.\"\n// \"As a recommendation, you can manually adjust the prototype immediately after any super(...) calls.\"\n// https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\nvar ParseError = /*#__PURE__*/function (_Error) {\n  _inherits(ParseError, _Error);\n\n  var _super = _createSuper(ParseError);\n\n  function ParseError(code) {\n    var _this;\n\n    _classCallCheck(this, ParseError);\n\n    _this = _super.call(this, code); // Set the prototype explicitly.\n    // Any subclass of FooError will have to manually set the prototype as well.\n\n    Object.setPrototypeOf(_assertThisInitialized(_this), ParseError.prototype);\n    _this.name = _this.constructor.name;\n    return _this;\n  }\n\n  return _createClass(ParseError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nexport { ParseError as default };\n//# sourceMappingURL=ParseError.js.map","// The minimum length of the national significant number.\nexport var MIN_LENGTH_FOR_NSN = 2; // The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\n\nexport var MAX_LENGTH_FOR_NSN = 17; // The maximum length of the country calling code.\n\nexport var MAX_LENGTH_COUNTRY_CODE = 3; // Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\n\nexport var VALID_DIGITS = \"0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9\"; // `DASHES` will be right after the opening square bracket of the \"character class\"\n\nvar DASHES = \"-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D\";\nvar SLASHES = \"\\uFF0F/\";\nvar DOTS = \"\\uFF0E.\";\nexport var WHITESPACE = \" \\xA0\\xAD\\u200B\\u2060\\u3000\";\nvar BRACKETS = \"()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]\"; // export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\n\nvar TILDES = \"~\\u2053\\u223C\\uFF5E\"; // Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\n\nexport var VALID_PUNCTUATION = \"\".concat(DASHES).concat(SLASHES).concat(DOTS).concat(WHITESPACE).concat(BRACKETS).concat(TILDES);\nexport var PLUS_CHARS = \"+\\uFF0B\"; // const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')\n//# sourceMappingURL=constants.js.map","// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\n//\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\nexport default function (a, b) {\n  a = a.split('-');\n  b = b.split('-');\n  var pa = a[0].split('.');\n  var pb = b[0].split('.');\n\n  for (var i = 0; i < 3; i++) {\n    var na = Number(pa[i]);\n    var nb = Number(pb[i]);\n    if (na > nb) return 1;\n    if (nb > na) return -1;\n    if (!isNaN(na) && isNaN(nb)) return 1;\n    if (isNaN(na) && !isNaN(nb)) return -1;\n  }\n\n  if (a[1] && b[1]) {\n    return a[1] > b[1] ? 1 : a[1] < b[1] ? -1 : 0;\n  }\n\n  return !a[1] && b[1] ? 1 : a[1] && !b[1] ? -1 : 0;\n}\n//# sourceMappingURL=semver-compare.js.map","function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport compare from './tools/semver-compare.js'; // Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\n\nvar V2 = '1.0.18'; // Added \"idd_prefix\" and \"default_idd_prefix\".\n\nvar V3 = '1.2.0'; // Moved `001` country code to \"nonGeographic\" section of metadata.\n\nvar V4 = '1.7.35';\nvar DEFAULT_EXT_PREFIX = ' ext. ';\nvar CALLING_CODE_REG_EXP = /^\\d+$/;\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\n\nvar Metadata = /*#__PURE__*/function () {\n  function Metadata(metadata) {\n    _classCallCheck(this, Metadata);\n\n    validateMetadata(metadata);\n    this.metadata = metadata;\n    setVersion.call(this, metadata);\n  }\n\n  _createClass(Metadata, [{\n    key: \"getCountries\",\n    value: function getCountries() {\n      return Object.keys(this.metadata.countries).filter(function (_) {\n        return _ !== '001';\n      });\n    }\n  }, {\n    key: \"getCountryMetadata\",\n    value: function getCountryMetadata(countryCode) {\n      return this.metadata.countries[countryCode];\n    }\n  }, {\n    key: \"nonGeographic\",\n    value: function nonGeographic() {\n      if (this.v1 || this.v2 || this.v3) return; // `nonGeographical` was a typo.\n      // It's present in metadata generated from `1.7.35` to `1.7.37`.\n      // The test case could be found by searching for \"nonGeographical\".\n\n      return this.metadata.nonGeographic || this.metadata.nonGeographical;\n    }\n  }, {\n    key: \"hasCountry\",\n    value: function hasCountry(country) {\n      return this.getCountryMetadata(country) !== undefined;\n    }\n  }, {\n    key: \"hasCallingCode\",\n    value: function hasCallingCode(callingCode) {\n      if (this.getCountryCodesForCallingCode(callingCode)) {\n        return true;\n      }\n\n      if (this.nonGeographic()) {\n        if (this.nonGeographic()[callingCode]) {\n          return true;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"isNonGeographicCallingCode\",\n    value: function isNonGeographicCallingCode(callingCode) {\n      if (this.nonGeographic()) {\n        return this.nonGeographic()[callingCode] ? true : false;\n      } else {\n        return this.getCountryCodesForCallingCode(callingCode) ? false : true;\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"country\",\n    value: function country(countryCode) {\n      return this.selectNumberingPlan(countryCode);\n    }\n  }, {\n    key: \"selectNumberingPlan\",\n    value: function selectNumberingPlan(countryCode, callingCode) {\n      // Supports just passing `callingCode` as the first argument.\n      if (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\n        callingCode = countryCode;\n        countryCode = null;\n      }\n\n      if (countryCode && countryCode !== '001') {\n        if (!this.hasCountry(countryCode)) {\n          throw new Error(\"Unknown country: \".concat(countryCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this);\n      } else if (callingCode) {\n        if (!this.hasCallingCode(callingCode)) {\n          throw new Error(\"Unknown calling code: \".concat(callingCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this);\n      } else {\n        this.numberingPlan = undefined;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getCountryCodesForCallingCode\",\n    value: function getCountryCodesForCallingCode(callingCode) {\n      var countryCodes = this.countryCallingCodes()[callingCode];\n\n      if (countryCodes) {\n        // Metadata before V4 included \"non-geographic entity\" calling codes\n        // inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\n        // Now the semantics of `country_calling_codes` has changed:\n        // it's specifically for \"countries\" now.\n        // Older versions of custom metadata will simply skip parsing\n        // \"non-geographic entity\" phone numbers with new versions\n        // of this library: it's not considered a bug,\n        // because such numbers are extremely rare,\n        // and developers extremely rarely use custom metadata.\n        if (countryCodes.length === 1 && countryCodes[0].length === 3) {\n          return;\n        }\n\n        return countryCodes;\n      }\n    }\n  }, {\n    key: \"getCountryCodeForCallingCode\",\n    value: function getCountryCodeForCallingCode(callingCode) {\n      var countryCodes = this.getCountryCodesForCallingCode(callingCode);\n\n      if (countryCodes) {\n        return countryCodes[0];\n      }\n    }\n  }, {\n    key: \"getNumberingPlanMetadata\",\n    value: function getNumberingPlanMetadata(callingCode) {\n      var countryCode = this.getCountryCodeForCallingCode(callingCode);\n\n      if (countryCode) {\n        return this.getCountryMetadata(countryCode);\n      }\n\n      if (this.nonGeographic()) {\n        var metadata = this.nonGeographic()[callingCode];\n\n        if (metadata) {\n          return metadata;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        // In that metadata, there was no concept of \"non-geographic\" metadata\n        // so metadata for `001` country code was stored along with other countries.\n        // The test case can be found by searching for:\n        // \"should work around `nonGeographic` metadata not existing\".\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return this.metadata.countries['001'];\n        }\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"countryCallingCode\",\n    value: function countryCallingCode() {\n      return this.numberingPlan.callingCode();\n    } // Deprecated.\n\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      return this.numberingPlan.IDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      return this.numberingPlan.defaultIDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      return this.numberingPlan.nationalNumberPattern();\n    } // Deprecated.\n\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      return this.numberingPlan.possibleLengths();\n    } // Deprecated.\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return this.numberingPlan.formats();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      return this.numberingPlan.nationalPrefixForParsing();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.numberingPlan.nationalPrefixTransformRule();\n    } // Deprecated.\n\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.numberingPlan.leadingDigits();\n    } // Deprecated.\n\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      return this.numberingPlan.hasTypes();\n    } // Deprecated.\n\n  }, {\n    key: \"type\",\n    value: function type(_type) {\n      return this.numberingPlan.type(_type);\n    } // Deprecated.\n\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      return this.numberingPlan.ext();\n    }\n  }, {\n    key: \"countryCallingCodes\",\n    value: function countryCallingCodes() {\n      if (this.v1) return this.metadata.country_phone_code_to_countries;\n      return this.metadata.country_calling_codes;\n    } // Deprecated.\n\n  }, {\n    key: \"chooseCountryByCountryCallingCode\",\n    value: function chooseCountryByCountryCallingCode(callingCode) {\n      return this.selectNumberingPlan(callingCode);\n    }\n  }, {\n    key: \"hasSelectedNumberingPlan\",\n    value: function hasSelectedNumberingPlan() {\n      return this.numberingPlan !== undefined;\n    }\n  }]);\n\n  return Metadata;\n}();\n\nexport { Metadata as default };\n\nvar NumberingPlan = /*#__PURE__*/function () {\n  function NumberingPlan(metadata, globalMetadataObject) {\n    _classCallCheck(this, NumberingPlan);\n\n    this.globalMetadataObject = globalMetadataObject;\n    this.metadata = metadata;\n    setVersion.call(this, globalMetadataObject.metadata);\n  }\n\n  _createClass(NumberingPlan, [{\n    key: \"callingCode\",\n    value: function callingCode() {\n      return this.metadata[0];\n    } // Formatting information for regions which share\n    // a country calling code is contained by only one region\n    // for performance reasons. For example, for NANPA region\n    // (\"North American Numbering Plan Administration\",\n    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n    // it will be contained in the metadata for `US`.\n\n  }, {\n    key: \"getDefaultCountryMetadataForRegion\",\n    value: function getDefaultCountryMetadataForRegion() {\n      return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode());\n    } // Is always present.\n\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[1];\n    } // Is only present when a country supports multiple IDD prefixes.\n\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[12];\n    }\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      if (this.v1 || this.v2) return this.metadata[1];\n      return this.metadata[2];\n    } // \"possible length\" data is always present in Google's metadata.\n\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.v1) return;\n      return this.metadata[this.v2 ? 2 : 3];\n    }\n  }, {\n    key: \"_getFormats\",\n    value: function _getFormats(metadata) {\n      return metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n    } // For countries of the same region (e.g. NANPA)\n    // formats are all stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      var _this = this;\n\n      var formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n      return formats.map(function (_) {\n        return new Format(_, _this);\n      });\n    }\n  }, {\n    key: \"nationalPrefix\",\n    value: function nationalPrefix() {\n      return this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n    }\n  }, {\n    key: \"_getNationalPrefixFormattingRule\",\n    value: function _getNationalPrefixFormattingRule(metadata) {\n      return metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n    } // For countries of the same region (e.g. NANPA)\n    // national prefix formatting rule is stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"_nationalPrefixForParsing\",\n    value: function _nationalPrefixForParsing() {\n      return this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7];\n    }\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      // If `national_prefix_for_parsing` is not set explicitly,\n      // then infer it from `national_prefix` (if any)\n      return this._nationalPrefixForParsing() || this.nationalPrefix();\n    }\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n    }\n  }, {\n    key: \"_getNationalPrefixIsOptionalWhenFormatting\",\n    value: function _getNationalPrefixIsOptionalWhenFormatting() {\n      return !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n    } // For countries of the same region (e.g. NANPA)\n    // \"national prefix is optional when formatting\" flag is\n    // stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n    }\n  }, {\n    key: \"types\",\n    value: function types() {\n      return this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n    }\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      // Versions 1.2.0 - 1.2.4: can be `[]`.\n\n      /* istanbul ignore next */\n      if (this.types() && this.types().length === 0) {\n        return false;\n      } // Versions <= 1.2.4: can be `undefined`.\n      // Version >= 1.2.5: can be `0`.\n\n\n      return !!this.types();\n    }\n  }, {\n    key: \"type\",\n    value: function type(_type2) {\n      if (this.hasTypes() && getType(this.types(), _type2)) {\n        return new Type(getType(this.types(), _type2), this);\n      }\n    }\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      if (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n      return this.metadata[13] || DEFAULT_EXT_PREFIX;\n    }\n  }]);\n\n  return NumberingPlan;\n}();\n\nvar Format = /*#__PURE__*/function () {\n  function Format(format, metadata) {\n    _classCallCheck(this, Format);\n\n    this._format = format;\n    this.metadata = metadata;\n  }\n\n  _createClass(Format, [{\n    key: \"pattern\",\n    value: function pattern() {\n      return this._format[0];\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      return this._format[1];\n    }\n  }, {\n    key: \"leadingDigitsPatterns\",\n    value: function leadingDigitsPatterns() {\n      return this._format[2] || [];\n    }\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._format[3] || this.metadata.nationalPrefixFormattingRule();\n    }\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    }\n  }, {\n    key: \"nationalPrefixIsMandatoryWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\n      // National prefix is omitted if there's no national prefix formatting rule\n      // set for this country, or when the national prefix formatting rule\n      // contains no national prefix itself, or when this rule is set but\n      // national prefix is optional for this phone number format\n      // (and it is not enforced explicitly)\n      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    } // Checks whether national prefix formatting rule contains national prefix.\n\n  }, {\n    key: \"usesNationalPrefix\",\n    value: function usesNationalPrefix() {\n      return this.nationalPrefixFormattingRule() && // Check that national prefix formatting rule is not a \"dummy\" one.\n      !FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule()) // In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\n      // when `national_prefix_formatting_rule` is not present.\n      // So, `true` or `false` are returned explicitly here, so that\n      // `0` number isn't returned.\n      ? true : false;\n    }\n  }, {\n    key: \"internationalFormat\",\n    value: function internationalFormat() {\n      return this._format[5] || this.format();\n    }\n  }]);\n\n  return Format;\n}();\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\n\n\nvar FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/;\n\nvar Type = /*#__PURE__*/function () {\n  function Type(type, metadata) {\n    _classCallCheck(this, Type);\n\n    this.type = type;\n    this.metadata = metadata;\n  }\n\n  _createClass(Type, [{\n    key: \"pattern\",\n    value: function pattern() {\n      if (this.metadata.v1) return this.type;\n      return this.type[0];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.metadata.v1) return;\n      return this.type[1] || this.metadata.possibleLengths();\n    }\n  }]);\n\n  return Type;\n}();\n\nfunction getType(types, type) {\n  switch (type) {\n    case 'FIXED_LINE':\n      return types[0];\n\n    case 'MOBILE':\n      return types[1];\n\n    case 'TOLL_FREE':\n      return types[2];\n\n    case 'PREMIUM_RATE':\n      return types[3];\n\n    case 'PERSONAL_NUMBER':\n      return types[4];\n\n    case 'VOICEMAIL':\n      return types[5];\n\n    case 'UAN':\n      return types[6];\n\n    case 'PAGER':\n      return types[7];\n\n    case 'VOIP':\n      return types[8];\n\n    case 'SHARED_COST':\n      return types[9];\n  }\n}\n\nexport function validateMetadata(metadata) {\n  if (!metadata) {\n    throw new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n  } // `country_phone_code_to_countries` was renamed to\n  // `country_calling_codes` in `1.0.18`.\n\n\n  if (!is_object(metadata) || !is_object(metadata.countries)) {\n    throw new Error(\"[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got \".concat(is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata, \".\"));\n  }\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n}; // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar type_of = function type_of(_) {\n  return _typeof(_);\n};\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\n\n\nexport function getExtPrefix(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).ext();\n  }\n\n  return DEFAULT_EXT_PREFIX;\n}\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\n\nexport function getCountryCallingCode(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).countryCallingCode();\n  }\n\n  throw new Error(\"Unknown country: \".concat(country));\n}\nexport function isSupportedCountry(country, metadata) {\n  // metadata = new Metadata(metadata)\n  // return metadata.hasCountry(country)\n  return metadata.countries[country] !== undefined;\n}\n\nfunction setVersion(metadata) {\n  var version = metadata.version;\n\n  if (typeof version === 'number') {\n    this.v1 = version === 1;\n    this.v2 = version === 2;\n    this.v3 = version === 3;\n    this.v4 = version === 4;\n  } else {\n    if (!version) {\n      this.v1 = true;\n    } else if (compare(version, V3) === -1) {\n      this.v2 = true;\n    } else if (compare(version, V4) === -1) {\n      this.v3 = true;\n    } else {\n      this.v4 = true;\n    }\n  }\n} // const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\n// function isCountryCode(countryCode) {\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\n// }\n//# sourceMappingURL=metadata.js.map","import { VALID_DIGITS } from '../../constants.js'; // The RFC 3966 format for extensions.\n\nvar RFC3966_EXTN_PREFIX = ';ext=';\n/**\r\n * Helper method for constructing regular expressions for parsing. Creates\r\n * an expression that captures up to max_length digits.\r\n * @return {string} RegEx pattern to capture extension digits.\r\n */\n\nvar getExtensionDigitsPattern = function getExtensionDigitsPattern(maxLength) {\n  return \"([\".concat(VALID_DIGITS, \"]{1,\").concat(maxLength, \"})\");\n};\n/**\r\n * Helper initialiser method to create the regular-expression pattern to match\r\n * extensions.\r\n * Copy-pasted from Google's `libphonenumber`:\r\n * https://github.com/google/libphonenumber/blob/55b2646ec9393f4d3d6661b9c82ef9e258e8b829/javascript/i18n/phonenumbers/phonenumberutil.js#L759-L766\r\n * @return {string} RegEx pattern to capture extensions.\r\n */\n\n\nexport default function createExtensionPattern(purpose) {\n  // We cap the maximum length of an extension based on the ambiguity of the way\n  // the extension is prefixed. As per ITU, the officially allowed length for\n  // extensions is actually 40, but we don't support this since we haven't seen real\n  // examples and this introduces many false interpretations as the extension labels\n  // are not standardized.\n\n  /** @type {string} */\n  var extLimitAfterExplicitLabel = '20';\n  /** @type {string} */\n\n  var extLimitAfterLikelyLabel = '15';\n  /** @type {string} */\n\n  var extLimitAfterAmbiguousChar = '9';\n  /** @type {string} */\n\n  var extLimitWhenNotSure = '6';\n  /** @type {string} */\n\n  var possibleSeparatorsBetweenNumberAndExtLabel = \"[ \\xA0\\\\t,]*\"; // Optional full stop (.) or colon, followed by zero or more spaces/tabs/commas.\n\n  /** @type {string} */\n\n  var possibleCharsAfterExtLabel = \"[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*\";\n  /** @type {string} */\n\n  var optionalExtnSuffix = \"#?\"; // Here the extension is called out in more explicit way, i.e mentioning it obvious\n  // patterns like \"ext.\".\n\n  /** @type {string} */\n\n  var explicitExtLabels = \"(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\\u0434\\u043E\\u0431|anexo)\"; // One-character symbols that can be used to indicate an extension, and less\n  // commonly used or more ambiguous extension labels.\n\n  /** @type {string} */\n\n  var ambiguousExtLabels = \"(?:[x\\uFF58#\\uFF03~\\uFF5E]|int|\\uFF49\\uFF4E\\uFF54)\"; // When extension is not separated clearly.\n\n  /** @type {string} */\n\n  var ambiguousSeparator = \"[- ]+\"; // This is the same as possibleSeparatorsBetweenNumberAndExtLabel, but not matching\n  // comma as extension label may have it.\n\n  /** @type {string} */\n\n  var possibleSeparatorsNumberExtLabelNoComma = \"[ \\xA0\\\\t]*\"; // \",,\" is commonly used for auto dialling the extension when connected. First\n  // comma is matched through possibleSeparatorsBetweenNumberAndExtLabel, so we do\n  // not repeat it here. Semi-colon works in Iphone and Android also to pop up a\n  // button with the extension number following.\n\n  /** @type {string} */\n\n  var autoDiallingAndExtLabelsFound = \"(?:,{2}|;)\";\n  /** @type {string} */\n\n  var rfcExtn = RFC3966_EXTN_PREFIX + getExtensionDigitsPattern(extLimitAfterExplicitLabel);\n  /** @type {string} */\n\n  var explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterExplicitLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var americanStyleExtnWithSuffix = ambiguousSeparator + getExtensionDigitsPattern(extLimitWhenNotSure) + \"#\";\n  /** @type {string} */\n\n  var autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterLikelyLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma + \"(?:,)+\" + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix; // The first regular expression covers RFC 3966 format, where the extension is added\n  // using \";ext=\". The second more generic where extension is mentioned with explicit\n  // labels like \"ext:\". In both the above cases we allow more numbers in extension than\n  // any other extension labels. The third one captures when single character extension\n  // labels or less commonly used labels are used. In such cases we capture fewer\n  // extension digits in order to reduce the chance of falsely interpreting two\n  // numbers beside each other as a number + extension. The fourth one covers the\n  // special case of American numbers where the extension is written with a hash\n  // at the end, such as \"- 503#\". The fifth one is exclusively for extension\n  // autodialling formats which are used when dialling and in this case we accept longer\n  // extensions. The last one is more liberal on the number of commas that acts as\n  // extension labels, so we have a strict cap on the number of digits in such extensions.\n\n  return rfcExtn + \"|\" + explicitExtn + \"|\" + ambiguousExtn + \"|\" + americanStyleExtnWithSuffix + \"|\" + autoDiallingExtn + \"|\" + onlyCommasExtn;\n}\n//# sourceMappingURL=createExtensionPattern.js.map","import { MIN_LENGTH_FOR_NSN, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from '../constants.js';\nimport createExtensionPattern from './extension/createExtensionPattern.js'; //  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\n\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'; //\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\n\nexport var VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*'; // This regular expression isn't present in Google's `libphonenumber`\n// and is only used to determine whether the phone number being input\n// is too short for it to even consider it a \"valid\" number.\n// This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\n\nvar VALID_PHONE_NUMBER_START_REG_EXP = new RegExp('^' + '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){1,2}' + '$', 'i');\nexport var VALID_PHONE_NUMBER_WITH_EXTENSION = VALID_PHONE_NUMBER + // Phone number extensions\n'(?:' + createExtensionPattern() + ')?'; // The combined regular expression for valid phone numbers:\n//\n\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp( // Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' + // Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER_WITH_EXTENSION + '$', 'i'); // Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\n\nexport default function isViablePhoneNumber(number) {\n  return number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n} // This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\n\nexport function isViablePhoneNumberStart(number) {\n  return VALID_PHONE_NUMBER_START_REG_EXP.test(number);\n}\n//# sourceMappingURL=isViablePhoneNumber.js.map","import createExtensionPattern from './createExtensionPattern.js'; // Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\n\nvar EXTN_PATTERN = new RegExp('(?:' + createExtensionPattern() + ')$', 'i'); // Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\n\nexport default function extractExtension(number) {\n  var start = number.search(EXTN_PATTERN);\n\n  if (start < 0) {\n    return {};\n  } // If we find a potential extension, and the number preceding this is a viable\n  // number, we assume it is an extension.\n\n\n  var numberWithoutExtension = number.slice(0, start);\n  var matches = number.match(EXTN_PATTERN);\n  var i = 1;\n\n  while (i < matches.length) {\n    if (matches[i]) {\n      return {\n        number: numberWithoutExtension,\n        ext: matches[i]\n      };\n    }\n\n    i++;\n  }\n}\n//# sourceMappingURL=extractExtension.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n  '0': '0',\n  '1': '1',\n  '2': '2',\n  '3': '3',\n  '4': '4',\n  '5': '5',\n  '6': '6',\n  '7': '7',\n  '8': '8',\n  '9': '9',\n  \"\\uFF10\": '0',\n  // Fullwidth digit 0\n  \"\\uFF11\": '1',\n  // Fullwidth digit 1\n  \"\\uFF12\": '2',\n  // Fullwidth digit 2\n  \"\\uFF13\": '3',\n  // Fullwidth digit 3\n  \"\\uFF14\": '4',\n  // Fullwidth digit 4\n  \"\\uFF15\": '5',\n  // Fullwidth digit 5\n  \"\\uFF16\": '6',\n  // Fullwidth digit 6\n  \"\\uFF17\": '7',\n  // Fullwidth digit 7\n  \"\\uFF18\": '8',\n  // Fullwidth digit 8\n  \"\\uFF19\": '9',\n  // Fullwidth digit 9\n  \"\\u0660\": '0',\n  // Arabic-indic digit 0\n  \"\\u0661\": '1',\n  // Arabic-indic digit 1\n  \"\\u0662\": '2',\n  // Arabic-indic digit 2\n  \"\\u0663\": '3',\n  // Arabic-indic digit 3\n  \"\\u0664\": '4',\n  // Arabic-indic digit 4\n  \"\\u0665\": '5',\n  // Arabic-indic digit 5\n  \"\\u0666\": '6',\n  // Arabic-indic digit 6\n  \"\\u0667\": '7',\n  // Arabic-indic digit 7\n  \"\\u0668\": '8',\n  // Arabic-indic digit 8\n  \"\\u0669\": '9',\n  // Arabic-indic digit 9\n  \"\\u06F0\": '0',\n  // Eastern-Arabic digit 0\n  \"\\u06F1\": '1',\n  // Eastern-Arabic digit 1\n  \"\\u06F2\": '2',\n  // Eastern-Arabic digit 2\n  \"\\u06F3\": '3',\n  // Eastern-Arabic digit 3\n  \"\\u06F4\": '4',\n  // Eastern-Arabic digit 4\n  \"\\u06F5\": '5',\n  // Eastern-Arabic digit 5\n  \"\\u06F6\": '6',\n  // Eastern-Arabic digit 6\n  \"\\u06F7\": '7',\n  // Eastern-Arabic digit 7\n  \"\\u06F8\": '8',\n  // Eastern-Arabic digit 8\n  \"\\u06F9\": '9' // Eastern-Arabic digit 9\n\n};\nexport function parseDigit(character) {\n  return DIGITS[character];\n}\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\n\nexport default function parseDigits(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n    var digit = parseDigit(character);\n\n    if (digit) {\n      result += digit;\n    }\n  }\n\n  return result;\n}\n//# sourceMappingURL=parseDigits.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { parseDigit } from './helpers/parseDigits.js';\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\n\nexport default function parseIncompletePhoneNumber(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n    result += parsePhoneNumberCharacter(character, result) || '';\n  }\n\n  return result;\n}\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\n\nexport function parsePhoneNumberCharacter(character, prevParsedCharacters) {\n  // Only allow a leading `+`.\n  if (character === '+') {\n    // If this `+` is not the first parsed character\n    // then discard it.\n    if (prevParsedCharacters) {\n      return;\n    }\n\n    return '+';\n  } // Allow digits.\n\n\n  return parseDigit(character);\n}\n//# sourceMappingURL=parseIncompletePhoneNumber.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\nexport default function mergeArrays(a, b) {\n  var merged = a.slice();\n\n  for (var _iterator = _createForOfIteratorHelperLoose(b), _step; !(_step = _iterator()).done;) {\n    var element = _step.value;\n\n    if (a.indexOf(element) < 0) {\n      merged.push(element);\n    }\n  }\n\n  return merged.sort(function (a, b) {\n    return a - b;\n  }); // ES6 version, requires Set polyfill.\n  // let merged = new Set(a)\n  // for (const element of b) {\n  // \tmerged.add(i)\n  // }\n  // return Array.from(merged).sort((a, b) => a - b)\n}\n//# sourceMappingURL=mergeArrays.js.map","import mergeArrays from './mergeArrays.js';\nexport default function checkNumberLength(nationalNumber, metadata) {\n  return checkNumberLengthForType(nationalNumber, undefined, metadata);\n} // Checks whether a number is possible for the country based on its length.\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\n\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\n  var type_info = metadata.type(type); // There should always be \"<possiblePengths/>\" set for every type element.\n  // This is declared in the XML schema.\n  // For size efficiency, where a sub-description (e.g. fixed-line)\n  // has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n  // so we fall back to the \"general description\". Where no numbers of the type\n  // exist at all, there is one possible length (-1) which is guaranteed\n  // not to match the length of any real phone number.\n\n  var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths(); // let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n  // Metadata before version `1.0.18` didn't contain `possible_lengths`.\n\n  if (!possible_lengths) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (type === 'FIXED_LINE_OR_MOBILE') {\n    // No such country in metadata.\n\n    /* istanbul ignore next */\n    if (!metadata.type('FIXED_LINE')) {\n      // The rare case has been encountered where no fixedLine data is available\n      // (true for some non-geographic entities), so we just check mobile.\n      return checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n    }\n\n    var mobile_type = metadata.type('MOBILE');\n\n    if (mobile_type) {\n      // Merge the mobile data in if there was any. \"Concat\" creates a new\n      // array, it doesn't edit possible_lengths in place, so we don't need a copy.\n      // Note that when adding the possible lengths from mobile, we have\n      // to again check they aren't empty since if they are this indicates\n      // they are the same as the general desc and should be obtained from there.\n      possible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths()); // The current list is sorted; we need to merge in the new list and\n      // re-sort (duplicates are okay). Sorting isn't so expensive because\n      // the lists are very small.\n      // if (local_lengths) {\n      // \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n      // } else {\n      // \tlocal_lengths = mobile_type.possibleLengthsLocal()\n      // }\n    }\n  } // If the type doesn't exist then return 'INVALID_LENGTH'.\n  else if (type && !type_info) {\n    return 'INVALID_LENGTH';\n  }\n\n  var actual_length = nationalNumber.length; // In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n  // // This is safe because there is never an overlap beween the possible lengths\n  // // and the local-only lengths; this is checked at build time.\n  // if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n  // {\n  // \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n  // }\n\n  var minimum_length = possible_lengths[0];\n\n  if (minimum_length === actual_length) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (minimum_length > actual_length) {\n    return 'TOO_SHORT';\n  }\n\n  if (possible_lengths[possible_lengths.length - 1] < actual_length) {\n    return 'TOO_LONG';\n  } // We skip the first element since we've already checked it.\n\n\n  return possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}\n//# sourceMappingURL=checkNumberLength.js.map","import Metadata from './metadata.js';\nimport checkNumberLength from './helpers/checkNumberLength.js';\nexport default function isPossiblePhoneNumber(input, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (options.v2) {\n    if (!input.countryCallingCode) {\n      throw new Error('Invalid phone number object passed');\n    }\n\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else {\n    if (!input.phone) {\n      return false;\n    }\n\n    if (input.country) {\n      if (!metadata.hasCountry(input.country)) {\n        throw new Error(\"Unknown country: \".concat(input.country));\n      }\n\n      metadata.country(input.country);\n    } else {\n      if (!input.countryCallingCode) {\n        throw new Error('Invalid phone number object passed');\n      }\n\n      metadata.selectNumberingPlan(input.countryCallingCode);\n    }\n  } // Old metadata (< 1.0.18) had no \"possible length\" data.\n\n\n  if (metadata.possibleLengths()) {\n    return isPossibleNumber(input.phone || input.nationalNumber, metadata);\n  } else {\n    // There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\n    // were missing for \"non-geographical\" numbering plans.\n    // Just assume the number is possible in such cases:\n    // it's unlikely that anyone generated their custom metadata\n    // in that short period of time (one day).\n    // This code can be removed in some future major version update.\n    if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\n      // \"Non-geographic entities\" did't have `possibleLengths`\n      // due to a bug in metadata generation process.\n      return true;\n    } else {\n      throw new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\n    }\n  }\n}\nexport function isPossibleNumber(nationalNumber, metadata) {\n  //, isInternational) {\n  switch (checkNumberLength(nationalNumber, metadata)) {\n    case 'IS_POSSIBLE':\n      return true;\n    // This library ignores \"local-only\" phone numbers (for simplicity).\n    // See the readme for more info on what are \"local-only\" phone numbers.\n    // case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \treturn !isInternational\n\n    default:\n      return false;\n  }\n}\n//# sourceMappingURL=isPossibleNumber_.js.map","function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport isViablePhoneNumber from './isViablePhoneNumber.js'; // https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\nexport function parseRFC3966(text) {\n  var number;\n  var ext; // Replace \"tel:\" with \"tel=\" for parsing convenience.\n\n  text = text.replace(/^tel:/, 'tel=');\n\n  for (var _iterator = _createForOfIteratorHelperLoose(text.split(';')), _step; !(_step = _iterator()).done;) {\n    var part = _step.value;\n\n    var _part$split = part.split('='),\n        _part$split2 = _slicedToArray(_part$split, 2),\n        name = _part$split2[0],\n        value = _part$split2[1];\n\n    switch (name) {\n      case 'tel':\n        number = value;\n        break;\n\n      case 'ext':\n        ext = value;\n        break;\n\n      case 'phone-context':\n        // Only \"country contexts\" are supported.\n        // \"Domain contexts\" are ignored.\n        if (value[0] === '+') {\n          number = value + number;\n        }\n\n        break;\n    }\n  } // If the phone number is not viable, then abort.\n\n\n  if (!isViablePhoneNumber(number)) {\n    return {};\n  }\n\n  var result = {\n    number: number\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\n\nexport function formatRFC3966(_ref) {\n  var number = _ref.number,\n      ext = _ref.ext;\n\n  if (!number) {\n    return '';\n  }\n\n  if (number[0] !== '+') {\n    throw new Error(\"\\\"formatRFC3966()\\\" expects \\\"number\\\" to be in E.164 format.\");\n  }\n\n  return \"tel:\".concat(number).concat(ext ? ';ext=' + ext : '');\n}\n//# sourceMappingURL=RFC3966.js.map","/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\nexport default function matchesEntirely(text, regular_expression) {\n  // If assigning the `''` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  text = text || '';\n  return new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n//# sourceMappingURL=matchesEntirely.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Metadata from '../metadata.js';\nimport matchesEntirely from './matchesEntirely.js';\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL']; // Finds out national phone number type (fixed line, mobile, etc)\n\nexport default function getNumberType(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {}; // When `parse()` returned `{}`\n  // meaning that the phone number is not a valid one.\n\n  if (!input.country) {\n    return;\n  }\n\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode);\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // The following is copy-pasted from the original function:\n  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n  // Is this national number even valid for this country\n\n  if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n    return;\n  } // Is it fixed line number\n\n\n  if (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\n    // Because duplicate regular expressions are removed\n    // to reduce metadata size, if \"mobile\" pattern is \"\"\n    // then it means it was removed due to being a duplicate of the fixed-line pattern.\n    //\n    if (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // `MOBILE` type pattern isn't included if it matched `FIXED_LINE` one.\n    // For example, for \"US\" country.\n    // Old metadata (< `1.0.18`) had a specific \"types\" data structure\n    // that happened to be `undefined` for `MOBILE` in that case.\n    // Newer metadata (>= `1.0.18`) has another data structure that is\n    // not `undefined` for `MOBILE` in that case (it's just an empty array).\n    // So this `if` is just for backwards compatibility with old metadata.\n\n\n    if (!metadata.type('MOBILE')) {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // Check if the number happens to qualify as both fixed line and mobile.\n    // (no such country in the minimal metadata set)\n\n    /* istanbul ignore if */\n\n\n    if (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n\n    return 'FIXED_LINE';\n  }\n\n  for (var _iterator = _createForOfIteratorHelperLoose(NON_FIXED_LINE_PHONE_TYPES), _step; !(_step = _iterator()).done;) {\n    var type = _step.value;\n\n    if (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\n      return type;\n    }\n  }\n}\nexport function isNumberTypeEqualTo(nationalNumber, type, metadata) {\n  type = metadata.type(type);\n\n  if (!type || !type.pattern()) {\n    return false;\n  } // Check if any possible number lengths are present;\n  // if so, we use them to avoid checking\n  // the validation pattern if they don't match.\n  // If they are absent, this means they match\n  // the general description, which we have\n  // already checked before a specific number type.\n\n\n  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n    return false;\n  }\n\n  return matchesEntirely(nationalNumber, type.pattern());\n}\n//# sourceMappingURL=getNumberType.js.map","import Metadata from './metadata.js';\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport getNumberType from './helpers/getNumberType.js';\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\n\nexport default function isValidNumber(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata); // This is just to support `isValidNumber({})`\n  // for cases when `parseNumber()` returns `{}`.\n\n  if (!input.country) {\n    return false;\n  }\n\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode); // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  } // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n\n\n  var national_number = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(national_number, metadata.nationalNumberPattern());\n}\n//# sourceMappingURL=validate_.js.map","import { VALID_PUNCTUATION } from '../constants.js'; // Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\n\nexport default function applyInternationalSeparatorStyle(formattedNumber) {\n  return formattedNumber.replace(new RegExp(\"[\".concat(VALID_PUNCTUATION, \"]+\"), 'g'), ' ').trim();\n}\n//# sourceMappingURL=applyInternationalSeparatorStyle.js.map","import applyInternationalSeparatorStyle from './applyInternationalSeparatorStyle.js'; // This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly. Therefore, we use `\\d`, so that the first\n// group actually used in the pattern will be matched.\n\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\nexport default function formatNationalNumberUsingFormat(number, format, _ref) {\n  var useInternationalFormat = _ref.useInternationalFormat,\n      withNationalPrefix = _ref.withNationalPrefix,\n      carrierCode = _ref.carrierCode,\n      metadata = _ref.metadata;\n  var formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalFormat ? format.internationalFormat() : // This library doesn't use `domestic_carrier_code_formatting_rule`,\n  // because that one is only used when formatting phone numbers\n  // for dialing from a mobile phone, and this is not a dialing library.\n  // carrierCode && format.domesticCarrierCodeFormattingRule()\n  // \t// First, replace the $CC in the formatting rule with the desired carrier code.\n  // \t// Then, replace the $FG in the formatting rule with the first group\n  // \t// and the carrier code combined in the appropriate way.\n  // \t? format.format().replace(FIRST_GROUP_PATTERN, format.domesticCarrierCodeFormattingRule().replace('$CC', carrierCode))\n  // \t: (\n  // \t\twithNationalPrefix && format.nationalPrefixFormattingRule()\n  // \t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\n  // \t\t\t: format.format()\n  // \t)\n  withNationalPrefix && format.nationalPrefixFormattingRule() ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\n  if (useInternationalFormat) {\n    return applyInternationalSeparatorStyle(formattedNumber);\n  }\n\n  return formattedNumber;\n}\n//# sourceMappingURL=formatNationalNumberUsingFormat.js.map","import Metadata from '../metadata.js';\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\n\nvar SINGLE_IDD_PREFIX_REG_EXP = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/; // For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\n\nexport default function getIddPrefix(country, callingCode, metadata) {\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n\n  if (countryMetadata.defaultIDDPrefix()) {\n    return countryMetadata.defaultIDDPrefix();\n  }\n\n  if (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {\n    return countryMetadata.IDDPrefix();\n  }\n}\n//# sourceMappingURL=getIddPrefix.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js';\nimport Metadata, { getCountryCallingCode } from './metadata.js';\nimport getIddPrefix from './helpers/getIddPrefix.js';\nimport { formatRFC3966 } from './helpers/RFC3966.js';\nvar DEFAULT_OPTIONS = {\n  formatExtension: function formatExtension(formattedNumber, extension, metadata) {\n    return \"\".concat(formattedNumber).concat(metadata.ext()).concat(extension);\n  }\n}; // Formats a phone number\n//\n// Example use cases:\n//\n// ```js\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n// formatNumber('+78005553535', 'NATIONAL')\n// formatNumber('+78005553535', 'NATIONAL', metadata)\n// ```\n//\n\nexport default function formatNumber(input, format, options, metadata) {\n  // Apply default options.\n  if (options) {\n    options = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n  } else {\n    options = DEFAULT_OPTIONS;\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (input.country && input.country !== '001') {\n    // Validate `input.country`.\n    if (!metadata.hasCountry(input.country)) {\n      throw new Error(\"Unknown country: \".concat(input.country));\n    }\n\n    metadata.country(input.country);\n  } else if (input.countryCallingCode) {\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else return input.phone || '';\n\n  var countryCallingCode = metadata.countryCallingCode();\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // This variable should have been declared inside `case`s\n  // but Babel has a bug and it says \"duplicate variable declaration\".\n\n  var number;\n\n  switch (format) {\n    case 'NATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '';\n      }\n\n      number = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'INTERNATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return \"+\".concat(countryCallingCode);\n      }\n\n      number = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options);\n      number = \"+\".concat(countryCallingCode, \" \").concat(number);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'E.164':\n      // `E.164` doesn't define \"phone number extensions\".\n      return \"+\".concat(countryCallingCode).concat(nationalNumber);\n\n    case 'RFC3966':\n      return formatRFC3966({\n        number: \"+\".concat(countryCallingCode).concat(nationalNumber),\n        ext: input.ext\n      });\n    // For reference, here's Google's IDD formatter:\n    // https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\n    // Not saying that this IDD formatter replicates it 1:1, but it seems to work.\n    // Who would even need to format phone numbers in IDD format anyway?\n\n    case 'IDD':\n      if (!options.fromCountry) {\n        return; // throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n      }\n\n      var formattedNumber = formatIDD(nationalNumber, input.carrierCode, countryCallingCode, options.fromCountry, metadata);\n      return addExtension(formattedNumber, input.ext, metadata, options.formatExtension);\n\n    default:\n      throw new Error(\"Unknown \\\"format\\\" argument passed to \\\"formatNumber()\\\": \\\"\".concat(format, \"\\\"\"));\n  }\n}\n\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\n  var format = chooseFormatForNumber(metadata.formats(), number);\n\n  if (!format) {\n    return number;\n  }\n\n  return formatNationalNumberUsingFormat(number, format, {\n    useInternationalFormat: formatAs === 'INTERNATIONAL',\n    withNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options && options.nationalPrefix === false ? false : true,\n    carrierCode: carrierCode,\n    metadata: metadata\n  });\n}\n\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\n  for (var _iterator = _createForOfIteratorHelperLoose(availableFormats), _step; !(_step = _iterator()).done;) {\n    var format = _step.value;\n\n    // Validate leading digits.\n    // The test case for \"else path\" could be found by searching for\n    // \"format.leadingDigitsPatterns().length === 0\".\n    if (format.leadingDigitsPatterns().length > 0) {\n      // The last leading_digits_pattern is used here, as it is the most detailed\n      var lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]; // If leading digits don't match then move on to the next phone number format\n\n      if (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\n        continue;\n      }\n    } // Check that the national number matches the phone number format regular expression\n\n\n    if (matchesEntirely(nationalNnumber, format.pattern())) {\n      return format;\n    }\n  }\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n  return ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nfunction formatIDD(nationalNumber, carrierCode, countryCallingCode, fromCountry, metadata) {\n  var fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata); // When calling within the same country calling code.\n\n  if (fromCountryCallingCode === countryCallingCode) {\n    var formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata); // For NANPA regions, return the national format for these regions\n    // but prefix it with the country calling code.\n\n    if (countryCallingCode === '1') {\n      return countryCallingCode + ' ' + formattedNumber;\n    } // If regions share a country calling code, the country calling code need\n    // not be dialled. This also applies when dialling within a region, so this\n    // if clause covers both these cases. Technically this is the case for\n    // dialling from La Reunion to other overseas departments of France (French\n    // Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n    // this edge case for now and for those cases return the version including\n    // country calling code. Details here:\n    // http://www.petitfute.com/voyage/225-info-pratiques-reunion\n    //\n\n\n    return formattedNumber;\n  }\n\n  var iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata);\n\n  if (iddPrefix) {\n    return \"\".concat(iddPrefix, \" \").concat(countryCallingCode, \" \").concat(formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata));\n  }\n}\n//# sourceMappingURL=format_.js.map","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport Metadata from './metadata.js';\nimport isPossibleNumber from './isPossibleNumber_.js';\nimport isValidNumber from './validate_.js';\nimport isValidNumberForRegion from './isValidNumberForRegion_.js';\nimport getNumberType from './helpers/getNumberType.js';\nimport formatNumber from './format_.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar PhoneNumber = /*#__PURE__*/function () {\n  function PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n    _classCallCheck(this, PhoneNumber);\n\n    if (!countryCallingCode) {\n      throw new TypeError('`country` or `countryCallingCode` not passed');\n    }\n\n    if (!nationalNumber) {\n      throw new TypeError('`nationalNumber` not passed');\n    }\n\n    if (!metadata) {\n      throw new TypeError('`metadata` not passed');\n    }\n\n    var _metadata = new Metadata(metadata); // If country code is passed then derive `countryCallingCode` from it.\n    // Also store the country code as `.country`.\n\n\n    if (isCountryCode(countryCallingCode)) {\n      this.country = countryCallingCode;\n\n      _metadata.country(countryCallingCode);\n\n      countryCallingCode = _metadata.countryCallingCode();\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (_metadata.isNonGeographicCallingCode(countryCallingCode)) {\n          this.country = '001';\n        }\n      }\n    }\n\n    this.countryCallingCode = countryCallingCode;\n    this.nationalNumber = nationalNumber;\n    this.number = '+' + this.countryCallingCode + this.nationalNumber;\n    this.metadata = metadata;\n  }\n\n  _createClass(PhoneNumber, [{\n    key: \"setExt\",\n    value: function setExt(ext) {\n      this.ext = ext;\n    }\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      return isPossibleNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return isValidNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isNonGeographic\",\n    value: function isNonGeographic() {\n      var metadata = new Metadata(this.metadata);\n      return metadata.isNonGeographicCallingCode(this.countryCallingCode);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(phoneNumber) {\n      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;\n    } // // Is just an alias for `this.isValid() && this.country === country`.\n    // // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n    // isValidForRegion(country) {\n    // \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n    // }\n\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return getNumberType(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"format\",\n    value: function format(_format, options) {\n      return formatNumber(this, _format, options ? _objectSpread(_objectSpread({}, options), {}, {\n        v2: true\n      }) : {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"formatNational\",\n    value: function formatNational(options) {\n      return this.format('NATIONAL', options);\n    }\n  }, {\n    key: \"formatInternational\",\n    value: function formatInternational(options) {\n      return this.format('INTERNATIONAL', options);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI(options) {\n      return this.format('RFC3966', options);\n    }\n  }]);\n\n  return PhoneNumber;\n}();\n\nexport { PhoneNumber as default };\n\nvar isCountryCode = function isCountryCode(value) {\n  return /^[A-Z]{2}$/.test(value);\n};\n//# sourceMappingURL=PhoneNumber.js.map","import Metadata from '../metadata.js';\nimport { VALID_DIGITS } from '../constants.js';\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\nexport default function stripIddPrefix(number, country, callingCode, metadata) {\n  if (!country) {\n    return;\n  } // Check if the number is IDD-prefixed.\n\n\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n  if (number.search(IDDPrefixPattern) !== 0) {\n    return;\n  } // Strip IDD prefix.\n\n\n  number = number.slice(number.match(IDDPrefixPattern)[0].length); // If there're any digits after an IDD prefix,\n  // then those digits are a country calling code.\n  // Since no country code starts with a `0`,\n  // the code below validates that the next digit (if present) is not `0`.\n\n  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n\n  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n    if (matchedGroups[1] === '0') {\n      return;\n    }\n  }\n\n  return number;\n}\n//# sourceMappingURL=stripIddPrefix.js.map","/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, nationalPrefix: string? carrierCode: string? }`. Even if a national prefix was extracted, it's not necessarily present in the returned object, so don't rely on its presence in the returned object in order to find out whether a national prefix has been extracted or not.\r\n */\nexport default function extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {\n  if (number && metadata.numberingPlan.nationalPrefixForParsing()) {\n    // See METADATA.md for the description of\n    // `national_prefix_for_parsing` and `national_prefix_transform_rule`.\n    // Attempt to parse the first digits as a national prefix.\n    var prefixPattern = new RegExp('^(?:' + metadata.numberingPlan.nationalPrefixForParsing() + ')');\n    var prefixMatch = prefixPattern.exec(number);\n\n    if (prefixMatch) {\n      var nationalNumber;\n      var carrierCode; // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\n      // If a `national_prefix_for_parsing` has any \"capturing groups\"\n      // then it means that the national (significant) number is equal to\n      // those \"capturing groups\" transformed via `national_prefix_transform_rule`,\n      // and nothing could be said about the actual national prefix:\n      // what is it and was it even there.\n      // If a `national_prefix_for_parsing` doesn't have any \"capturing groups\",\n      // then everything it matches is a national prefix.\n      // To determine whether `national_prefix_for_parsing` matched any\n      // \"capturing groups\", the value of the result of calling `.exec()`\n      // is looked at, and if it has non-undefined values where there're\n      // \"capturing groups\" in the regular expression, then it means\n      // that \"capturing groups\" have been matched.\n      // It's not possible to tell whether there'll be any \"capturing gropus\"\n      // before the matching process, because a `national_prefix_for_parsing`\n      // could exhibit both behaviors.\n\n      var capturedGroupsCount = prefixMatch.length - 1;\n      var hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount];\n\n      if (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {\n        nationalNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule()); // If there's more than one captured group,\n        // then carrier code is the second one.\n\n        if (capturedGroupsCount > 1) {\n          carrierCode = prefixMatch[1];\n        }\n      } // If there're no \"capturing groups\",\n      // or if there're \"capturing groups\" but no\n      // `national_prefix_transform_rule`,\n      // then just strip the national prefix from the number,\n      // and possibly a carrier code.\n      // Seems like there could be more.\n      else {\n        // `prefixBeforeNationalNumber` is the whole substring matched by\n        // the `national_prefix_for_parsing` regular expression.\n        // There seem to be no guarantees that it's just a national prefix.\n        // For example, if there's a carrier code, it's gonna be a\n        // part of `prefixBeforeNationalNumber` too.\n        var prefixBeforeNationalNumber = prefixMatch[0];\n        nationalNumber = number.slice(prefixBeforeNationalNumber.length); // If there's at least one captured group,\n        // then carrier code is the first one.\n\n        if (hasCapturedGroups) {\n          carrierCode = prefixMatch[1];\n        }\n      } // Tries to guess whether a national prefix was present in the input.\n      // This is not something copy-pasted from Google's library:\n      // they don't seem to have an equivalent for that.\n      // So this isn't an \"officially approved\" way of doing something like that.\n      // But since there seems no other existing method, this library uses it.\n\n\n      var nationalPrefix;\n\n      if (hasCapturedGroups) {\n        var possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1]);\n        var possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup); // Example: an Argentinian (AR) phone number `0111523456789`.\n        // `prefixMatch[0]` is `01115`, and `$1` is `11`,\n        // and the rest of the phone number is `23456789`.\n        // The national number is transformed via `9$1` to `91123456789`.\n        // National prefix `0` is detected being present at the start.\n        // if (possibleNationalPrefix.indexOf(metadata.numberingPlan.nationalPrefix()) === 0) {\n\n        if (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {\n          nationalPrefix = metadata.numberingPlan.nationalPrefix();\n        }\n      } else {\n        nationalPrefix = prefixMatch[0];\n      }\n\n      return {\n        nationalNumber: nationalNumber,\n        nationalPrefix: nationalPrefix,\n        carrierCode: carrierCode\n      };\n    }\n  }\n\n  return {\n    nationalNumber: number\n  };\n}\n//# sourceMappingURL=extractNationalNumberFromPossiblyIncompleteNumber.js.map","import extractNationalNumberFromPossiblyIncompleteNumber from './extractNationalNumberFromPossiblyIncompleteNumber.js';\nimport matchesEntirely from './matchesEntirely.js';\nimport checkNumberLength from './checkNumberLength.js';\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\n\nexport default function extractNationalNumber(number, metadata) {\n  // Parsing national prefixes and carrier codes\n  // is only required for local phone numbers\n  // but some people don't understand that\n  // and sometimes write international phone numbers\n  // with national prefixes (or maybe even carrier codes).\n  // http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n  // Google's original library forgives such mistakes\n  // and so does this library, because it has been requested:\n  // https://github.com/catamphetamine/libphonenumber-js/issues/127\n  var _extractNationalNumbe = extractNationalNumberFromPossiblyIncompleteNumber(number, metadata),\n      carrierCode = _extractNationalNumbe.carrierCode,\n      nationalNumber = _extractNationalNumbe.nationalNumber;\n\n  if (nationalNumber !== number) {\n    if (!shouldHaveExtractedNationalPrefix(number, nationalNumber, metadata)) {\n      // Don't strip the national prefix.\n      return {\n        nationalNumber: number\n      };\n    } // Check the national (significant) number length after extracting national prefix and carrier code.\n    // Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature.\n\n\n    if (metadata.possibleLengths()) {\n      // The number remaining after stripping the national prefix and carrier code\n      // should be long enough to have a possible length for the country.\n      // Otherwise, don't strip the national prefix and carrier code,\n      // since the original number could be a valid number.\n      // This check has been copy-pasted \"as is\" from Google's original library:\n      // https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\n      // It doesn't check for the \"possibility\" of the original `number`.\n      // I guess it's fine not checking that one. It works as is anyway.\n      if (!isPossibleIncompleteNationalNumber(nationalNumber, metadata)) {\n        // Don't strip the national prefix.\n        return {\n          nationalNumber: number\n        };\n      }\n    }\n  }\n\n  return {\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n} // In some countries, the same digit could be a national prefix\n// or a leading digit of a valid phone number.\n// For example, in Russia, national prefix is `8`,\n// and also `800 555 35 35` is a valid number\n// in which `8` is not a national prefix, but the first digit\n// of a national (significant) number.\n// Same's with Belarus:\n// `82004910060` is a valid national (significant) number,\n// but `2004910060` is not.\n// To support such cases (to prevent the code from always stripping\n// national prefix), a condition is imposed: a national prefix\n// is not extracted when the original number is \"viable\" and the\n// resultant number is not, a \"viable\" national number being the one\n// that matches `national_number_pattern`.\n\nfunction shouldHaveExtractedNationalPrefix(nationalNumberBefore, nationalNumberAfter, metadata) {\n  // The equivalent in Google's code is:\n  // https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L2969-L3004\n  if (matchesEntirely(nationalNumberBefore, metadata.nationalNumberPattern()) && !matchesEntirely(nationalNumberAfter, metadata.nationalNumberPattern())) {\n    return false;\n  } // This \"is possible\" national number (length) check has been commented out\n  // because it's superceded by the (effectively) same check done in the\n  // `extractNationalNumber()` function after it calls `shouldHaveExtractedNationalPrefix()`.\n  // In other words, why run the same check twice if it could only be run once.\n  // // Check the national (significant) number length after extracting national prefix and carrier code.\n  // // Fixes a minor \"weird behavior\" bug: https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/57\n  // // (Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature).\n  // if (metadata.possibleLengths()) {\n  // \tif (isPossibleIncompleteNationalNumber(nationalNumberBefore, metadata) &&\n  // \t\t!isPossibleIncompleteNationalNumber(nationalNumberAfter, metadata)) {\n  // \t\treturn false\n  // \t}\n  // }\n\n\n  return true;\n}\n\nfunction isPossibleIncompleteNationalNumber(nationalNumber, metadata) {\n  switch (checkNumberLength(nationalNumber, metadata)) {\n    case 'TOO_SHORT':\n    case 'INVALID_LENGTH':\n      // This library ignores \"local-only\" phone numbers (for simplicity).\n      // See the readme for more info on what are \"local-only\" phone numbers.\n      // case 'IS_POSSIBLE_LOCAL_ONLY':\n      return false;\n\n    default:\n      return true;\n  }\n}\n//# sourceMappingURL=extractNationalNumber.js.map","import Metadata from '../metadata.js';\nimport matchesEntirely from './matchesEntirely.js';\nimport extractNationalNumber from './extractNationalNumber.js';\nimport checkNumberLength from './checkNumberLength.js';\nimport getCountryCallingCode from '../getCountryCallingCode.js';\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\n\nexport default function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata) {\n  var countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode;\n\n  if (number.indexOf(countryCallingCode) === 0) {\n    metadata = new Metadata(metadata);\n    metadata.selectNumberingPlan(country, callingCode);\n    var possibleShorterNumber = number.slice(countryCallingCode.length);\n\n    var _extractNationalNumbe = extractNationalNumber(possibleShorterNumber, metadata),\n        possibleShorterNationalNumber = _extractNationalNumbe.nationalNumber;\n\n    var _extractNationalNumbe2 = extractNationalNumber(number, metadata),\n        nationalNumber = _extractNationalNumbe2.nationalNumber; // If the number was not valid before but is valid now,\n    // or if it was too long before, we consider the number\n    // with the country calling code stripped to be a better result\n    // and keep that instead.\n    // For example, in Germany (+49), `49` is a valid area code,\n    // so if a number starts with `49`, it could be both a valid\n    // national German number or an international number without\n    // a leading `+`.\n\n\n    if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) && matchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern()) || checkNumberLength(nationalNumber, metadata) === 'TOO_LONG') {\n      return {\n        countryCallingCode: countryCallingCode,\n        number: possibleShorterNumber\n      };\n    }\n  }\n\n  return {\n    number: number\n  };\n}\n//# sourceMappingURL=extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js.map","import stripIddPrefix from './stripIddPrefix.js';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js';\nimport Metadata from '../metadata.js';\nimport { MAX_LENGTH_COUNTRY_CODE } from '../constants.js';\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\n\nexport default function extractCountryCallingCode(number, country, callingCode, metadata) {\n  if (!number) {\n    return {};\n  } // If this is not an international phone number,\n  // then either extract an \"IDD\" prefix, or extract a\n  // country calling code from a number by autocorrecting it\n  // by prepending a leading `+` in cases when it starts\n  // with the country calling code.\n  // https://wikitravel.org/en/International_dialling_prefix\n  // https://github.com/catamphetamine/libphonenumber-js/issues/376\n\n\n  if (number[0] !== '+') {\n    // Convert an \"out-of-country\" dialing phone number\n    // to a proper international phone number.\n    var numberWithoutIDD = stripIddPrefix(number, country, callingCode, metadata); // If an IDD prefix was stripped then\n    // convert the number to international one\n    // for subsequent parsing.\n\n    if (numberWithoutIDD && numberWithoutIDD !== number) {\n      number = '+' + numberWithoutIDD;\n    } else {\n      // Check to see if the number starts with the country calling code\n      // for the default country. If so, we remove the country calling code,\n      // and do some checks on the validity of the number before and after.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      if (country || callingCode) {\n        var _extractCountryCallin = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata),\n            countryCallingCode = _extractCountryCallin.countryCallingCode,\n            shorterNumber = _extractCountryCallin.number;\n\n        if (countryCallingCode) {\n          return {\n            countryCallingCode: countryCallingCode,\n            number: shorterNumber\n          };\n        }\n      }\n\n      return {\n        number: number\n      };\n    }\n  } // Fast abortion: country codes do not begin with a '0'\n\n\n  if (number[1] === '0') {\n    return {};\n  }\n\n  metadata = new Metadata(metadata); // The thing with country phone codes\n  // is that they are orthogonal to each other\n  // i.e. there's no such country phone code A\n  // for which country phone code B exists\n  // where B starts with A.\n  // Therefore, while scanning digits,\n  // if a valid country code is found,\n  // that means that it is the country code.\n  //\n\n  var i = 2;\n\n  while (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n    var _countryCallingCode = number.slice(1, i);\n\n    if (metadata.hasCallingCode(_countryCallingCode)) {\n      metadata.selectNumberingPlan(_countryCallingCode);\n      return {\n        countryCallingCode: _countryCallingCode,\n        number: number.slice(i)\n      };\n    }\n\n    i++;\n  }\n\n  return {};\n}\n//# sourceMappingURL=extractCountryCallingCode.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Metadata from '../metadata.js';\nimport getNumberType from './getNumberType.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nexport default function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {\n  /* istanbul ignore if */\n  if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n    if (metadata.isNonGeographicCallingCode(callingCode)) {\n      return '001';\n    }\n  } // Is always non-empty, because `callingCode` is always valid\n\n\n  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);\n\n  if (!possibleCountries) {\n    return;\n  } // If there's just one country corresponding to the country code,\n  // then just return it, without further phone number digits validation.\n\n\n  if (possibleCountries.length === 1) {\n    return possibleCountries[0];\n  }\n\n  return selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata.metadata);\n}\n\nfunction selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata) {\n  // Re-create `metadata` because it will be selecting a `country`.\n  metadata = new Metadata(metadata);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(possibleCountries), _step; !(_step = _iterator()).done;) {\n    var country = _step.value;\n    metadata.country(country); // Leading digits check would be the simplest and fastest one.\n    // Leading digits patterns are only defined for about 20% of all countries.\n    // https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\n    // Matching \"leading digits\" is a sufficient but not necessary condition.\n\n    if (metadata.leadingDigits()) {\n      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n        return country;\n      }\n    } // Else perform full validation with all of those\n    // fixed-line/mobile/etc regular expressions.\n    else if (getNumberType({\n      phone: nationalPhoneNumber,\n      country: country\n    }, undefined, metadata.metadata)) {\n      return country;\n    }\n  }\n}\n//# sourceMappingURL=getCountryByCallingCode.js.map","// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport { VALID_DIGITS, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN } from './constants.js';\nimport ParseError from './ParseError.js';\nimport Metadata from './metadata.js';\nimport isViablePhoneNumber, { isViablePhoneNumberStart } from './helpers/isViablePhoneNumber.js';\nimport extractExtension from './helpers/extension/extractExtension.js';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber.js';\nimport getCountryCallingCode from './getCountryCallingCode.js';\nimport { isPossibleNumber } from './isPossibleNumber_.js';\nimport { parseRFC3966 } from './helpers/RFC3966.js';\nimport PhoneNumber from './PhoneNumber.js';\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode.js';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js';\nimport extractNationalNumber from './helpers/extractNationalNumber.js';\nimport stripIddPrefix from './helpers/stripIddPrefix.js';\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode.js'; // We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\n\nvar MAX_INPUT_STRING_LENGTH = 250; // This consists of the plus symbol, digits, and arabic-indic digits.\n\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']'); // Regular expression of trailing characters that we want to remove.\n// A trailing `#` is sometimes used when writing phone numbers with extensions in US.\n// Example: \"+1 (645) 123 1234-910#\" number has extension \"910\".\n\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + '#' + ']+$');\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false; // Examples:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\n\nexport default function parse(text, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata); // Validate `defaultCountry`.\n\n  if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    throw new Error(\"Unknown country: \".concat(options.defaultCountry));\n  } // Parse the phone number.\n\n\n  var _parseInput = parseInput(text, options.v2, options.extract),\n      formattedPhoneNumber = _parseInput.number,\n      ext = _parseInput.ext,\n      error = _parseInput.error; // If the phone number is not viable then return nothing.\n\n\n  if (!formattedPhoneNumber) {\n    if (options.v2) {\n      if (error === 'TOO_SHORT') {\n        throw new ParseError('TOO_SHORT');\n      }\n\n      throw new ParseError('NOT_A_NUMBER');\n    }\n\n    return {};\n  }\n\n  var _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, options.defaultCallingCode, metadata),\n      country = _parsePhoneNumber.country,\n      nationalNumber = _parsePhoneNumber.nationalNumber,\n      countryCallingCode = _parsePhoneNumber.countryCallingCode,\n      carrierCode = _parsePhoneNumber.carrierCode;\n\n  if (!metadata.hasSelectedNumberingPlan()) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    return {};\n  } // Validate national (significant) number length.\n\n\n  if (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n    // Won't throw here because the regexp already demands length > 1.\n\n    /* istanbul ignore if */\n    if (options.v2) {\n      throw new ParseError('TOO_SHORT');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  } // Validate national (significant) number length.\n  //\n  // A sidenote:\n  //\n  // They say that sometimes national (significant) numbers\n  // can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n  // https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n  // Such numbers will just be discarded.\n  //\n\n\n  if (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n    if (options.v2) {\n      throw new ParseError('TOO_LONG');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  }\n\n  if (options.v2) {\n    var phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n\n    if (country) {\n      phoneNumber.country = country;\n    }\n\n    if (carrierCode) {\n      phoneNumber.carrierCode = carrierCode;\n    }\n\n    if (ext) {\n      phoneNumber.ext = ext;\n    }\n\n    return phoneNumber;\n  } // Check if national phone number pattern matches the number.\n  // National number pattern is different for each country,\n  // even for those ones which are part of the \"NANPA\" group.\n\n\n  var valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ? matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) : false;\n\n  if (!options.extended) {\n    return valid ? result(country, nationalNumber, ext) : {};\n  } // isInternational: countryCallingCode !== undefined\n\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    carrierCode: carrierCode,\n    valid: valid,\n    possible: valid ? true : options.extended === true && metadata.possibleLengths() && isPossibleNumber(nationalNumber, metadata) ? true : false,\n    phone: nationalNumber,\n    ext: ext\n  };\n}\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} [extract] — If `false`, then will parse the entire `text` as a phone number.\r\n * @param  {boolean} [throwOnError] — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\n\nfunction extractFormattedPhoneNumber(text, extract, throwOnError) {\n  if (!text) {\n    return;\n  }\n\n  if (text.length > MAX_INPUT_STRING_LENGTH) {\n    if (throwOnError) {\n      throw new ParseError('TOO_LONG');\n    }\n\n    return;\n  }\n\n  if (extract === false) {\n    return text;\n  } // Attempt to extract a possible number from the string passed in\n\n\n  var startsAt = text.search(PHONE_NUMBER_START_PATTERN);\n\n  if (startsAt < 0) {\n    return;\n  }\n\n  return text // Trim everything to the left of the phone number\n  .slice(startsAt) // Remove trailing non-numerical characters\n  .replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n/**\r\n * @param  {string} text - Input.\r\n * @param  {boolean} v2 - Legacy API functions don't pass `v2: true` flag.\r\n * @param  {boolean} [extract] - Whether to extract a phone number from `text`, or attempt to parse the entire text as a phone number.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\n\nfunction parseInput(text, v2, extract) {\n  // Parse RFC 3966 phone number URI.\n  if (text && text.indexOf('tel:') === 0) {\n    return parseRFC3966(text);\n  }\n\n  var number = extractFormattedPhoneNumber(text, extract, v2); // If the phone number is not viable, then abort.\n\n  if (!number) {\n    return {};\n  }\n\n  if (!isViablePhoneNumber(number)) {\n    if (isViablePhoneNumberStart(number)) {\n      return {\n        error: 'TOO_SHORT'\n      };\n    }\n\n    return {};\n  } // Attempt to parse extension first, since it doesn't require region-specific\n  // data and we want to have the non-normalised number here.\n\n\n  var withExtensionStripped = extractExtension(number);\n\n  if (withExtensionStripped.ext) {\n    return withExtensionStripped;\n  }\n\n  return {\n    number: number\n  };\n}\n/**\r\n * Creates `parse()` result object.\r\n */\n\n\nfunction result(country, nationalNumber, ext) {\n  var result = {\n    country: country,\n    phone: nationalNumber\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\n\n\nfunction parsePhoneNumber(formattedPhoneNumber, defaultCountry, defaultCallingCode, metadata) {\n  // Extract calling code from phone number.\n  var _extractCountryCallin = extractCountryCallingCode(parseIncompletePhoneNumber(formattedPhoneNumber), defaultCountry, defaultCallingCode, metadata.metadata),\n      countryCallingCode = _extractCountryCallin.countryCallingCode,\n      number = _extractCountryCallin.number; // Choose a country by `countryCallingCode`.\n\n\n  var country;\n\n  if (countryCallingCode) {\n    metadata.selectNumberingPlan(countryCallingCode);\n  } // If `formattedPhoneNumber` is in \"national\" format\n  // then `number` is defined and `countryCallingCode` isn't.\n  else if (number && (defaultCountry || defaultCallingCode)) {\n    metadata.selectNumberingPlan(defaultCountry, defaultCallingCode);\n\n    if (defaultCountry) {\n      country = defaultCountry;\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n          country = '001';\n        }\n      }\n    }\n\n    countryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata);\n  } else return {};\n\n  if (!number) {\n    return {\n      countryCallingCode: countryCallingCode\n    };\n  }\n\n  var _extractNationalNumbe = extractNationalNumber(parseIncompletePhoneNumber(number), metadata),\n      nationalNumber = _extractNationalNumbe.nationalNumber,\n      carrierCode = _extractNationalNumbe.carrierCode; // Sometimes there are several countries\n  // corresponding to the same country phone code\n  // (e.g. NANPA countries all having `1` country phone code).\n  // Therefore, to reliably determine the exact country,\n  // national (significant) number should have been parsed first.\n  //\n  // When `metadata.json` is generated, all \"ambiguous\" country phone codes\n  // get their countries populated with the full set of\n  // \"phone number type\" regular expressions.\n  //\n\n\n  var exactCountry = getCountryByCallingCode(countryCallingCode, nationalNumber, metadata);\n\n  if (exactCountry) {\n    country = exactCountry;\n    /* istanbul ignore if */\n\n    if (exactCountry === '001') {// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\n      // If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\n      // then remove the \"istanbul ignore if\".\n    } else {\n      metadata.country(country);\n    }\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n}\n//# sourceMappingURL=parse_.js.map","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport parseNumber from './parse_.js';\nexport default function parsePhoneNumber(text, options, metadata) {\n  return parseNumber(text, _objectSpread(_objectSpread({}, options), {}, {\n    v2: true\n  }), metadata);\n}\n//# sourceMappingURL=parsePhoneNumber_.js.map","function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport parsePhoneNumber_ from './parsePhoneNumber_.js';\nexport default function parsePhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return parsePhoneNumber_(text, options, metadata);\n}\nexport function normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n      arg_1 = _Array$prototype$slic2[0],\n      arg_2 = _Array$prototype$slic2[1],\n      arg_3 = _Array$prototype$slic2[2],\n      arg_4 = _Array$prototype$slic2[3];\n\n  var text;\n  var options;\n  var metadata; // If the phone number is passed as a string.\n  // `parsePhoneNumber('88005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    text = arg_1;\n  } else throw new TypeError('A text for parsing must be a string.'); // If \"default country\" argument is being passed then move it to `options`.\n  // `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\n\n  if (!arg_2 || typeof arg_2 === 'string') {\n    if (arg_4) {\n      options = arg_3;\n      metadata = arg_4;\n    } else {\n      options = undefined;\n      metadata = arg_3;\n    }\n\n    if (arg_2) {\n      options = _objectSpread({\n        defaultCountry: arg_2\n      }, options);\n    }\n  } // `defaultCountry` is not passed.\n  // Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n  else if (isObject(arg_2)) {\n    if (arg_3) {\n      options = arg_2;\n      metadata = arg_3;\n    } else {\n      metadata = arg_2;\n    }\n  } else throw new Error(\"Invalid second argument: \".concat(arg_2));\n\n  return {\n    text: text,\n    options: options,\n    metadata: metadata\n  };\n} // Otherwise istanbul would show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar isObject = function isObject(_) {\n  return _typeof(_) === 'object';\n};\n//# sourceMappingURL=parsePhoneNumber.js.map","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport parsePhoneNumber from './parsePhoneNumber_.js';\nimport ParseError from './ParseError.js';\nimport { isSupportedCountry } from './metadata.js';\nexport default function parsePhoneNumberFromString(text, options, metadata) {\n  // Validate `defaultCountry`.\n  if (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\n    options = _objectSpread(_objectSpread({}, options), {}, {\n      defaultCountry: undefined\n    });\n  } // Parse phone number.\n\n\n  try {\n    return parsePhoneNumber(text, options, metadata);\n  } catch (error) {\n    /* istanbul ignore else */\n    if (error instanceof ParseError) {//\n    } else {\n      throw error;\n    }\n  }\n}\n//# sourceMappingURL=parsePhoneNumberFromString_.js.map","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { normalizeArguments } from './parsePhoneNumber.js';\nimport parsePhoneNumberFromString from './parsePhoneNumberFromString_.js';\nexport default function isValidPhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  options = _objectSpread(_objectSpread({}, options), {}, {\n    extract: false\n  });\n  var phoneNumber = parsePhoneNumberFromString(text, options, metadata);\n  return phoneNumber && phoneNumber.isValid() || false;\n}\n//# sourceMappingURL=isValidPhoneNumber.js.map","function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// https://medium.com/dsinjs/implementing-lru-cache-in-javascript-94ba6755cda9\nvar Node = /*#__PURE__*/_createClass(function Node(key, value) {\n  var next = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var prev = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  _classCallCheck(this, Node);\n\n  this.key = key;\n  this.value = value;\n  this.next = next;\n  this.prev = prev;\n});\n\nvar LRUCache = /*#__PURE__*/function () {\n  //set default limit of 10 if limit is not passed.\n  function LRUCache() {\n    var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n\n    _classCallCheck(this, LRUCache);\n\n    this.size = 0;\n    this.limit = limit;\n    this.head = null;\n    this.tail = null;\n    this.cache = {};\n  } // Write Node to head of LinkedList\n  // update cache with Node key and Node reference\n\n\n  _createClass(LRUCache, [{\n    key: \"put\",\n    value: function put(key, value) {\n      this.ensureLimit();\n\n      if (!this.head) {\n        this.head = this.tail = new Node(key, value);\n      } else {\n        var node = new Node(key, value, this.head);\n        this.head.prev = node;\n        this.head = node;\n      } //Update the cache map\n\n\n      this.cache[key] = this.head;\n      this.size++;\n    } // Read from cache map and make that node as new Head of LinkedList\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      if (this.cache[key]) {\n        var value = this.cache[key].value; // node removed from it's position and cache\n\n        this.remove(key); // write node again to the head of LinkedList to make it most recently used\n\n        this.put(key, value);\n        return value;\n      }\n\n      console.log(\"Item not available in cache for key \".concat(key));\n    }\n  }, {\n    key: \"ensureLimit\",\n    value: function ensureLimit() {\n      if (this.size === this.limit) {\n        this.remove(this.tail.key);\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(key) {\n      var node = this.cache[key];\n\n      if (node.prev !== null) {\n        node.prev.next = node.next;\n      } else {\n        this.head = node.next;\n      }\n\n      if (node.next !== null) {\n        node.next.prev = node.prev;\n      } else {\n        this.tail = node.prev;\n      }\n\n      delete this.cache[key];\n      this.size--;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.head = null;\n      this.tail = null;\n      this.size = 0;\n      this.cache = {};\n    } // // Invokes the callback function with every node of the chain and the index of the node.\n    // forEach(fn) {\n    //   let node = this.head;\n    //   let counter = 0;\n    //   while (node) {\n    //     fn(node, counter);\n    //     node = node.next;\n    //     counter++;\n    //   }\n    // }\n    // // To iterate over LRU with a 'for...of' loop\n    // *[Symbol.iterator]() {\n    //   let node = this.head;\n    //   while (node) {\n    //     yield node;\n    //     node = node.next;\n    //   }\n    // }\n\n  }]);\n\n  return LRUCache;\n}();\n\nexport { LRUCache as default };\n//# sourceMappingURL=LRUCache.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport LRUCache from './LRUCache.js'; // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\n// countries being used for the same doc with ~10 patterns for each country. Some pages will have\n// a lot more countries in use, but typically fewer numbers for each so expanding the cache for\n// that use-case won't have a lot of benefit.\n\nvar RegExpCache = /*#__PURE__*/function () {\n  function RegExpCache(size) {\n    _classCallCheck(this, RegExpCache);\n\n    this.cache = new LRUCache(size);\n  }\n\n  _createClass(RegExpCache, [{\n    key: \"getPatternForRegExp\",\n    value: function getPatternForRegExp(pattern) {\n      var regExp = this.cache.get(pattern);\n\n      if (!regExp) {\n        regExp = new RegExp('^' + pattern);\n        this.cache.put(pattern, regExp);\n      }\n\n      return regExp;\n    }\n  }]);\n\n  return RegExpCache;\n}();\n\nexport { RegExpCache as default };\n//# sourceMappingURL=RegExpCache.js.map","/** Returns a regular expression quantifier with an upper and lower limit. */\nexport function limit(lower, upper) {\n  if (lower < 0 || upper <= 0 || upper < lower) {\n    throw new TypeError();\n  }\n\n  return \"{\".concat(lower, \",\").concat(upper, \"}\");\n}\n/**\r\n * Trims away any characters after the first match of {@code pattern} in {@code candidate},\r\n * returning the trimmed version.\r\n */\n\nexport function trimAfterFirstMatch(regexp, string) {\n  var index = string.search(regexp);\n\n  if (index >= 0) {\n    return string.slice(0, index);\n  }\n\n  return string;\n}\nexport function startsWith(string, substring) {\n  return string.indexOf(substring) === 0;\n}\nexport function endsWith(string, substring) {\n  return string.indexOf(substring, string.length - substring.length) === string.length - substring.length;\n}\n//# sourceMappingURL=util.js.map","// Javascript doesn't support UTF-8 regular expressions.\n// So mimicking them here.\n// Copy-pasted from `PhoneNumberMatcher.js`.\n\n/**\r\n * \"\\p{Z}\" is any kind of whitespace or invisible separator (\"Separator\").\r\n * http://www.regular-expressions.info/unicode.html\r\n * \"\\P{Z}\" is the reverse of \"\\p{Z}\".\r\n * \"\\p{N}\" is any kind of numeric character in any script (\"Number\").\r\n * \"\\p{Nd}\" is a digit zero through nine in any script except \"ideographic scripts\" (\"Decimal_Digit_Number\").\r\n * \"\\p{Sc}\" is a currency symbol (\"Currency_Symbol\").\r\n * \"\\p{L}\" is any kind of letter from any language (\"Letter\").\r\n * \"\\p{Mn}\" is \"non-spacing mark\".\r\n *\r\n * Javascript doesn't support Unicode Regular Expressions\r\n * so substituting it with this explicit set of characters.\r\n *\r\n * https://stackoverflow.com/questions/13210194/javascript-regex-equivalent-of-a-za-z-using-pl\r\n * https://github.com/danielberndt/babel-plugin-utf-8-regex/blob/master/src/transformer.js\r\n */\nvar _pZ = \" \\xA0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\";\nexport var pZ = \"[\".concat(_pZ, \"]\");\nexport var PZ = \"[^\".concat(_pZ, \"]\");\nexport var _pN = \"0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19\"; // const pN = `[${_pN}]`\n\nvar _pNd = \"0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19\";\nexport var pNd = \"[\".concat(_pNd, \"]\");\nexport var _pL = \"A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\";\nvar pL = \"[\".concat(_pL, \"]\");\nvar pL_regexp = new RegExp(pL);\nvar _pSc = \"$\\xA2-\\xA5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20B9\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6\";\nvar pSc = \"[\".concat(_pSc, \"]\");\nvar pSc_regexp = new RegExp(pSc);\nvar _pMn = \"\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u08FE\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F\\uA674-\\uA67D\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26\";\nvar pMn = \"[\".concat(_pMn, \"]\");\nvar pMn_regexp = new RegExp(pMn);\nvar _InBasic_Latin = \"\\0-\\x7F\";\nvar _InLatin_1_Supplement = \"\\x80-\\xFF\";\nvar _InLatin_Extended_A = \"\\u0100-\\u017F\";\nvar _InLatin_Extended_Additional = \"\\u1E00-\\u1EFF\";\nvar _InLatin_Extended_B = \"\\u0180-\\u024F\";\nvar _InCombining_Diacritical_Marks = \"\\u0300-\\u036F\";\nvar latinLetterRegexp = new RegExp('[' + _InBasic_Latin + _InLatin_1_Supplement + _InLatin_Extended_A + _InLatin_Extended_Additional + _InLatin_Extended_B + _InCombining_Diacritical_Marks + ']');\n/**\r\n * Helper method to determine if a character is a Latin-script letter or not.\r\n * For our purposes, combining marks should also return true since we assume\r\n * they have been added to a preceding Latin character.\r\n */\n\nexport function isLatinLetter(letter) {\n  // Combining marks are a subset of non-spacing-mark.\n  if (!pL_regexp.test(letter) && !pMn_regexp.test(letter)) {\n    return false;\n  }\n\n  return latinLetterRegexp.test(letter);\n}\nexport function isInvalidPunctuationSymbol(character) {\n  return character === '%' || pSc_regexp.test(character);\n}\n//# sourceMappingURL=utf-8.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport isValidNumber from '../validate_.js';\nimport parseDigits from '../helpers/parseDigits.js';\nimport { startsWith, endsWith } from './util.js';\n/**\r\n * Leniency when finding potential phone numbers in text segments\r\n * The levels here are ordered in increasing strictness.\r\n */\n\nexport default {\n  /**\r\n   * Phone numbers accepted are \"possible\", but not necessarily \"valid\".\r\n   */\n  POSSIBLE: function POSSIBLE(number, candidate, metadata) {\n    return true;\n  },\n\n  /**\r\n   * Phone numbers accepted are \"possible\" and \"valid\".\r\n   * Numbers written in national format must have their national-prefix\r\n   * present if it is usually written for a number of this type.\r\n   */\n  VALID: function VALID(number, candidate, metadata) {\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidate.toString(), metadata)) {\n      return false;\n    } // Skipped for simplicity.\n    // return isNationalPrefixPresentIfRequired(number, metadata)\n\n\n    return true;\n  },\n\n  /**\r\n   * Phone numbers accepted are \"valid\" and\r\n   * are grouped in a possible way for this locale. For example, a US number written as\r\n   * \"65 02 53 00 00\" and \"650253 0000\" are not accepted at this leniency level, whereas\r\n   * \"650 253 0000\", \"650 2530000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol in the national significant number\r\n   * are also dropped at this level.\r\n   *\r\n   * Warning: This level might result in lower coverage especially for regions outside of\r\n   * country code \"+1\". If you are not sure about which level to use,\r\n   * email the discussion group libphonenumber-discuss@googlegroups.com.\r\n   */\n  STRICT_GROUPING: function STRICT_GROUPING(number, candidate, metadata, regExpCache) {\n    var candidateString = candidate.toString();\n\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsRemainGrouped, regExpCache);\n  },\n\n  /**\r\n   * Phone numbers accepted are {@linkplain PhoneNumberUtil#isValidNumber(PhoneNumber) valid} and\r\n   * are grouped in the same way that we would have formatted it, or as a single block. For\r\n   * example, a US number written as \"650 2530000\" is not accepted at this leniency level, whereas\r\n   * \"650 253 0000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol are also dropped at this level.\r\n   * <p>\r\n   * Warning: This level might result in lower coverage especially for regions outside of country\r\n   * code \"+1\". If you are not sure about which level to use, email the discussion group\r\n   * libphonenumber-discuss@googlegroups.com.\r\n   */\n  EXACT_GROUPING: function EXACT_GROUPING(number, candidate, metadata, regExpCache) {\n    var candidateString = candidate.toString();\n\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsAreExactlyPresent, regExpCache);\n  }\n};\n\nfunction containsOnlyValidXChars(number, candidate, metadata) {\n  // The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the\n  // national significant number or (2) an extension sign, in which case they always precede the\n  // extension number. We assume a carrier code is more than 1 digit, so the first case has to\n  // have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'\n  // or 'X'. We ignore the character if it appears as the last character of the string.\n  for (var index = 0; index < candidate.length - 1; index++) {\n    var charAtIndex = candidate.charAt(index);\n\n    if (charAtIndex === 'x' || charAtIndex === 'X') {\n      var charAtNextIndex = candidate.charAt(index + 1);\n\n      if (charAtNextIndex === 'x' || charAtNextIndex === 'X') {\n        // This is the carrier code case, in which the 'X's always precede the national\n        // significant number.\n        index++;\n\n        if (util.isNumberMatch(number, candidate.substring(index)) != MatchType.NSN_MATCH) {\n          return false;\n        } // This is the extension sign case, in which the 'x' or 'X' should always precede the\n        // extension number.\n\n      } else if (parseDigits(candidate.substring(index)) !== number.ext) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction isNationalPrefixPresentIfRequired(number, _metadata) {\n  // First, check how we deduced the country code. If it was written in international format, then\n  // the national prefix is not required.\n  if (number.getCountryCodeSource() != 'FROM_DEFAULT_COUNTRY') {\n    return true;\n  }\n\n  var phoneNumberRegion = util.getRegionCodeForCountryCode(number.getCountryCode());\n  var metadata = util.getMetadataForRegion(phoneNumberRegion);\n\n  if (metadata == null) {\n    return true;\n  } // Check if a national prefix should be present when formatting this number.\n\n\n  var nationalNumber = util.getNationalSignificantNumber(number);\n  var formatRule = util.chooseFormattingPatternForNumber(metadata.numberFormats(), nationalNumber); // To do this, we check that a national prefix formatting rule was present\n  // and that it wasn't just the first-group symbol ($1) with punctuation.\n\n  if (formatRule && formatRule.getNationalPrefixFormattingRule().length > 0) {\n    if (formatRule.getNationalPrefixOptionalWhenFormatting()) {\n      // The national-prefix is optional in these cases, so we don't need to check if it was\n      // present.\n      return true;\n    }\n\n    if (PhoneNumberUtil.formattingRuleHasFirstGroupOnly(formatRule.getNationalPrefixFormattingRule())) {\n      // National Prefix not needed for this number.\n      return true;\n    } // Normalize the remainder.\n\n\n    var rawInputCopy = PhoneNumberUtil.normalizeDigitsOnly(number.getRawInput()); // Check if we found a national prefix and/or carrier code at the start of the raw input, and\n    // return the result.\n\n    return util.maybeStripNationalPrefixAndCarrierCode(rawInputCopy, metadata, null);\n  }\n\n  return true;\n}\n\nexport function containsMoreThanOneSlashInNationalNumber(number, candidate) {\n  var firstSlashInBodyIndex = candidate.indexOf('/');\n\n  if (firstSlashInBodyIndex < 0) {\n    // No slashes, this is okay.\n    return false;\n  } // Now look for a second one.\n\n\n  var secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1);\n\n  if (secondSlashInBodyIndex < 0) {\n    // Only one slash, this is okay.\n    return false;\n  } // If the first slash is after the country calling code, this is permitted.\n\n\n  var candidateHasCountryCode = number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN || number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITHOUT_PLUS_SIGN;\n\n  if (candidateHasCountryCode && PhoneNumberUtil.normalizeDigitsOnly(candidate.substring(0, firstSlashInBodyIndex)) === String(number.getCountryCode())) {\n    // Any more slashes and this is illegal.\n    return candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0;\n  }\n\n  return true;\n}\n\nfunction checkNumberGroupingIsValid(number, candidate, metadata, checkGroups, regExpCache) {\n  var normalizedCandidate = normalizeDigits(candidate, true\n  /* keep non-digits */\n  );\n  var formattedNumberGroups = getNationalNumberGroups(metadata, number, null);\n\n  if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n    return true;\n  } // If this didn't pass, see if there are any alternate formats that match, and try them instead.\n\n\n  var alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode());\n  var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n\n  if (alternateFormats) {\n    for (var _iterator = _createForOfIteratorHelperLoose(alternateFormats.numberFormats()), _step; !(_step = _iterator()).done;) {\n      var alternateFormat = _step.value;\n\n      if (alternateFormat.leadingDigitsPatterns().length > 0) {\n        // There is only one leading digits pattern for alternate formats.\n        var leadingDigitsRegExp = regExpCache.getPatternForRegExp('^' + alternateFormat.leadingDigitsPatterns()[0]);\n\n        if (!leadingDigitsRegExp.test(nationalSignificantNumber)) {\n          // Leading digits don't match; try another one.\n          continue;\n        }\n      }\n\n      formattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat);\n\n      if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n/**\r\n * Helper method to get the national-number part of a number, formatted without any national\r\n * prefix, and return it as a set of digit blocks that would be formatted together following\r\n * standard formatting rules.\r\n */\n\n\nfunction getNationalNumberGroups(metadata, number, formattingPattern) {\n  if (formattingPattern) {\n    // We format the NSN only, and split that according to the separator.\n    var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n    return util.formatNsnUsingPattern(nationalSignificantNumber, formattingPattern, 'RFC3966', metadata).split('-');\n  } // This will be in the format +CC-DG1-DG2-DGX;ext=EXT where DG1..DGX represents groups of digits.\n\n\n  var rfc3966Format = formatNumber(number, 'RFC3966', metadata); // We remove the extension part from the formatted string before splitting it into different\n  // groups.\n\n  var endIndex = rfc3966Format.indexOf(';');\n\n  if (endIndex < 0) {\n    endIndex = rfc3966Format.length;\n  } // The country-code will have a '-' following it.\n\n\n  var startIndex = rfc3966Format.indexOf('-') + 1;\n  return rfc3966Format.slice(startIndex, endIndex).split('-');\n}\n\nfunction allNumberGroupsAreExactlyPresent(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN); // Set this to the last group, skipping it if the number has an extension.\n\n  var candidateNumberGroupIndex = number.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1; // First we check if the national significant number is formatted as a block.\n  // We use contains and not equals, since the national significant number may be present with\n  // a prefix such as a national number prefix, or the country code itself.\n\n  if (candidateGroups.length == 1 || candidateGroups[candidateNumberGroupIndex].contains(util.getNationalSignificantNumber(number))) {\n    return true;\n  } // Starting from the end, go through in reverse, excluding the first group, and check the\n  // candidate and number groups are the same.\n\n\n  var formattedNumberGroupIndex = formattedNumberGroups.length - 1;\n\n  while (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0) {\n    if (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex]) {\n      return false;\n    }\n\n    formattedNumberGroupIndex--;\n    candidateNumberGroupIndex--;\n  } // Now check the first group. There may be a national prefix at the start, so we only check\n  // that the candidate group ends with the formatted number group.\n\n\n  return candidateNumberGroupIndex >= 0 && endsWith(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]);\n}\n\nfunction allNumberGroupsRemainGrouped(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var fromIndex = 0;\n\n  if (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY) {\n    // First skip the country code if the normalized candidate contained it.\n    var countryCode = String(number.getCountryCode());\n    fromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length();\n  } // Check each group of consecutive digits are not broken into separate groupings in the\n  // {@code normalizedCandidate} string.\n\n\n  for (var i = 0; i < formattedNumberGroups.length; i++) {\n    // Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}\n    // doesn't contain the consecutive digits in formattedNumberGroups[i].\n    fromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex);\n\n    if (fromIndex < 0) {\n      return false;\n    } // Moves {@code fromIndex} forward.\n\n\n    fromIndex += formattedNumberGroups[i].length();\n\n    if (i == 0 && fromIndex < normalizedCandidate.length()) {\n      // We are at the position right after the NDC. We get the region used for formatting\n      // information based on the country code in the phone number, rather than the number itself,\n      // as we do not need to distinguish between different countries with the same country\n      // calling code and this is faster.\n      var region = util.getRegionCodeForCountryCode(number.getCountryCode());\n\n      if (util.getNddPrefixForRegion(region, true) != null && Character.isDigit(normalizedCandidate.charAt(fromIndex))) {\n        // This means there is no formatting symbol after the NDC. In this case, we only\n        // accept the number if there is no formatting symbol at all in the number, except\n        // for extensions. This is only important for countries with national prefixes.\n        var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n        return startsWith(normalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length), nationalSignificantNumber);\n      }\n    }\n  } // The check here makes sure that we haven't mistakenly already used the extension to\n  // match the last group of the subscriber number. Note the extension cannot have\n  // formatting in-between digits.\n\n\n  return normalizedCandidate.slice(fromIndex).contains(number.getExtension());\n}\n//# sourceMappingURL=Leniency.js.map","import { trimAfterFirstMatch } from './util.js'; // Regular expression of characters typically used to start a second phone number for the purposes\n// of parsing. This allows us to strip off parts of the number that are actually the start of\n// another number, such as for: (530) 583-6985 x302/x2303 -> the second extension here makes this\n// actually two phone numbers, (530) 583-6985 x302 and (530) 583-6985 x2303. We remove the second\n// extension so that the first number is parsed correctly.\n//\n// Matches a slash (\\ or /) followed by a space followed by an `x`.\n//\n\nvar SECOND_NUMBER_START_PATTERN = /[\\\\/] *x/;\nexport default function parsePreCandidate(candidate) {\n  // Check for extra numbers at the end.\n  // TODO: This is the place to start when trying to support extraction of multiple phone number\n  // from split notations (+41 79 123 45 67 / 68).\n  return trimAfterFirstMatch(SECOND_NUMBER_START_PATTERN, candidate);\n}\n//# sourceMappingURL=parsePreCandidate.js.map","// Matches strings that look like dates using \"/\" as a separator.\n// Examples: 3/10/2011, 31/10/96 or 08/31/95.\nvar SLASH_SEPARATED_DATES = /(?:(?:[0-3]?\\d\\/[01]?\\d)|(?:[01]?\\d\\/[0-3]?\\d))\\/(?:[12]\\d)?\\d{2}/; // Matches timestamps.\n// Examples: \"2012-01-02 08:00\".\n// Note that the reg-ex does not include the\n// trailing \":\\d\\d\" -- that is covered by TIME_STAMPS_SUFFIX.\n\nvar TIME_STAMPS = /[12]\\d{3}[-/]?[01]\\d[-/]?[0-3]\\d +[0-2]\\d$/;\nvar TIME_STAMPS_SUFFIX_LEADING = /^:[0-5]\\d/;\nexport default function isValidPreCandidate(candidate, offset, text) {\n  // Skip a match that is more likely to be a date.\n  if (SLASH_SEPARATED_DATES.test(candidate)) {\n    return false;\n  } // Skip potential time-stamps.\n\n\n  if (TIME_STAMPS.test(candidate)) {\n    var followingText = text.slice(offset + candidate.length);\n\n    if (TIME_STAMPS_SUFFIX_LEADING.test(followingText)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n//# sourceMappingURL=isValidPreCandidate.js.map","// Copy-pasted from `PhoneNumberMatcher.js`.\nimport { PLUS_CHARS } from '../constants.js';\nimport { limit } from './util.js';\nimport { isLatinLetter, isInvalidPunctuationSymbol } from './utf-8.js';\nvar OPENING_PARENS = \"(\\\\[\\uFF08\\uFF3B\";\nvar CLOSING_PARENS = \")\\\\]\\uFF09\\uFF3D\";\nvar NON_PARENS = \"[^\".concat(OPENING_PARENS).concat(CLOSING_PARENS, \"]\");\nexport var LEAD_CLASS = \"[\".concat(OPENING_PARENS).concat(PLUS_CHARS, \"]\"); // Punctuation that may be at the start of a phone number - brackets and plus signs.\n\nvar LEAD_CLASS_LEADING = new RegExp('^' + LEAD_CLASS); // Limit on the number of pairs of brackets in a phone number.\n\nvar BRACKET_PAIR_LIMIT = limit(0, 3);\n/**\r\n * Pattern to check that brackets match. Opening brackets should be closed within a phone number.\r\n * This also checks that there is something inside the brackets. Having no brackets at all is also\r\n * fine.\r\n *\r\n * An opening bracket at the beginning may not be closed, but subsequent ones should be.  It's\r\n * also possible that the leading bracket was dropped, so we shouldn't be surprised if we see a\r\n * closing bracket first. We limit the sets of brackets in a phone number to four.\r\n */\n\nvar MATCHING_BRACKETS_ENTIRE = new RegExp('^' + \"(?:[\" + OPENING_PARENS + \"])?\" + \"(?:\" + NON_PARENS + \"+\" + \"[\" + CLOSING_PARENS + \"])?\" + NON_PARENS + \"+\" + \"(?:[\" + OPENING_PARENS + \"]\" + NON_PARENS + \"+[\" + CLOSING_PARENS + \"])\" + BRACKET_PAIR_LIMIT + NON_PARENS + \"*\" + '$');\n/**\r\n * Matches strings that look like publication pages. Example:\r\n * <pre>Computing Complete Answers to Queries in the Presence of Limited Access Patterns.\r\n * Chen Li. VLDB J. 12(3): 211-227 (2003).</pre>\r\n *\r\n * The string \"211-227 (2003)\" is not a telephone number.\r\n */\n\nvar PUB_PAGES = /\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}/;\nexport default function isValidCandidate(candidate, offset, text, leniency) {\n  // Check the candidate doesn't contain any formatting\n  // which would indicate that it really isn't a phone number.\n  if (!MATCHING_BRACKETS_ENTIRE.test(candidate) || PUB_PAGES.test(candidate)) {\n    return;\n  } // If leniency is set to VALID or stricter, we also want to skip numbers that are surrounded\n  // by Latin alphabetic characters, to skip cases like abc8005001234 or 8005001234def.\n\n\n  if (leniency !== 'POSSIBLE') {\n    // If the candidate is not at the start of the text,\n    // and does not start with phone-number punctuation,\n    // check the previous character.\n    if (offset > 0 && !LEAD_CLASS_LEADING.test(candidate)) {\n      var previousChar = text[offset - 1]; // We return null if it is a latin letter or an invalid punctuation symbol.\n\n      if (isInvalidPunctuationSymbol(previousChar) || isLatinLetter(previousChar)) {\n        return false;\n      }\n    }\n\n    var lastCharIndex = offset + candidate.length;\n\n    if (lastCharIndex < text.length) {\n      var nextChar = text[lastCharIndex];\n\n      if (isInvalidPunctuationSymbol(nextChar) || isLatinLetter(nextChar)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n//# sourceMappingURL=isValidCandidate.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n/**\r\n * A port of Google's `PhoneNumberMatcher.java`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberMatcher.java\r\n * Date: 08.03.2018.\r\n */\nimport PhoneNumber from './PhoneNumber.js';\nimport { MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE, VALID_PUNCTUATION } from './constants.js';\nimport createExtensionPattern from './helpers/extension/createExtensionPattern.js';\nimport RegExpCache from './findNumbers/RegExpCache.js';\nimport { limit, trimAfterFirstMatch } from './findNumbers/util.js';\nimport { _pL, _pN, pZ, PZ, pNd } from './findNumbers/utf-8.js';\nimport Leniency from './findNumbers/Leniency.js';\nimport parsePreCandidate from './findNumbers/parsePreCandidate.js';\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate.js';\nimport isValidCandidate, { LEAD_CLASS } from './findNumbers/isValidCandidate.js';\nimport { isSupportedCountry } from './metadata.js';\nimport parseNumber from './parse_.js';\nvar EXTN_PATTERNS_FOR_MATCHING = createExtensionPattern('matching');\n/**\r\n * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are\r\n * ordered according to specificity. For example, white-space is last since that is frequently\r\n * used in numbers, not just to separate two numbers. We have separate patterns since we don't\r\n * want to break up the phone-number-like text on more than one different kind of symbol at one\r\n * time, although symbols of the same type (e.g. space) can be safely grouped together.\r\n *\r\n * Note that if there is a match, we will always check any text found up to the first match as\r\n * well.\r\n */\n\nvar INNER_MATCHES = [// Breaks on the slash - e.g. \"651-234-2345/332-445-1234\"\n'\\\\/+(.*)/', // Note that the bracket here is inside the capturing group, since we consider it part of the\n// phone number. Will match a pattern like \"(650) 223 3345 (754) 223 3321\".\n'(\\\\([^(]*)', // Breaks on a hyphen - e.g. \"12345 - 332-445-1234 is my number.\"\n// We require a space on either side of the hyphen for it to be considered a separator.\n\"(?:\".concat(pZ, \"-|-\").concat(pZ, \")\").concat(pZ, \"*(.+)\"), // Various types of wide hyphens. Note we have decided not to enforce a space here, since it's\n// possible that it's supposed to be used to break two numbers without spaces, and we haven't\n// seen many instances of it used within a number.\n\"[\\u2012-\\u2015\\uFF0D]\".concat(pZ, \"*(.+)\"), // Breaks on a full stop - e.g. \"12345. 332-445-1234 is my number.\"\n\"\\\\.+\".concat(pZ, \"*([^.]+)\"), // Breaks on space - e.g. \"3324451234 8002341234\"\n\"\".concat(pZ, \"+(\").concat(PZ, \"+)\")]; // Limit on the number of leading (plus) characters.\n\nvar leadLimit = limit(0, 2); // Limit on the number of consecutive punctuation characters.\n\nvar punctuationLimit = limit(0, 4);\n/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a\r\n * single block, set high enough to accommodate the entire national number and the international\r\n * country code. */\n\nvar digitBlockLimit = MAX_LENGTH_FOR_NSN + MAX_LENGTH_COUNTRY_CODE; // Limit on the number of blocks separated by punctuation.\n// Uses digitBlockLimit since some formats use spaces to separate each digit.\n\nvar blockLimit = limit(0, digitBlockLimit);\n/* A punctuation sequence allowing white space. */\n\nvar punctuation = \"[\".concat(VALID_PUNCTUATION, \"]\") + punctuationLimit; // A digits block without punctuation.\n\nvar digitSequence = pNd + limit(1, digitBlockLimit);\n/**\r\n * Phone number pattern allowing optional punctuation.\r\n * The phone number pattern used by `find()`, similar to\r\n * VALID_PHONE_NUMBER, but with the following differences:\r\n * <ul>\r\n *   <li>All captures are limited in order to place an upper bound to the text matched by the\r\n *       pattern.\r\n * <ul>\r\n *   <li>Leading punctuation / plus signs are limited.\r\n *   <li>Consecutive occurrences of punctuation are limited.\r\n *   <li>Number of digits is limited.\r\n * </ul>\r\n *   <li>No whitespace is allowed at the start or end.\r\n *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.\r\n * </ul>\r\n */\n\nvar PATTERN = '(?:' + LEAD_CLASS + punctuation + ')' + leadLimit + digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit + '(?:' + EXTN_PATTERNS_FOR_MATCHING + ')?'; // Regular expression of trailing characters that we want to remove.\n// We remove all characters that are not alpha or numerical characters.\n// The hash character is retained here, as it may signify\n// the previous block was an extension.\n//\n// // Don't know what does '&&' mean here.\n// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\\\P{N}&&\\\\P{L}]&&[^#]]+$`)\n//\n\nvar UNWANTED_END_CHAR_PATTERN = new RegExp(\"[^\".concat(_pN).concat(_pL, \"#]+$\"));\nvar NON_DIGITS_PATTERN = /(\\D+)/;\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n/**\r\n * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.\r\n * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in\r\n * {@link PhoneNumberUtil}.\r\n *\r\n * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are\r\n * not found.\r\n *\r\n * <p>This class is not thread-safe.\r\n */\n\nvar PhoneNumberMatcher = /*#__PURE__*/function () {\n  /**\r\n   * Creates a new instance. See the factory methods in {@link PhoneNumberUtil} on how to obtain a\r\n   * new instance.\r\n   *\r\n   * @param util  the phone number util to use\r\n   * @param text  the character sequence that we will search, null for no text\r\n   * @param country  the country to assume for phone numbers not written in international format\r\n   *     (with a leading plus, or with the international dialing prefix of the specified region).\r\n   *     May be null or \"ZZ\" if only numbers with a leading plus should be\r\n   *     considered.\r\n   * @param leniency  the leniency to use when evaluating candidate phone numbers\r\n   * @param maxTries  the maximum number of invalid numbers to try before giving up on the text.\r\n   *     This is to cover degenerate cases where the text has a lot of false positives in it. Must\r\n   *     be {@code >= 0}.\r\n   */\n  function PhoneNumberMatcher() {\n    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var metadata = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, PhoneNumberMatcher);\n\n    options = _objectSpread(_objectSpread({}, options), {}, {\n      defaultCallingCode: options.defaultCallingCode,\n      defaultCountry: options.defaultCountry && isSupportedCountry(options.defaultCountry, metadata) ? options.defaultCountry : undefined,\n      leniency: options.leniency || options.extended ? 'POSSIBLE' : 'VALID',\n      maxTries: options.maxTries || MAX_SAFE_INTEGER\n    });\n\n    if (!options.leniency) {\n      throw new TypeError('`Leniency` not supplied');\n    }\n\n    if (options.maxTries < 0) {\n      throw new TypeError('`maxTries` not supplied');\n    }\n\n    this.text = text;\n    this.options = options;\n    this.metadata = metadata;\n    /** The degree of validation requested. */\n\n    this.leniency = Leniency[options.leniency];\n\n    if (!this.leniency) {\n      throw new TypeError(\"Unknown leniency: \".concat(options.leniency, \".\"));\n    }\n    /** The maximum number of retries after matching an invalid number. */\n\n\n    this.maxTries = options.maxTries;\n    this.PATTERN = new RegExp(PATTERN, 'ig');\n    /** The iteration tristate. */\n\n    this.state = 'NOT_READY';\n    /** The next index to start searching at. Undefined in {@link State#DONE}. */\n\n    this.searchIndex = 0; // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\n    // countries being used for the same doc with ~10 patterns for each country. Some pages will have\n    // a lot more countries in use, but typically fewer numbers for each so expanding the cache for\n    // that use-case won't have a lot of benefit.\n\n    this.regExpCache = new RegExpCache(32);\n  }\n  /**\r\n   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}\r\n   * that represents a phone number. Returns the next match, null if none was found.\r\n   *\r\n   * @param index  the search index to start searching at\r\n   * @return  the phone number match found, null if none can be found\r\n   */\n\n\n  _createClass(PhoneNumberMatcher, [{\n    key: \"find\",\n    value: function find() {\n      // // Reset the regular expression.\n      // this.PATTERN.lastIndex = index\n      var matches;\n\n      while (this.maxTries > 0 && (matches = this.PATTERN.exec(this.text)) !== null) {\n        var candidate = matches[0];\n        var offset = matches.index;\n        candidate = parsePreCandidate(candidate);\n\n        if (isValidPreCandidate(candidate, offset, this.text)) {\n          var match = // Try to come up with a valid match given the entire candidate.\n          this.parseAndVerify(candidate, offset, this.text) // If that failed, try to find an \"inner match\" -\n          // there might be a phone number within this candidate.\n          || this.extractInnerMatch(candidate, offset, this.text);\n\n          if (match) {\n            if (this.options.v2) {\n              var phoneNumber = new PhoneNumber(match.country || match.countryCallingCode, match.phone, this.metadata);\n\n              if (match.ext) {\n                phoneNumber.ext = match.ext;\n              }\n\n              return {\n                startsAt: match.startsAt,\n                endsAt: match.endsAt,\n                number: phoneNumber\n              };\n            }\n\n            return match;\n          }\n        }\n\n        this.maxTries--;\n      }\n    }\n    /**\r\n     * Attempts to extract a match from `substring`\r\n     * if the substring itself does not qualify as a match.\r\n     */\n\n  }, {\n    key: \"extractInnerMatch\",\n    value: function extractInnerMatch(substring, offset, text) {\n      for (var _iterator = _createForOfIteratorHelperLoose(INNER_MATCHES), _step; !(_step = _iterator()).done;) {\n        var innerMatchPattern = _step.value;\n        var isFirstMatch = true;\n        var candidateMatch = void 0;\n        var innerMatchRegExp = new RegExp(innerMatchPattern, 'g');\n\n        while (this.maxTries > 0 && (candidateMatch = innerMatchRegExp.exec(substring)) !== null) {\n          if (isFirstMatch) {\n            // We should handle any group before this one too.\n            var _candidate = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, substring.slice(0, candidateMatch.index));\n\n            var _match = this.parseAndVerify(_candidate, offset, text);\n\n            if (_match) {\n              return _match;\n            }\n\n            this.maxTries--;\n            isFirstMatch = false;\n          }\n\n          var candidate = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, candidateMatch[1]); // Java code does `groupMatcher.start(1)` here,\n          // but there's no way in javascript to get a `candidate` start index,\n          // therefore resort to using this kind of an approximation.\n          // (`groupMatcher` is called `candidateInSubstringMatch` in this javascript port)\n          // https://stackoverflow.com/questions/15934353/get-index-of-each-capture-in-a-javascript-regex\n\n          var candidateIndexGuess = substring.indexOf(candidate, candidateMatch.index);\n          var match = this.parseAndVerify(candidate, offset + candidateIndexGuess, text);\n\n          if (match) {\n            return match;\n          }\n\n          this.maxTries--;\n        }\n      }\n    }\n    /**\r\n     * Parses a phone number from the `candidate` using `parseNumber` and\r\n     * verifies it matches the requested `leniency`. If parsing and verification succeed,\r\n     * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.\r\n     *\r\n     * @param candidate  the candidate match\r\n     * @param offset  the offset of {@code candidate} within {@link #text}\r\n     * @return  the parsed and validated phone number match, or null\r\n     */\n\n  }, {\n    key: \"parseAndVerify\",\n    value: function parseAndVerify(candidate, offset, text) {\n      if (!isValidCandidate(candidate, offset, text, this.options.leniency)) {\n        return;\n      }\n\n      var number = parseNumber(candidate, {\n        extended: true,\n        defaultCountry: this.options.defaultCountry,\n        defaultCallingCode: this.options.defaultCallingCode\n      }, this.metadata);\n\n      if (!number.possible) {\n        return;\n      }\n\n      if (this.leniency(number, candidate, this.metadata, this.regExpCache)) {\n        // // We used parseAndKeepRawInput to create this number,\n        // // but for now we don't return the extra values parsed.\n        // // TODO: stop clearing all values here and switch all users over\n        // // to using rawInput() rather than the rawString() of PhoneNumberMatch.\n        // number.clearCountryCodeSource()\n        // number.clearRawInput()\n        // number.clearPreferredDomesticCarrierCode()\n        var result = {\n          startsAt: offset,\n          endsAt: offset + candidate.length,\n          phone: number.phone\n        };\n\n        if (number.country && number.country !== '001') {\n          result.country = number.country;\n        } else {\n          result.countryCallingCode = number.countryCallingCode;\n        }\n\n        if (number.ext) {\n          result.ext = number.ext;\n        }\n\n        return result;\n      }\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      if (this.state === 'NOT_READY') {\n        this.lastMatch = this.find(); // (this.searchIndex)\n\n        if (this.lastMatch) {\n          // this.searchIndex = this.lastMatch.endsAt\n          this.state = 'READY';\n        } else {\n          this.state = 'DONE';\n        }\n      }\n\n      return this.state === 'READY';\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      // Check the state and find the next match as a side-effect if necessary.\n      if (!this.hasNext()) {\n        throw new Error('No next element');\n      } // Don't retain that memory any longer than necessary.\n\n\n      var result = this.lastMatch;\n      this.lastMatch = null;\n      this.state = 'NOT_READY';\n      return result;\n    }\n  }]);\n\n  return PhoneNumberMatcher;\n}();\n\nexport { PhoneNumberMatcher as default };\n//# sourceMappingURL=PhoneNumberMatcher.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar AsYouTypeState = /*#__PURE__*/function () {\n  function AsYouTypeState(_ref) {\n    var onCountryChange = _ref.onCountryChange,\n        onCallingCodeChange = _ref.onCallingCodeChange;\n\n    _classCallCheck(this, AsYouTypeState);\n\n    this.onCountryChange = onCountryChange;\n    this.onCallingCodeChange = onCallingCodeChange;\n  }\n\n  _createClass(AsYouTypeState, [{\n    key: \"reset\",\n    value: function reset(defaultCountry, defaultCallingCode) {\n      this.international = false;\n      this.IDDPrefix = undefined;\n      this.missingPlus = undefined;\n      this.callingCode = undefined;\n      this.digits = '';\n      this.resetNationalSignificantNumber();\n      this.initCountryAndCallingCode(defaultCountry, defaultCallingCode);\n    }\n  }, {\n    key: \"resetNationalSignificantNumber\",\n    value: function resetNationalSignificantNumber() {\n      this.nationalSignificantNumber = this.getNationalDigits();\n      this.nationalSignificantNumberMatchesInput = true;\n      this.nationalPrefix = undefined;\n      this.carrierCode = undefined;\n      this.complexPrefixBeforeNationalSignificantNumber = undefined;\n    }\n  }, {\n    key: \"update\",\n    value: function update(properties) {\n      for (var _i = 0, _Object$keys = Object.keys(properties); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        this[key] = properties[key];\n      }\n    }\n  }, {\n    key: \"initCountryAndCallingCode\",\n    value: function initCountryAndCallingCode(country, callingCode) {\n      this.setCountry(country);\n      this.setCallingCode(callingCode);\n    }\n  }, {\n    key: \"setCountry\",\n    value: function setCountry(country) {\n      this.country = country;\n      this.onCountryChange(country);\n    }\n  }, {\n    key: \"setCallingCode\",\n    value: function setCallingCode(callingCode) {\n      this.callingCode = callingCode;\n      return this.onCallingCodeChange(this.country, callingCode);\n    }\n  }, {\n    key: \"startInternationalNumber\",\n    value: function startInternationalNumber() {\n      // Prepend the `+` to parsed input.\n      this.international = true; // If a default country was set then reset it\n      // because an explicitly international phone\n      // number is being entered.\n\n      this.initCountryAndCallingCode();\n    }\n  }, {\n    key: \"appendDigits\",\n    value: function appendDigits(nextDigits) {\n      this.digits += nextDigits;\n    }\n  }, {\n    key: \"appendNationalSignificantNumberDigits\",\n    value: function appendNationalSignificantNumberDigits(nextDigits) {\n      this.nationalSignificantNumber += nextDigits;\n    }\n    /**\r\n     * Returns the part of `this.digits` that corresponds to the national number.\r\n     * Basically, all digits that have been input by the user, except for the\r\n     * international prefix and the country calling code part\r\n     * (if the number is an international one).\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getNationalDigits\",\n    value: function getNationalDigits() {\n      if (this.international) {\n        return this.digits.slice((this.IDDPrefix ? this.IDDPrefix.length : 0) + (this.callingCode ? this.callingCode.length : 0));\n      }\n\n      return this.digits;\n    }\n  }, {\n    key: \"getDigitsWithoutInternationalPrefix\",\n    value: function getDigitsWithoutInternationalPrefix() {\n      if (this.international) {\n        if (this.IDDPrefix) {\n          return this.digits.slice(this.IDDPrefix.length);\n        }\n      }\n\n      return this.digits;\n    }\n  }]);\n\n  return AsYouTypeState;\n}();\n\nexport { AsYouTypeState as default };\n//# sourceMappingURL=AsYouTypeState.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// Should be the same as `DIGIT_PLACEHOLDER` in `libphonenumber-metadata-generator`.\nexport var DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\n\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER); // Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\n\nexport function countOccurences(symbol, string) {\n  var count = 0; // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for counting brackets it is safe.\n  // for (const character of string)\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n} // Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\n\nexport function repeat(string, times) {\n  if (times < 1) {\n    return '';\n  }\n\n  var result = '';\n\n  while (times > 1) {\n    if (times & 1) {\n      result += string;\n    }\n\n    times >>= 1;\n    string += string;\n  }\n\n  return result + string;\n}\nexport function cutAndStripNonPairedParens(string, cutBeforeIndex) {\n  if (string[cutBeforeIndex] === ')') {\n    cutBeforeIndex++;\n  }\n\n  return stripNonPairedParens(string.slice(0, cutBeforeIndex));\n}\nexport function closeNonPairedParens(template, cut_before) {\n  var retained_template = template.slice(0, cut_before);\n  var opening_braces = countOccurences('(', retained_template);\n  var closing_braces = countOccurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n\n  while (dangling_braces > 0 && cut_before < template.length) {\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n\n    cut_before++;\n  }\n\n  return template.slice(0, cut_before);\n}\nexport function stripNonPairedParens(string) {\n  var dangling_braces = [];\n  var i = 0;\n\n  while (i < string.length) {\n    if (string[i] === '(') {\n      dangling_braces.push(i);\n    } else if (string[i] === ')') {\n      dangling_braces.pop();\n    }\n\n    i++;\n  }\n\n  var start = 0;\n  var cleared_string = '';\n  dangling_braces.push(string.length);\n\n  for (var _i = 0, _dangling_braces = dangling_braces; _i < _dangling_braces.length; _i++) {\n    var index = _dangling_braces[_i];\n    cleared_string += string.slice(start, index);\n    start = index + 1;\n  }\n\n  return cleared_string;\n}\nexport function populateTemplateWithDigits(template, position, digits) {\n  // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for `digits` it is safe.\n  // for (const digit of digits)\n  for (var _iterator2 = _createForOfIteratorHelperLoose(digits.split('')), _step2; !(_step2 = _iterator2()).done;) {\n    var digit = _step2.value;\n\n    // If there is room for more digits in current `template`,\n    // then set the next digit in the `template`,\n    // and return the formatted digits so far.\n    // If more digits are entered than the current format could handle.\n    if (template.slice(position + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {\n      return;\n    }\n\n    position = template.search(DIGIT_PLACEHOLDER_MATCHER);\n    template = template.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n  }\n\n  return [template, position];\n}\n//# sourceMappingURL=AsYouTypeFormatter.util.js.map","import checkNumberLength from './helpers/checkNumberLength.js';\nimport parseDigits from './helpers/parseDigits.js';\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js';\nexport default function formatCompleteNumber(state, format, _ref) {\n  var metadata = _ref.metadata,\n      shouldTryNationalPrefixFormattingRule = _ref.shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix = _ref.getSeparatorAfterNationalPrefix;\n  var matcher = new RegExp(\"^(?:\".concat(format.pattern(), \")$\"));\n\n  if (matcher.test(state.nationalSignificantNumber)) {\n    return formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, {\n      metadata: metadata,\n      shouldTryNationalPrefixFormattingRule: shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix\n    });\n  }\n}\nexport function canFormatCompleteNumber(nationalSignificantNumber, metadata) {\n  return checkNumberLength(nationalSignificantNumber, metadata) === 'IS_POSSIBLE';\n}\n\nfunction formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, _ref2) {\n  var metadata = _ref2.metadata,\n      shouldTryNationalPrefixFormattingRule = _ref2.shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix = _ref2.getSeparatorAfterNationalPrefix;\n  // `format` has already been checked for `nationalPrefix` requirement.\n  var nationalSignificantNumber = state.nationalSignificantNumber,\n      international = state.international,\n      nationalPrefix = state.nationalPrefix,\n      carrierCode = state.carrierCode; // Format the number with using `national_prefix_formatting_rule`.\n  // If the resulting formatted number is a valid formatted number, then return it.\n  //\n  // Google's AsYouType formatter is different in a way that it doesn't try\n  // to format using the \"national prefix formatting rule\", and instead it\n  // simply prepends a national prefix followed by a \" \" character.\n  // This code does that too, but as a fallback.\n  // The reason is that \"national prefix formatting rule\" may use parentheses,\n  // which wouldn't be included has it used the simpler Google's way.\n  //\n\n  if (shouldTryNationalPrefixFormattingRule(format)) {\n    var formattedNumber = formatNationalNumber(state, format, {\n      useNationalPrefixFormattingRule: true,\n      getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix,\n      metadata: metadata\n    });\n\n    if (formattedNumber) {\n      return formattedNumber;\n    }\n  } // Format the number without using `national_prefix_formatting_rule`.\n\n\n  return formatNationalNumber(state, format, {\n    useNationalPrefixFormattingRule: false,\n    getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix,\n    metadata: metadata\n  });\n}\n\nfunction formatNationalNumber(state, format, _ref3) {\n  var metadata = _ref3.metadata,\n      useNationalPrefixFormattingRule = _ref3.useNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix = _ref3.getSeparatorAfterNationalPrefix;\n  var formattedNationalNumber = formatNationalNumberUsingFormat(state.nationalSignificantNumber, format, {\n    carrierCode: state.carrierCode,\n    useInternationalFormat: state.international,\n    withNationalPrefix: useNationalPrefixFormattingRule,\n    metadata: metadata\n  });\n\n  if (!useNationalPrefixFormattingRule) {\n    if (state.nationalPrefix) {\n      // If a national prefix was extracted, then just prepend it,\n      // followed by a \" \" character.\n      formattedNationalNumber = state.nationalPrefix + getSeparatorAfterNationalPrefix(format) + formattedNationalNumber;\n    } else if (state.complexPrefixBeforeNationalSignificantNumber) {\n      formattedNationalNumber = state.complexPrefixBeforeNationalSignificantNumber + ' ' + formattedNationalNumber;\n    }\n  }\n\n  if (isValidFormattedNationalNumber(formattedNationalNumber, state)) {\n    return formattedNationalNumber;\n  }\n} // Check that the formatted phone number contains exactly\n// the same digits that have been input by the user.\n// For example, when \"0111523456789\" is input for `AR` country,\n// the extracted `this.nationalSignificantNumber` is \"91123456789\",\n// which means that the national part of `this.digits` isn't simply equal to\n// `this.nationalPrefix` + `this.nationalSignificantNumber`.\n//\n// Also, a `format` can add extra digits to the `this.nationalSignificantNumber`\n// being formatted via `metadata[country].national_prefix_transform_rule`.\n// For example, for `VI` country, it prepends `340` to the national number,\n// and if this check hasn't been implemented, then there would be a bug\n// when `340` \"area coude\" is \"duplicated\" during input for `VI` country:\n// https://github.com/catamphetamine/libphonenumber-js/issues/318\n//\n// So, all these \"gotchas\" are filtered out.\n//\n// In the original Google's code, the comments say:\n// \"Check that we didn't remove nor add any extra digits when we matched\n// this formatting pattern. This usually happens after we entered the last\n// digit during AYTF. Eg: In case of MX, we swallow mobile token (1) when\n// formatted but AYTF should retain all the number entered and not change\n// in order to match a format (of same leading digits and length) display\n// in that way.\"\n// \"If it's the same (i.e entered number and format is same), then it's\n// safe to return this in formatted number as nothing is lost / added.\"\n// Otherwise, don't use this format.\n// https://github.com/google/libphonenumber/commit/3e7c1f04f5e7200f87fb131e6f85c6e99d60f510#diff-9149457fa9f5d608a11bb975c6ef4bc5\n// https://github.com/google/libphonenumber/commit/3ac88c7106e7dcb553bcc794b15f19185928a1c6#diff-2dcb77e833422ee304da348b905cde0b\n//\n\n\nfunction isValidFormattedNationalNumber(formattedNationalNumber, state) {\n  return parseDigits(formattedNationalNumber) === state.getNationalDigits();\n}\n//# sourceMappingURL=AsYouTypeFormatter.complete.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar PatternMatcher = /*#__PURE__*/function () {\n  function PatternMatcher(pattern) {\n    _classCallCheck(this, PatternMatcher);\n\n    this.matchTree = new PatternParser().parse(pattern);\n  }\n\n  _createClass(PatternMatcher, [{\n    key: \"match\",\n    value: function match(string) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          allowOverflow = _ref.allowOverflow;\n\n      if (!string) {\n        throw new Error('String is required');\n      }\n\n      var result = _match(string.split(''), this.matchTree, true);\n\n      if (result && result.match) {\n        delete result.matchedChars;\n      }\n\n      if (result && result.overflow) {\n        if (!allowOverflow) {\n          return;\n        }\n      }\n\n      return result;\n    }\n  }]);\n\n  return PatternMatcher;\n}();\n\nexport { PatternMatcher as default };\n\nfunction _match(characters, tree, last) {\n  if (typeof tree === 'string') {\n    if (last) {\n      // `tree` is always a single character.\n      if (characters.length > tree.length) {\n        return {\n          overflow: true\n        };\n      }\n    }\n\n    var characterString = characters.join('');\n\n    if (tree.indexOf(characterString) === 0) {\n      // `tree` is always a single character.\n      // If `tree.indexOf(characterString) === 0`\n      // then `characters.length === tree.length`.\n\n      /* istanbul ignore else */\n      if (characters.length === tree.length) {\n        return {\n          match: true,\n          matchedChars: characters\n        };\n      } // `tree` is always a single character.\n      // If `tree.indexOf(characterString) === 0`\n      // then `characters.length === tree.length`.\n\n      /* istanbul ignore next */\n\n\n      return {\n        partialMatch: true // matchedChars: characters\n\n      };\n    }\n\n    if (characterString.indexOf(tree) === 0) {\n      return {\n        match: true,\n        matchedChars: characters.slice(0, tree.length)\n      };\n    }\n\n    return;\n  }\n\n  if (Array.isArray(tree)) {\n    var restCharacters = characters.slice();\n    var i = 0;\n\n    while (i < tree.length) {\n      var subtree = tree[i];\n\n      var result = _match(restCharacters, subtree, last && i === tree.length - 1);\n\n      if (!result) {\n        return;\n      } else if (result.overflow) {\n        return result;\n      } else if (result.match) {\n        // Continue with the next subtree with the rest of the characters.\n        restCharacters = restCharacters.slice(result.matchedChars.length);\n\n        if (restCharacters.length === 0) {\n          if (i === tree.length - 1) {\n            return {\n              match: true,\n              matchedChars: characters\n            };\n          } else {\n            return {\n              partialMatch: true // matchedChars: characters\n\n            };\n          }\n        }\n      } else {\n        /* istanbul ignore else */\n        if (result.partialMatch) {\n          return {\n            partialMatch: true // matchedChars: characters\n\n          };\n        } else {\n          throw new Error(\"Unsupported match result:\\n\".concat(JSON.stringify(result, null, 2)));\n        }\n      }\n\n      i++;\n    } // If `last` then overflow has already been checked\n    // by the last element of the `tree` array.\n\n    /* istanbul ignore if */\n\n\n    if (last) {\n      return {\n        overflow: true\n      };\n    }\n\n    return {\n      match: true,\n      matchedChars: characters.slice(0, characters.length - restCharacters.length)\n    };\n  }\n\n  switch (tree.op) {\n    case '|':\n      var partialMatch;\n\n      for (var _iterator = _createForOfIteratorHelperLoose(tree.args), _step; !(_step = _iterator()).done;) {\n        var branch = _step.value;\n\n        var _result = _match(characters, branch, last);\n\n        if (_result) {\n          if (_result.overflow) {\n            return _result;\n          } else if (_result.match) {\n            return {\n              match: true,\n              matchedChars: _result.matchedChars\n            };\n          } else {\n            /* istanbul ignore else */\n            if (_result.partialMatch) {\n              partialMatch = true;\n            } else {\n              throw new Error(\"Unsupported match result:\\n\".concat(JSON.stringify(_result, null, 2)));\n            }\n          }\n        }\n      }\n\n      if (partialMatch) {\n        return {\n          partialMatch: true // matchedChars: ...\n\n        };\n      } // Not even a partial match.\n\n\n      return;\n\n    case '[]':\n      for (var _iterator2 = _createForOfIteratorHelperLoose(tree.args), _step2; !(_step2 = _iterator2()).done;) {\n        var _char = _step2.value;\n\n        if (characters[0] === _char) {\n          if (characters.length === 1) {\n            return {\n              match: true,\n              matchedChars: characters\n            };\n          }\n\n          if (last) {\n            return {\n              overflow: true\n            };\n          }\n\n          return {\n            match: true,\n            matchedChars: [_char]\n          };\n        }\n      } // No character matches.\n\n\n      return;\n\n    /* istanbul ignore next */\n\n    default:\n      throw new Error(\"Unsupported instruction tree: \".concat(tree));\n  }\n}\n\nvar OPERATOR = new RegExp( // any of:\n'(' + // or operator\n'\\\\|' + // or\n'|' + // or group start\n'\\\\(\\\\?\\\\:' + // or\n'|' + // or group end\n'\\\\)' + // or\n'|' + // one-of set start\n'\\\\[' + // or\n'|' + // one-of set end\n'\\\\]' + ')');\nvar ILLEGAL_CHARACTER_REGEXP = /[\\(\\)\\[\\]\\?\\:\\|]/;\n\nvar PatternParser = /*#__PURE__*/function () {\n  function PatternParser() {\n    _classCallCheck(this, PatternParser);\n  }\n\n  _createClass(PatternParser, [{\n    key: \"parse\",\n    value: function parse(pattern) {\n      this.context = [{\n        or: true,\n        instructions: []\n      }];\n      this.parsePattern(pattern);\n\n      if (this.context.length !== 1) {\n        throw new Error('Non-finalized contexts left when pattern parse ended');\n      }\n\n      var _this$context$ = this.context[0],\n          branches = _this$context$.branches,\n          instructions = _this$context$.instructions;\n\n      if (branches) {\n        return [{\n          op: '|',\n          args: branches.concat([instructions])\n        }];\n      }\n      /* istanbul ignore if */\n\n\n      if (instructions.length === 0) {\n        throw new Error('Pattern is required');\n      }\n\n      return instructions;\n    }\n  }, {\n    key: \"startContext\",\n    value: function startContext(context) {\n      this.context.push(context);\n    }\n  }, {\n    key: \"endContext\",\n    value: function endContext() {\n      this.context.pop();\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      return this.context[this.context.length - 1];\n    }\n  }, {\n    key: \"parsePattern\",\n    value: function parsePattern(pattern) {\n      if (!pattern) {\n        throw new Error('Pattern is required');\n      }\n\n      var match = pattern.match(OPERATOR);\n\n      if (!match) {\n        if (ILLEGAL_CHARACTER_REGEXP.test(pattern)) {\n          throw new Error(\"Illegal characters found in a pattern: \".concat(pattern));\n        }\n\n        this.getContext().instructions = this.getContext().instructions.concat(pattern.split(''));\n        return;\n      }\n\n      var operator = match[1];\n      var before = pattern.slice(0, match.index);\n      var rightPart = pattern.slice(match.index + operator.length);\n\n      switch (operator) {\n        case '(?:':\n          if (before) {\n            this.parsePattern(before);\n          }\n\n          this.startContext({\n            or: true,\n            instructions: [],\n            branches: []\n          });\n          break;\n\n        case ')':\n          if (!this.getContext().or) {\n            throw new Error('\")\" operator must be preceded by \"(?:\" operator');\n          }\n\n          if (before) {\n            this.parsePattern(before);\n          }\n\n          if (this.getContext().instructions.length === 0) {\n            throw new Error('No instructions found after \"|\" operator in an \"or\" group');\n          }\n\n          var _this$getContext = this.getContext(),\n              branches = _this$getContext.branches;\n\n          branches.push(this.getContext().instructions);\n          this.endContext();\n          this.getContext().instructions.push({\n            op: '|',\n            args: branches\n          });\n          break;\n\n        case '|':\n          if (!this.getContext().or) {\n            throw new Error('\"|\" operator can only be used inside \"or\" groups');\n          }\n\n          if (before) {\n            this.parsePattern(before);\n          } // The top-level is an implicit \"or\" group, if required.\n\n\n          if (!this.getContext().branches) {\n            // `branches` are not defined only for the root implicit \"or\" operator.\n\n            /* istanbul ignore else */\n            if (this.context.length === 1) {\n              this.getContext().branches = [];\n            } else {\n              throw new Error('\"branches\" not found in an \"or\" group context');\n            }\n          }\n\n          this.getContext().branches.push(this.getContext().instructions);\n          this.getContext().instructions = [];\n          break;\n\n        case '[':\n          if (before) {\n            this.parsePattern(before);\n          }\n\n          this.startContext({\n            oneOfSet: true\n          });\n          break;\n\n        case ']':\n          if (!this.getContext().oneOfSet) {\n            throw new Error('\"]\" operator must be preceded by \"[\" operator');\n          }\n\n          this.endContext();\n          this.getContext().instructions.push({\n            op: '[]',\n            args: parseOneOfSet(before)\n          });\n          break;\n\n        /* istanbul ignore next */\n\n        default:\n          throw new Error(\"Unknown operator: \".concat(operator));\n      }\n\n      if (rightPart) {\n        this.parsePattern(rightPart);\n      }\n    }\n  }]);\n\n  return PatternParser;\n}();\n\nfunction parseOneOfSet(pattern) {\n  var values = [];\n  var i = 0;\n\n  while (i < pattern.length) {\n    if (pattern[i] === '-') {\n      if (i === 0 || i === pattern.length - 1) {\n        throw new Error(\"Couldn't parse a one-of set pattern: \".concat(pattern));\n      }\n\n      var prevValue = pattern[i - 1].charCodeAt(0) + 1;\n      var nextValue = pattern[i + 1].charCodeAt(0) - 1;\n      var value = prevValue;\n\n      while (value <= nextValue) {\n        values.push(String.fromCharCode(value));\n        value++;\n      }\n    } else {\n      values.push(pattern[i]);\n    }\n\n    i++;\n  }\n\n  return values;\n}\n//# sourceMappingURL=AsYouTypeFormatter.PatternMatcher.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport { DIGIT_PLACEHOLDER, countOccurences, repeat, cutAndStripNonPairedParens, closeNonPairedParens, stripNonPairedParens, populateTemplateWithDigits } from './AsYouTypeFormatter.util.js';\nimport formatCompleteNumber, { canFormatCompleteNumber } from './AsYouTypeFormatter.complete.js';\nimport PatternMatcher from './AsYouTypeFormatter.PatternMatcher.js';\nimport parseDigits from './helpers/parseDigits.js';\nexport { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter.util.js';\nimport { FIRST_GROUP_PATTERN } from './helpers/formatNationalNumberUsingFormat.js';\nimport { VALID_PUNCTUATION } from './constants.js';\nimport applyInternationalSeparatorStyle from './helpers/applyInternationalSeparatorStyle.js'; // Used in phone number format template creation.\n// Could be any digit, I guess.\n\nvar DUMMY_DIGIT = '9'; // I don't know why is it exactly `15`\n\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15; // Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\n\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH); // A set of characters that, if found in a national prefix formatting rules, are an indicator to\n// us that we should separate the national prefix from the number when formatting.\n\nvar NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/; // Deprecated: Google has removed some formatting pattern related code from their repo.\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\n// Because this library supports generating custom metadata\n// some users may still be using old metadata so the relevant\n// code seems to stay until some next major version update.\n\nvar SUPPORT_LEGACY_FORMATTING_PATTERNS = true; // A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\n\nvar CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\[([^\\[\\]])*\\]/g;\n}; // Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\n\n\nvar CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\d(?=[^,}][^,}])/g;\n}; // A regular expression that is used to determine if a `format` is\n// suitable to be used in the \"as you type formatter\".\n// A `format` is suitable when the resulting formatted number has\n// the same digits as the user has entered.\n//\n// In the simplest case, that would mean that the format\n// doesn't add any additional digits when formatting a number.\n// Google says that it also shouldn't add \"star\" (`*`) characters,\n// like it does in some Israeli formats.\n// Such basic format would only contain \"valid punctuation\"\n// and \"captured group\" identifiers ($1, $2, etc).\n//\n// An example of a format that adds additional digits:\n//\n// Country: `AR` (Argentina).\n// Format:\n// {\n//    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\n//    \"leading_digits_patterns\": [\"91\"],\n//    \"national_prefix_formatting_rule\": \"0$1\",\n//    \"format\": \"$2 15-$3-$4\",\n//    \"international_format\": \"$1 $2 $3-$4\"\n// }\n//\n// In the format above, the `format` adds `15` to the digits when formatting a number.\n// A sidenote: this format actually is suitable because `national_prefix_for_parsing`\n// has previously removed `15` from a national number, so re-adding `15` in `format`\n// doesn't actually result in any extra digits added to user's input.\n// But verifying that would be a complex procedure, so the code chooses a simpler path:\n// it simply filters out all `format`s that contain anything but \"captured group\" ids.\n//\n// This regular expression is called `ELIGIBLE_FORMAT_PATTERN` in Google's\n// `libphonenumber` code.\n//\n\n\nvar NON_ALTERING_FORMAT_REG_EXP = new RegExp('[' + VALID_PUNCTUATION + ']*' + // Google developers say:\n// \"We require that the first matching group is present in the\n//  output pattern to ensure no data is lost while formatting.\"\n'\\\\$1' + '[' + VALID_PUNCTUATION + ']*' + '(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)*' + '$'); // This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\n\nvar MIN_LEADING_DIGITS_LENGTH = 3;\n\nvar AsYouTypeFormatter = /*#__PURE__*/function () {\n  function AsYouTypeFormatter(_ref) {\n    var state = _ref.state,\n        metadata = _ref.metadata;\n\n    _classCallCheck(this, AsYouTypeFormatter);\n\n    this.metadata = metadata;\n    this.resetFormat();\n  }\n\n  _createClass(AsYouTypeFormatter, [{\n    key: \"resetFormat\",\n    value: function resetFormat() {\n      this.chosenFormat = undefined;\n      this.template = undefined;\n      this.nationalNumberTemplate = undefined;\n      this.populatedNationalNumberTemplate = undefined;\n      this.populatedNationalNumberTemplatePosition = -1;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(numberingPlan, state) {\n      this.resetFormat();\n\n      if (numberingPlan) {\n        this.isNANP = numberingPlan.callingCode() === '1';\n        this.matchingFormats = numberingPlan.formats();\n\n        if (state.nationalSignificantNumber) {\n          this.narrowDownMatchingFormats(state);\n        }\n      } else {\n        this.isNANP = undefined;\n        this.matchingFormats = [];\n      }\n    }\n    /**\r\n     * Formats an updated phone number.\r\n     * @param  {string} nextDigits — Additional phone number digits.\r\n     * @param  {object} state — `AsYouType` state.\r\n     * @return {[string]} Returns undefined if the updated phone number can't be formatted using any of the available formats.\r\n     */\n\n  }, {\n    key: \"format\",\n    value: function format(nextDigits, state) {\n      var _this = this;\n\n      // See if the phone number digits can be formatted as a complete phone number.\n      // If not, use the results from `formatNationalNumberWithNextDigits()`,\n      // which formats based on the chosen formatting pattern.\n      //\n      // Attempting to format complete phone number first is how it's done\n      // in Google's `libphonenumber`, so this library just follows it.\n      // Google's `libphonenumber` code doesn't explain in detail why does it\n      // attempt to format digits as a complete phone number\n      // instead of just going with a previoulsy (or newly) chosen `format`:\n      //\n      // \"Checks to see if there is an exact pattern match for these digits.\n      //  If so, we should use this instead of any other formatting template\n      //  whose leadingDigitsPattern also matches the input.\"\n      //\n      if (canFormatCompleteNumber(state.nationalSignificantNumber, this.metadata)) {\n        for (var _iterator = _createForOfIteratorHelperLoose(this.matchingFormats), _step; !(_step = _iterator()).done;) {\n          var format = _step.value;\n          var formattedCompleteNumber = formatCompleteNumber(state, format, {\n            metadata: this.metadata,\n            shouldTryNationalPrefixFormattingRule: function shouldTryNationalPrefixFormattingRule(format) {\n              return _this.shouldTryNationalPrefixFormattingRule(format, {\n                international: state.international,\n                nationalPrefix: state.nationalPrefix\n              });\n            },\n            getSeparatorAfterNationalPrefix: function getSeparatorAfterNationalPrefix(format) {\n              return _this.getSeparatorAfterNationalPrefix(format);\n            }\n          });\n\n          if (formattedCompleteNumber) {\n            this.resetFormat();\n            this.chosenFormat = format;\n            this.setNationalNumberTemplate(formattedCompleteNumber.replace(/\\d/g, DIGIT_PLACEHOLDER), state);\n            this.populatedNationalNumberTemplate = formattedCompleteNumber; // With a new formatting template, the matched position\n            // using the old template needs to be reset.\n\n            this.populatedNationalNumberTemplatePosition = this.template.lastIndexOf(DIGIT_PLACEHOLDER);\n            return formattedCompleteNumber;\n          }\n        }\n      } // Format the digits as a partial (incomplete) phone number\n      // using the previously chosen formatting pattern (or a newly chosen one).\n\n\n      return this.formatNationalNumberWithNextDigits(nextDigits, state);\n    } // Formats the next phone number digits.\n\n  }, {\n    key: \"formatNationalNumberWithNextDigits\",\n    value: function formatNationalNumberWithNextDigits(nextDigits, state) {\n      var previouslyChosenFormat = this.chosenFormat; // Choose a format from the list of matching ones.\n\n      var newlyChosenFormat = this.chooseFormat(state);\n\n      if (newlyChosenFormat) {\n        if (newlyChosenFormat === previouslyChosenFormat) {\n          // If it can format the next (current) digits\n          // using the previously chosen phone number format\n          // then return the updated formatted number.\n          return this.formatNextNationalNumberDigits(nextDigits);\n        } else {\n          // If a more appropriate phone number format\n          // has been chosen for these \"leading digits\",\n          // then re-format the national phone number part\n          // using the newly selected format.\n          return this.formatNextNationalNumberDigits(state.getNationalDigits());\n        }\n      }\n    }\n  }, {\n    key: \"narrowDownMatchingFormats\",\n    value: function narrowDownMatchingFormats(_ref2) {\n      var _this2 = this;\n\n      var nationalSignificantNumber = _ref2.nationalSignificantNumber,\n          nationalPrefix = _ref2.nationalPrefix,\n          international = _ref2.international;\n      var leadingDigits = nationalSignificantNumber; // \"leading digits\" pattern list starts with a\n      // \"leading digits\" pattern fitting a maximum of 3 leading digits.\n      // So, after a user inputs 3 digits of a national (significant) phone number\n      // this national (significant) number can already be formatted.\n      // The next \"leading digits\" pattern is for 4 leading digits max,\n      // and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n      // This implementation is different from Google's\n      // in that it searches for a fitting format\n      // even if the user has entered less than\n      // `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n      // Because some leading digit patterns already match for a single first digit.\n\n      var leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH;\n\n      if (leadingDigitsPatternIndex < 0) {\n        leadingDigitsPatternIndex = 0;\n      }\n\n      this.matchingFormats = this.matchingFormats.filter(function (format) {\n        return _this2.formatSuits(format, international, nationalPrefix) && _this2.formatMatches(format, leadingDigits, leadingDigitsPatternIndex);\n      }); // If there was a phone number format chosen\n      // and it no longer holds given the new leading digits then reset it.\n      // The test for this `if` condition is marked as:\n      // \"Reset a chosen format when it no longer holds given the new leading digits\".\n      // To construct a valid test case for this one can find a country\n      // in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n      // and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\n      if (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {\n        this.resetFormat();\n      }\n    }\n  }, {\n    key: \"formatSuits\",\n    value: function formatSuits(format, international, nationalPrefix) {\n      // When a prefix before a national (significant) number is\n      // simply a national prefix, then it's parsed as `this.nationalPrefix`.\n      // In more complex cases, a prefix before national (significant) number\n      // could include a national prefix as well as some \"capturing groups\",\n      // and in that case there's no info whether a national prefix has been parsed.\n      // If national prefix is not used when formatting a phone number\n      // using this format, but a national prefix has been entered by the user,\n      // and was extracted, then discard such phone number format.\n      // In Google's \"AsYouType\" formatter code, the equivalent would be this part:\n      // https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L175-L184\n      if (nationalPrefix && !format.usesNationalPrefix() && // !format.domesticCarrierCodeFormattingRule() &&\n      !format.nationalPrefixIsOptionalWhenFormattingInNationalFormat()) {\n        return false;\n      } // If national prefix is mandatory for this phone number format\n      // and there're no guarantees that a national prefix is present in user input\n      // then discard this phone number format as not suitable.\n      // In Google's \"AsYouType\" formatter code, the equivalent would be this part:\n      // https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L185-L193\n\n\n      if (!international && !nationalPrefix && format.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"formatMatches\",\n    value: function formatMatches(format, leadingDigits, leadingDigitsPatternIndex) {\n      var leadingDigitsPatternsCount = format.leadingDigitsPatterns().length; // If this format is not restricted to a certain\n      // leading digits pattern then it fits.\n      // The test case could be found by searching for \"leadingDigitsPatternsCount === 0\".\n\n      if (leadingDigitsPatternsCount === 0) {\n        return true;\n      } // Start narrowing down the list of possible formats based on the leading digits.\n      // (only previously matched formats take part in the narrowing down process)\n      // `leading_digits_patterns` start with 3 digits min\n      // and then go up from there one digit at a time.\n\n\n      leadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1);\n      var leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex]; // Google imposes a requirement on the leading digits\n      // to be minimum 3 digits long in order to be eligible\n      // for checking those with a leading digits pattern.\n      //\n      // Since `leading_digits_patterns` start with 3 digits min,\n      // Google's original `libphonenumber` library only starts\n      // excluding any non-matching formats only when the\n      // national number entered so far is at least 3 digits long,\n      // otherwise format matching would give false negatives.\n      //\n      // For example, when the digits entered so far are `2`\n      // and the leading digits pattern is `21` –\n      // it's quite obvious in this case that the format could be the one\n      // but due to the absence of further digits it would give false negative.\n      //\n      // Also, `leading_digits_patterns` doesn't always correspond to a single\n      // digits count. For example, `60|8` pattern would already match `8`\n      // but the `60` part would require having at least two leading digits,\n      // so the whole pattern would require inputting two digits first in order to\n      // decide on whether it matches the input, even when the input is \"80\".\n      //\n      // This library — `libphonenumber-js` — allows filtering by `leading_digits_patterns`\n      // even when there's only 1 or 2 digits of the national (significant) number.\n      // To do that, it uses a non-strict pattern matcher written specifically for that.\n      //\n\n      if (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {\n        // Before leading digits < 3 matching was implemented:\n        // return true\n        //\n        // After leading digits < 3 matching was implemented:\n        try {\n          return new PatternMatcher(leadingDigitsPattern).match(leadingDigits, {\n            allowOverflow: true\n          }) !== undefined;\n        } catch (error)\n        /* istanbul ignore next */\n        {\n          // There's a slight possibility that there could be some undiscovered bug\n          // in the pattern matcher code. Since the \"leading digits < 3 matching\"\n          // feature is not \"essential\" for operation, it can fall back to the old way\n          // in case of any issues rather than halting the application's execution.\n          console.error(error);\n          return true;\n        }\n      } // If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are\n      // available then use the usual regular expression matching.\n      //\n      // The whole pattern is wrapped in round brackets (`()`) because\n      // the pattern can use \"or\" operator (`|`) at the top level of the pattern.\n      //\n\n\n      return new RegExp(\"^(\".concat(leadingDigitsPattern, \")\")).test(leadingDigits);\n    }\n  }, {\n    key: \"getFormatFormat\",\n    value: function getFormatFormat(format, international) {\n      return international ? format.internationalFormat() : format.format();\n    }\n  }, {\n    key: \"chooseFormat\",\n    value: function chooseFormat(state) {\n      var _this3 = this;\n\n      var _loop = function _loop() {\n        var format = _step2.value;\n\n        // If this format is currently being used\n        // and is still suitable, then stick to it.\n        if (_this3.chosenFormat === format) {\n          return \"break\";\n        } // Sometimes, a formatting rule inserts additional digits in a phone number,\n        // and \"as you type\" formatter can't do that: it should only use the digits\n        // that the user has input.\n        //\n        // For example, in Argentina, there's a format for mobile phone numbers:\n        //\n        // {\n        //    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\n        //    \"leading_digits_patterns\": [\"91\"],\n        //    \"national_prefix_formatting_rule\": \"0$1\",\n        //    \"format\": \"$2 15-$3-$4\",\n        //    \"international_format\": \"$1 $2 $3-$4\"\n        // }\n        //\n        // In that format, `international_format` is used instead of `format`\n        // because `format` inserts `15` in the formatted number,\n        // and `AsYouType` formatter should only use the digits\n        // the user has actually input, without adding any extra digits.\n        // In this case, it wouldn't make a difference, because the `15`\n        // is first stripped when applying `national_prefix_for_parsing`\n        // and then re-added when using `format`, so in reality it doesn't\n        // add any new digits to the number, but to detect that, the code\n        // would have to be more complex: it would have to try formatting\n        // the digits using the format and then see if any digits have\n        // actually been added or removed, and then, every time a new digit\n        // is input, it should re-check whether the chosen format doesn't\n        // alter the digits.\n        //\n        // Google's code doesn't go that far, and so does this library:\n        // it simply requires that a `format` doesn't add any additonal\n        // digits to user's input.\n        //\n        // Also, people in general should move from inputting phone numbers\n        // in national format (possibly with national prefixes)\n        // and use international phone number format instead:\n        // it's a logical thing in the modern age of mobile phones,\n        // globalization and the internet.\n        //\n\n        /* istanbul ignore if */\n\n\n        if (!NON_ALTERING_FORMAT_REG_EXP.test(_this3.getFormatFormat(format, state.international))) {\n          return \"continue\";\n        }\n\n        if (!_this3.createTemplateForFormat(format, state)) {\n          // Remove the format if it can't generate a template.\n          _this3.matchingFormats = _this3.matchingFormats.filter(function (_) {\n            return _ !== format;\n          });\n          return \"continue\";\n        }\n\n        _this3.chosenFormat = format;\n        return \"break\";\n      };\n\n      // When there are multiple available formats, the formatter uses the first\n      // format where a formatting template could be created.\n      //\n      // For some weird reason, `istanbul` says \"else path not taken\"\n      // for the `for of` line below. Supposedly that means that\n      // the loop doesn't ever go over the last element in the list.\n      // That's true because there always is `this.chosenFormat`\n      // when `this.matchingFormats` is non-empty.\n      // And, for some weird reason, it doesn't think that the case\n      // with empty `this.matchingFormats` qualifies for a valid \"else\" path.\n      // So simply muting this `istanbul` warning.\n      // It doesn't skip the contents of the `for of` loop,\n      // it just skips the `for of` line.\n      //\n\n      /* istanbul ignore next */\n      for (var _iterator2 = _createForOfIteratorHelperLoose(this.matchingFormats.slice()), _step2; !(_step2 = _iterator2()).done;) {\n        var _ret = _loop();\n\n        if (_ret === \"break\") break;\n        if (_ret === \"continue\") continue;\n      }\n\n      if (!this.chosenFormat) {\n        // No format matches the national (significant) phone number.\n        this.resetFormat();\n      }\n\n      return this.chosenFormat;\n    }\n  }, {\n    key: \"createTemplateForFormat\",\n    value: function createTemplateForFormat(format, state) {\n      // The formatter doesn't format numbers when numberPattern contains '|', e.g.\n      // (20|3)\\d{4}. In those cases we quickly return.\n      // (Though there's no such format in current metadata)\n\n      /* istanbul ignore if */\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\n        return;\n      } // Get formatting template for this phone number format\n\n\n      var template = this.getTemplateForFormat(format, state); // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (template) {\n        this.setNationalNumberTemplate(template, state);\n        return true;\n      }\n    }\n  }, {\n    key: \"getSeparatorAfterNationalPrefix\",\n    value: function getSeparatorAfterNationalPrefix(format) {\n      // `US` metadata doesn't have a `national_prefix_formatting_rule`,\n      // so the `if` condition below doesn't apply to `US`,\n      // but in reality there shoudl be a separator\n      // between a national prefix and a national (significant) number.\n      // So `US` national prefix separator is a \"special\" \"hardcoded\" case.\n      if (this.isNANP) {\n        return ' ';\n      } // If a `format` has a `national_prefix_formatting_rule`\n      // and that rule has a separator after a national prefix,\n      // then it means that there should be a separator\n      // between a national prefix and a national (significant) number.\n\n\n      if (format && format.nationalPrefixFormattingRule() && NATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {\n        return ' ';\n      } // At this point, there seems to be no clear evidence that\n      // there should be a separator between a national prefix\n      // and a national (significant) number. So don't insert one.\n\n\n      return '';\n    }\n  }, {\n    key: \"getInternationalPrefixBeforeCountryCallingCode\",\n    value: function getInternationalPrefixBeforeCountryCallingCode(_ref3, options) {\n      var IDDPrefix = _ref3.IDDPrefix,\n          missingPlus = _ref3.missingPlus;\n\n      if (IDDPrefix) {\n        return options && options.spacing === false ? IDDPrefix : IDDPrefix + ' ';\n      }\n\n      if (missingPlus) {\n        return '';\n      }\n\n      return '+';\n    }\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate(state) {\n      if (!this.template) {\n        return;\n      } // `this.template` holds the template for a \"complete\" phone number.\n      // The currently entered phone number is most likely not \"complete\",\n      // so trim all non-populated digits.\n\n\n      var index = -1;\n      var i = 0;\n      var internationalPrefix = state.international ? this.getInternationalPrefixBeforeCountryCallingCode(state, {\n        spacing: false\n      }) : '';\n\n      while (i < internationalPrefix.length + state.getDigitsWithoutInternationalPrefix().length) {\n        index = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);\n        i++;\n      }\n\n      return cutAndStripNonPairedParens(this.template, index + 1);\n    }\n  }, {\n    key: \"setNationalNumberTemplate\",\n    value: function setNationalNumberTemplate(template, state) {\n      this.nationalNumberTemplate = template;\n      this.populatedNationalNumberTemplate = template; // With a new formatting template, the matched position\n      // using the old template needs to be reset.\n\n      this.populatedNationalNumberTemplatePosition = -1; // For convenience, the public `.template` property\n      // contains the whole international number\n      // if the phone number being input is international:\n      // 'x' for the '+' sign, 'x'es for the country phone code,\n      // a spacebar and then the template for the formatted national number.\n\n      if (state.international) {\n        this.template = this.getInternationalPrefixBeforeCountryCallingCode(state).replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER) + repeat(DIGIT_PLACEHOLDER, state.callingCode.length) + ' ' + template;\n      } else {\n        this.template = template;\n      }\n    }\n    /**\r\n     * Generates formatting template for a national phone number,\r\n     * optionally containing a national prefix, for a format.\r\n     * @param  {Format} format\r\n     * @param  {string} nationalPrefix\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getTemplateForFormat\",\n    value: function getTemplateForFormat(format, _ref4) {\n      var nationalSignificantNumber = _ref4.nationalSignificantNumber,\n          international = _ref4.international,\n          nationalPrefix = _ref4.nationalPrefix,\n          complexPrefixBeforeNationalSignificantNumber = _ref4.complexPrefixBeforeNationalSignificantNumber;\n      var pattern = format.pattern();\n      /* istanbul ignore else */\n\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\n        pattern = pattern // Replace anything in the form of [..] with \\d\n        .replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d') // Replace any standalone digit (not the one in `{}`) with \\d\n        .replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d');\n      } // Generate a dummy national number (consisting of `9`s)\n      // that fits this format's `pattern`.\n      //\n      // This match will always succeed,\n      // because the \"longest dummy phone number\"\n      // has enough length to accomodate any possible\n      // national phone number format pattern.\n      //\n\n\n      var digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0]; // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (nationalSignificantNumber.length > digits.length) {\n        return;\n      } // Get a formatting template which can be used to efficiently format\n      // a partial number where digits are added one by one.\n      // Below `strictPattern` is used for the\n      // regular expression (with `^` and `$`).\n      // This wasn't originally in Google's `libphonenumber`\n      // and I guess they don't really need it\n      // because they're not using \"templates\" to format phone numbers\n      // but I added `strictPattern` after encountering\n      // South Korean phone number formatting bug.\n      //\n      // Non-strict regular expression bug demonstration:\n      //\n      // this.nationalSignificantNumber : `111111111` (9 digits)\n      //\n      // pattern : (\\d{2})(\\d{3,4})(\\d{4})\n      // format : `$1 $2 $3`\n      // digits : `9999999999` (10 digits)\n      //\n      // '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n      //\n      // template : xx xxxx xxxx\n      //\n      // But the correct template in this case is `xx xxx xxxx`.\n      // The template was generated incorrectly because of the\n      // `{3,4}` variability in the `pattern`.\n      //\n      // The fix is, if `this.nationalSignificantNumber` has already sufficient length\n      // to satisfy the `pattern` completely then `this.nationalSignificantNumber`\n      // is used instead of `digits`.\n\n\n      var strictPattern = new RegExp('^' + pattern + '$');\n      var nationalNumberDummyDigits = nationalSignificantNumber.replace(/\\d/g, DUMMY_DIGIT); // If `this.nationalSignificantNumber` has already sufficient length\n      // to satisfy the `pattern` completely then use it\n      // instead of `digits`.\n\n      if (strictPattern.test(nationalNumberDummyDigits)) {\n        digits = nationalNumberDummyDigits;\n      }\n\n      var numberFormat = this.getFormatFormat(format, international);\n      var nationalPrefixIncludedInTemplate; // If a user did input a national prefix (and that's guaranteed),\n      // and if a `format` does have a national prefix formatting rule,\n      // then see if that national prefix formatting rule\n      // prepends exactly the same national prefix the user has input.\n      // If that's the case, then use the `format` with the national prefix formatting rule.\n      // Otherwise, use  the `format` without the national prefix formatting rule,\n      // and prepend a national prefix manually to it.\n\n      if (this.shouldTryNationalPrefixFormattingRule(format, {\n        international: international,\n        nationalPrefix: nationalPrefix\n      })) {\n        var numberFormatWithNationalPrefix = numberFormat.replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()); // If `national_prefix_formatting_rule` of a `format` simply prepends\n        // national prefix at the start of a national (significant) number,\n        // then such formatting can be used with `AsYouType` formatter.\n        // There seems to be no `else` case: everywhere in metadata,\n        // national prefix formatting rule is national prefix + $1,\n        // or `($1)`, in which case such format isn't even considered\n        // when the user has input a national prefix.\n\n        /* istanbul ignore else */\n\n        if (parseDigits(format.nationalPrefixFormattingRule()) === (nationalPrefix || '') + parseDigits('$1')) {\n          numberFormat = numberFormatWithNationalPrefix;\n          nationalPrefixIncludedInTemplate = true; // Replace all digits of the national prefix in the formatting template\n          // with `DIGIT_PLACEHOLDER`s.\n\n          if (nationalPrefix) {\n            var i = nationalPrefix.length;\n\n            while (i > 0) {\n              numberFormat = numberFormat.replace(/\\d/, DIGIT_PLACEHOLDER);\n              i--;\n            }\n          }\n        }\n      } // Generate formatting template for this phone number format.\n\n\n      var template = digits // Format the dummy phone number according to the format.\n      .replace(new RegExp(pattern), numberFormat) // Replace each dummy digit with a DIGIT_PLACEHOLDER.\n      .replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER); // If a prefix of a national (significant) number is not as simple\n      // as just a basic national prefix, then just prepend such prefix\n      // before the national (significant) number, optionally spacing\n      // the two with a whitespace.\n\n      if (!nationalPrefixIncludedInTemplate) {\n        if (complexPrefixBeforeNationalSignificantNumber) {\n          // Prepend the prefix to the template manually.\n          template = repeat(DIGIT_PLACEHOLDER, complexPrefixBeforeNationalSignificantNumber.length) + ' ' + template;\n        } else if (nationalPrefix) {\n          // Prepend national prefix to the template manually.\n          template = repeat(DIGIT_PLACEHOLDER, nationalPrefix.length) + this.getSeparatorAfterNationalPrefix(format) + template;\n        }\n      }\n\n      if (international) {\n        template = applyInternationalSeparatorStyle(template);\n      }\n\n      return template;\n    }\n  }, {\n    key: \"formatNextNationalNumberDigits\",\n    value: function formatNextNationalNumberDigits(digits) {\n      var result = populateTemplateWithDigits(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition, digits);\n\n      if (!result) {\n        // Reset the format.\n        this.resetFormat();\n        return;\n      }\n\n      this.populatedNationalNumberTemplate = result[0];\n      this.populatedNationalNumberTemplatePosition = result[1]; // Return the formatted phone number so far.\n\n      return cutAndStripNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1); // The old way which was good for `input-format` but is not so good\n      // for `react-phone-number-input`'s default input (`InputBasic`).\n      // return closeNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\n      // \t.replace(new RegExp(DIGIT_PLACEHOLDER, 'g'), ' ')\n    }\n  }, {\n    key: \"shouldTryNationalPrefixFormattingRule\",\n    value: function shouldTryNationalPrefixFormattingRule(format, _ref5) {\n      var international = _ref5.international,\n          nationalPrefix = _ref5.nationalPrefix;\n\n      if (format.nationalPrefixFormattingRule()) {\n        // In some countries, `national_prefix_formatting_rule` is `($1)`,\n        // so it applies even if the user hasn't input a national prefix.\n        // `format.usesNationalPrefix()` detects such cases.\n        var usesNationalPrefix = format.usesNationalPrefix();\n\n        if (usesNationalPrefix && nationalPrefix || !usesNationalPrefix && !international) {\n          return true;\n        }\n      }\n    }\n  }]);\n\n  return AsYouTypeFormatter;\n}();\n\nexport { AsYouTypeFormatter as default };\n//# sourceMappingURL=AsYouTypeFormatter.js.map","function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport _extractCountryCallingCode from './helpers/extractCountryCallingCode.js';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js';\nimport extractNationalNumberFromPossiblyIncompleteNumber from './helpers/extractNationalNumberFromPossiblyIncompleteNumber.js';\nimport stripIddPrefix from './helpers/stripIddPrefix.js';\nimport parseDigits from './helpers/parseDigits.js';\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants.js';\nvar VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART = '[' + VALID_PUNCTUATION + VALID_DIGITS + ']+';\nvar VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART + '$', 'i');\nvar VALID_FORMATTED_PHONE_NUMBER_PART = '(?:' + '[' + PLUS_CHARS + ']' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*' + '|' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']+' + ')';\nvar AFTER_PHONE_NUMBER_DIGITS_END_PATTERN = new RegExp('[^' + VALID_PUNCTUATION + VALID_DIGITS + ']+' + '.*' + '$'); // Tests whether `national_prefix_for_parsing` could match\n// different national prefixes.\n// Matches anything that's not a digit or a square bracket.\n\nvar COMPLEX_NATIONAL_PREFIX = /[^\\d\\[\\]]/;\n\nvar AsYouTypeParser = /*#__PURE__*/function () {\n  function AsYouTypeParser(_ref) {\n    var defaultCountry = _ref.defaultCountry,\n        defaultCallingCode = _ref.defaultCallingCode,\n        metadata = _ref.metadata,\n        onNationalSignificantNumberChange = _ref.onNationalSignificantNumberChange;\n\n    _classCallCheck(this, AsYouTypeParser);\n\n    this.defaultCountry = defaultCountry;\n    this.defaultCallingCode = defaultCallingCode;\n    this.metadata = metadata;\n    this.onNationalSignificantNumberChange = onNationalSignificantNumberChange;\n  }\n\n  _createClass(AsYouTypeParser, [{\n    key: \"input\",\n    value: function input(text, state) {\n      var _extractFormattedDigi = extractFormattedDigitsAndPlus(text),\n          _extractFormattedDigi2 = _slicedToArray(_extractFormattedDigi, 2),\n          formattedDigits = _extractFormattedDigi2[0],\n          hasPlus = _extractFormattedDigi2[1];\n\n      var digits = parseDigits(formattedDigits); // Checks for a special case: just a leading `+` has been entered.\n\n      var justLeadingPlus;\n\n      if (hasPlus) {\n        if (!state.digits) {\n          state.startInternationalNumber();\n\n          if (!digits) {\n            justLeadingPlus = true;\n          }\n        }\n      }\n\n      if (digits) {\n        this.inputDigits(digits, state);\n      }\n\n      return {\n        digits: digits,\n        justLeadingPlus: justLeadingPlus\n      };\n    }\n    /**\r\n     * Inputs \"next\" phone number digits.\r\n     * @param  {string} digits\r\n     * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means \"don't format the national phone number at this stage\".\r\n     */\n\n  }, {\n    key: \"inputDigits\",\n    value: function inputDigits(nextDigits, state) {\n      var digits = state.digits;\n      var hasReceivedThreeLeadingDigits = digits.length < 3 && digits.length + nextDigits.length >= 3; // Append phone number digits.\n\n      state.appendDigits(nextDigits); // Attempt to extract IDD prefix:\n      // Some users input their phone number in international format,\n      // but in an \"out-of-country\" dialing format instead of using the leading `+`.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/185\n      // Detect such numbers as soon as there're at least 3 digits.\n      // Google's library attempts to extract IDD prefix at 3 digits,\n      // so this library just copies that behavior.\n      // I guess that's because the most commot IDD prefixes are\n      // `00` (Europe) and `011` (US).\n      // There exist really long IDD prefixes too:\n      // for example, in Australia the default IDD prefix is `0011`,\n      // and it could even be as long as `14880011`.\n      // An IDD prefix is extracted here, and then every time when\n      // there's a new digit and the number couldn't be formatted.\n\n      if (hasReceivedThreeLeadingDigits) {\n        this.extractIddPrefix(state);\n      }\n\n      if (this.isWaitingForCountryCallingCode(state)) {\n        if (!this.extractCountryCallingCode(state)) {\n          return;\n        }\n      } else {\n        state.appendNationalSignificantNumberDigits(nextDigits);\n      } // If a phone number is being input in international format,\n      // then it's not valid for it to have a national prefix.\n      // Still, some people incorrectly input such numbers with a national prefix.\n      // In such cases, only attempt to strip a national prefix if the number becomes too long.\n      // (but that is done later, not here)\n\n\n      if (!state.international) {\n        if (!this.hasExtractedNationalSignificantNumber) {\n          this.extractNationalSignificantNumber(state.getNationalDigits(), function (stateUpdate) {\n            return state.update(stateUpdate);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"isWaitingForCountryCallingCode\",\n    value: function isWaitingForCountryCallingCode(_ref2) {\n      var international = _ref2.international,\n          callingCode = _ref2.callingCode;\n      return international && !callingCode;\n    } // Extracts a country calling code from a number\n    // being entered in internatonal format.\n\n  }, {\n    key: \"extractCountryCallingCode\",\n    value: function extractCountryCallingCode(state) {\n      var _extractCountryCallin = _extractCountryCallingCode('+' + state.getDigitsWithoutInternationalPrefix(), this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),\n          countryCallingCode = _extractCountryCallin.countryCallingCode,\n          number = _extractCountryCallin.number;\n\n      if (countryCallingCode) {\n        state.setCallingCode(countryCallingCode);\n        state.update({\n          nationalSignificantNumber: number\n        });\n        return true;\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(numberingPlan) {\n      if (numberingPlan) {\n        this.hasSelectedNumberingPlan = true;\n\n        var nationalPrefixForParsing = numberingPlan._nationalPrefixForParsing();\n\n        this.couldPossiblyExtractAnotherNationalSignificantNumber = nationalPrefixForParsing && COMPLEX_NATIONAL_PREFIX.test(nationalPrefixForParsing);\n      } else {\n        this.hasSelectedNumberingPlan = undefined;\n        this.couldPossiblyExtractAnotherNationalSignificantNumber = undefined;\n      }\n    }\n    /**\r\n     * Extracts a national (significant) number from user input.\r\n     * Google's library is different in that it only applies `national_prefix_for_parsing`\r\n     * and doesn't apply `national_prefix_transform_rule` after that.\r\n     * https://github.com/google/libphonenumber/blob/a3d70b0487875475e6ad659af404943211d26456/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L539\r\n     * @return {boolean} [extracted]\r\n     */\n\n  }, {\n    key: \"extractNationalSignificantNumber\",\n    value: function extractNationalSignificantNumber(nationalDigits, setState) {\n      if (!this.hasSelectedNumberingPlan) {\n        return;\n      }\n\n      var _extractNationalNumbe = extractNationalNumberFromPossiblyIncompleteNumber(nationalDigits, this.metadata),\n          nationalPrefix = _extractNationalNumbe.nationalPrefix,\n          nationalNumber = _extractNationalNumbe.nationalNumber,\n          carrierCode = _extractNationalNumbe.carrierCode;\n\n      if (nationalNumber === nationalDigits) {\n        return;\n      }\n\n      this.onExtractedNationalNumber(nationalPrefix, carrierCode, nationalNumber, nationalDigits, setState);\n      return true;\n    }\n    /**\r\n     * In Google's code this function is called \"attempt to extract longer NDD\".\r\n     * \"Some national prefixes are a substring of others\", they say.\r\n     * @return {boolean} [result] — Returns `true` if extracting a national prefix produced different results from what they were.\r\n     */\n\n  }, {\n    key: \"extractAnotherNationalSignificantNumber\",\n    value: function extractAnotherNationalSignificantNumber(nationalDigits, prevNationalSignificantNumber, setState) {\n      if (!this.hasExtractedNationalSignificantNumber) {\n        return this.extractNationalSignificantNumber(nationalDigits, setState);\n      }\n\n      if (!this.couldPossiblyExtractAnotherNationalSignificantNumber) {\n        return;\n      }\n\n      var _extractNationalNumbe2 = extractNationalNumberFromPossiblyIncompleteNumber(nationalDigits, this.metadata),\n          nationalPrefix = _extractNationalNumbe2.nationalPrefix,\n          nationalNumber = _extractNationalNumbe2.nationalNumber,\n          carrierCode = _extractNationalNumbe2.carrierCode; // If a national prefix has been extracted previously,\n      // then it's always extracted as additional digits are added.\n      // That's assuming `extractNationalNumberFromPossiblyIncompleteNumber()`\n      // doesn't do anything different from what it currently does.\n      // So, just in case, here's this check, though it doesn't occur.\n\n      /* istanbul ignore if */\n\n\n      if (nationalNumber === prevNationalSignificantNumber) {\n        return;\n      }\n\n      this.onExtractedNationalNumber(nationalPrefix, carrierCode, nationalNumber, nationalDigits, setState);\n      return true;\n    }\n  }, {\n    key: \"onExtractedNationalNumber\",\n    value: function onExtractedNationalNumber(nationalPrefix, carrierCode, nationalSignificantNumber, nationalDigits, setState) {\n      var complexPrefixBeforeNationalSignificantNumber;\n      var nationalSignificantNumberMatchesInput; // This check also works with empty `this.nationalSignificantNumber`.\n\n      var nationalSignificantNumberIndex = nationalDigits.lastIndexOf(nationalSignificantNumber); // If the extracted national (significant) number is the\n      // last substring of the `digits`, then it means that it hasn't been altered:\n      // no digits have been removed from the national (significant) number\n      // while applying `national_prefix_transform_rule`.\n      // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\n\n      if (nationalSignificantNumberIndex >= 0 && nationalSignificantNumberIndex === nationalDigits.length - nationalSignificantNumber.length) {\n        nationalSignificantNumberMatchesInput = true; // If a prefix of a national (significant) number is not as simple\n        // as just a basic national prefix, then such prefix is stored in\n        // `this.complexPrefixBeforeNationalSignificantNumber` property and will be\n        // prepended \"as is\" to the national (significant) number to produce\n        // a formatted result.\n\n        var prefixBeforeNationalNumber = nationalDigits.slice(0, nationalSignificantNumberIndex); // `prefixBeforeNationalNumber` is always non-empty,\n        // because `onExtractedNationalNumber()` isn't called\n        // when a national (significant) number hasn't been actually \"extracted\":\n        // when a national (significant) number is equal to the national part of `digits`,\n        // then `onExtractedNationalNumber()` doesn't get called.\n\n        if (prefixBeforeNationalNumber !== nationalPrefix) {\n          complexPrefixBeforeNationalSignificantNumber = prefixBeforeNationalNumber;\n        }\n      }\n\n      setState({\n        nationalPrefix: nationalPrefix,\n        carrierCode: carrierCode,\n        nationalSignificantNumber: nationalSignificantNumber,\n        nationalSignificantNumberMatchesInput: nationalSignificantNumberMatchesInput,\n        complexPrefixBeforeNationalSignificantNumber: complexPrefixBeforeNationalSignificantNumber\n      }); // `onExtractedNationalNumber()` is only called when\n      // the national (significant) number actually did change.\n\n      this.hasExtractedNationalSignificantNumber = true;\n      this.onNationalSignificantNumberChange();\n    }\n  }, {\n    key: \"reExtractNationalSignificantNumber\",\n    value: function reExtractNationalSignificantNumber(state) {\n      // Attempt to extract a national prefix.\n      //\n      // Some people incorrectly input national prefix\n      // in an international phone number.\n      // For example, some people write British phone numbers as `+44(0)...`.\n      //\n      // Also, in some rare cases, it is valid for a national prefix\n      // to be a part of an international phone number.\n      // For example, mobile phone numbers in Mexico are supposed to be\n      // dialled internationally using a `1` national prefix,\n      // so the national prefix will be part of an international number.\n      //\n      // Quote from:\n      // https://www.mexperience.com/dialing-cell-phones-in-mexico/\n      //\n      // \"Dialing a Mexican cell phone from abroad\n      // When you are calling a cell phone number in Mexico from outside Mexico,\n      // it’s necessary to dial an additional “1” after Mexico’s country code\n      // (which is “52”) and before the area code.\n      // You also ignore the 045, and simply dial the area code and the\n      // cell phone’s number.\n      //\n      // If you don’t add the “1”, you’ll receive a recorded announcement\n      // asking you to redial using it.\n      //\n      // For example, if you are calling from the USA to a cell phone\n      // in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.\n      // (Note that this is different to calling a land line in Mexico City\n      // from abroad, where the number dialed would be +52 – 55 – 1234 5678)\".\n      //\n      // Google's demo output:\n      // https://libphonenumber.appspot.com/phonenumberparser?number=%2b5215512345678&country=MX\n      //\n      if (this.extractAnotherNationalSignificantNumber(state.getNationalDigits(), state.nationalSignificantNumber, function (stateUpdate) {\n        return state.update(stateUpdate);\n      })) {\n        return true;\n      } // If no format matches the phone number, then it could be\n      // \"a really long IDD\" (quote from a comment in Google's library).\n      // An IDD prefix is first extracted when the user has entered at least 3 digits,\n      // and then here — every time when there's a new digit and the number\n      // couldn't be formatted.\n      // For example, in Australia the default IDD prefix is `0011`,\n      // and it could even be as long as `14880011`.\n      //\n      // Could also check `!hasReceivedThreeLeadingDigits` here\n      // to filter out the case when this check duplicates the one\n      // already performed when there're 3 leading digits,\n      // but it's not a big deal, and in most cases there\n      // will be a suitable `format` when there're 3 leading digits.\n      //\n\n\n      if (this.extractIddPrefix(state)) {\n        this.extractCallingCodeAndNationalSignificantNumber(state);\n        return true;\n      } // Google's AsYouType formatter supports sort of an \"autocorrection\" feature\n      // when it \"autocorrects\" numbers that have been input for a country\n      // with that country's calling code.\n      // Such \"autocorrection\" feature looks weird, but different people have been requesting it:\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      // https://github.com/catamphetamine/libphonenumber-js/issues/375\n      // https://github.com/catamphetamine/libphonenumber-js/issues/316\n\n\n      if (this.fixMissingPlus(state)) {\n        this.extractCallingCodeAndNationalSignificantNumber(state);\n        return true;\n      }\n    }\n  }, {\n    key: \"extractIddPrefix\",\n    value: function extractIddPrefix(state) {\n      // An IDD prefix can't be present in a number written with a `+`.\n      // Also, don't re-extract an IDD prefix if has already been extracted.\n      var international = state.international,\n          IDDPrefix = state.IDDPrefix,\n          digits = state.digits,\n          nationalSignificantNumber = state.nationalSignificantNumber;\n\n      if (international || IDDPrefix) {\n        return;\n      } // Some users input their phone number in \"out-of-country\"\n      // dialing format instead of using the leading `+`.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/185\n      // Detect such numbers.\n\n\n      var numberWithoutIDD = stripIddPrefix(digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata);\n\n      if (numberWithoutIDD !== undefined && numberWithoutIDD !== digits) {\n        // If an IDD prefix was stripped then convert the IDD-prefixed number\n        // to international number for subsequent parsing.\n        state.update({\n          IDDPrefix: digits.slice(0, digits.length - numberWithoutIDD.length)\n        });\n        this.startInternationalNumber(state);\n        return true;\n      }\n    }\n  }, {\n    key: \"fixMissingPlus\",\n    value: function fixMissingPlus(state) {\n      if (!state.international) {\n        var _extractCountryCallin2 = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(state.digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),\n            newCallingCode = _extractCountryCallin2.countryCallingCode,\n            number = _extractCountryCallin2.number;\n\n        if (newCallingCode) {\n          state.update({\n            missingPlus: true\n          });\n          this.startInternationalNumber(state);\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"startInternationalNumber\",\n    value: function startInternationalNumber(state) {\n      state.startInternationalNumber(); // If a national (significant) number has been extracted before, reset it.\n\n      if (state.nationalSignificantNumber) {\n        state.resetNationalSignificantNumber();\n        this.onNationalSignificantNumberChange();\n        this.hasExtractedNationalSignificantNumber = undefined;\n      }\n    }\n  }, {\n    key: \"extractCallingCodeAndNationalSignificantNumber\",\n    value: function extractCallingCodeAndNationalSignificantNumber(state) {\n      if (this.extractCountryCallingCode(state)) {\n        // `this.extractCallingCode()` is currently called when the number\n        // couldn't be formatted during the standard procedure.\n        // Normally, the national prefix would be re-extracted\n        // for an international number if such number couldn't be formatted,\n        // but since it's already not able to be formatted,\n        // there won't be yet another retry, so also extract national prefix here.\n        this.extractNationalSignificantNumber(state.getNationalDigits(), function (stateUpdate) {\n          return state.update(stateUpdate);\n        });\n      }\n    }\n  }]);\n\n  return AsYouTypeParser;\n}();\n/**\r\n * Extracts formatted phone number from text (if there's any).\r\n * @param  {string} text\r\n * @return {string} [formattedPhoneNumber]\r\n */\n\n\nexport { AsYouTypeParser as default };\n\nfunction extractFormattedPhoneNumber(text) {\n  // Attempt to extract a possible number from the string passed in.\n  var startsAt = text.search(VALID_FORMATTED_PHONE_NUMBER_PART);\n\n  if (startsAt < 0) {\n    return;\n  } // Trim everything to the left of the phone number.\n\n\n  text = text.slice(startsAt); // Trim the `+`.\n\n  var hasPlus;\n\n  if (text[0] === '+') {\n    hasPlus = true;\n    text = text.slice('+'.length);\n  } // Trim everything to the right of the phone number.\n\n\n  text = text.replace(AFTER_PHONE_NUMBER_DIGITS_END_PATTERN, ''); // Re-add the previously trimmed `+`.\n\n  if (hasPlus) {\n    text = '+' + text;\n  }\n\n  return text;\n}\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\n\n\nfunction _extractFormattedDigitsAndPlus(text) {\n  // Extract a formatted phone number part from text.\n  var extractedNumber = extractFormattedPhoneNumber(text) || ''; // Trim a `+`.\n\n  if (extractedNumber[0] === '+') {\n    return [extractedNumber.slice('+'.length), true];\n  }\n\n  return [extractedNumber];\n}\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\n\n\nexport function extractFormattedDigitsAndPlus(text) {\n  var _extractFormattedDigi3 = _extractFormattedDigitsAndPlus(text),\n      _extractFormattedDigi4 = _slicedToArray(_extractFormattedDigi3, 2),\n      formattedDigits = _extractFormattedDigi4[0],\n      hasPlus = _extractFormattedDigi4[1]; // If the extracted phone number part\n  // can possibly be a part of some valid phone number\n  // then parse phone number characters from a formatted phone number.\n\n\n  if (!VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN.test(formattedDigits)) {\n    formattedDigits = '';\n  }\n\n  return [formattedDigits, hasPlus];\n}\n//# sourceMappingURL=AsYouTypeParser.js.map","function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport Metadata from './metadata.js';\nimport PhoneNumber from './PhoneNumber.js';\nimport AsYouTypeState from './AsYouTypeState.js';\nimport AsYouTypeFormatter, { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter.js';\nimport AsYouTypeParser, { extractFormattedDigitsAndPlus } from './AsYouTypeParser.js';\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar AsYouType = /*#__PURE__*/function () {\n  /**\r\n   * @param {(string|object)?} [optionsOrDefaultCountry] - The default country used for parsing non-international phone numbers. Can also be an `options` object.\r\n   * @param {Object} metadata\r\n   */\n  function AsYouType(optionsOrDefaultCountry, metadata) {\n    _classCallCheck(this, AsYouType);\n\n    this.metadata = new Metadata(metadata);\n\n    var _this$getCountryAndCa = this.getCountryAndCallingCode(optionsOrDefaultCountry),\n        _this$getCountryAndCa2 = _slicedToArray(_this$getCountryAndCa, 2),\n        defaultCountry = _this$getCountryAndCa2[0],\n        defaultCallingCode = _this$getCountryAndCa2[1];\n\n    this.defaultCountry = defaultCountry;\n    this.defaultCallingCode = defaultCallingCode;\n    this.reset();\n  }\n\n  _createClass(AsYouType, [{\n    key: \"getCountryAndCallingCode\",\n    value: function getCountryAndCallingCode(optionsOrDefaultCountry) {\n      // Set `defaultCountry` and `defaultCallingCode` options.\n      var defaultCountry;\n      var defaultCallingCode; // Turns out `null` also has type \"object\". Weird.\n\n      if (optionsOrDefaultCountry) {\n        if (_typeof(optionsOrDefaultCountry) === 'object') {\n          defaultCountry = optionsOrDefaultCountry.defaultCountry;\n          defaultCallingCode = optionsOrDefaultCountry.defaultCallingCode;\n        } else {\n          defaultCountry = optionsOrDefaultCountry;\n        }\n      }\n\n      if (defaultCountry && !this.metadata.hasCountry(defaultCountry)) {\n        defaultCountry = undefined;\n      }\n\n      if (defaultCallingCode) {\n        /* istanbul ignore if */\n        if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n          if (this.metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n            defaultCountry = '001';\n          }\n        }\n      }\n\n      return [defaultCountry, defaultCallingCode];\n    }\n    /**\r\n     * Inputs \"next\" phone number characters.\r\n     * @param  {string} text\r\n     * @return {string} Formatted phone number characters that have been input so far.\r\n     */\n\n  }, {\n    key: \"input\",\n    value: function input(text) {\n      var _this$parser$input = this.parser.input(text, this.state),\n          digits = _this$parser$input.digits,\n          justLeadingPlus = _this$parser$input.justLeadingPlus;\n\n      if (justLeadingPlus) {\n        this.formattedOutput = '+';\n      } else if (digits) {\n        this.determineTheCountryIfNeeded(); // Match the available formats by the currently available leading digits.\n\n        if (this.state.nationalSignificantNumber) {\n          this.formatter.narrowDownMatchingFormats(this.state);\n        }\n\n        var formattedNationalNumber;\n\n        if (this.metadata.hasSelectedNumberingPlan()) {\n          formattedNationalNumber = this.formatter.format(digits, this.state);\n        }\n\n        if (formattedNationalNumber === undefined) {\n          // See if another national (significant) number could be re-extracted.\n          if (this.parser.reExtractNationalSignificantNumber(this.state)) {\n            this.determineTheCountryIfNeeded(); // If it could, then re-try formatting the new national (significant) number.\n\n            var nationalDigits = this.state.getNationalDigits();\n\n            if (nationalDigits) {\n              formattedNationalNumber = this.formatter.format(nationalDigits, this.state);\n            }\n          }\n        }\n\n        this.formattedOutput = formattedNationalNumber ? this.getFullNumber(formattedNationalNumber) : this.getNonFormattedNumber();\n      }\n\n      return this.formattedOutput;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _this = this;\n\n      this.state = new AsYouTypeState({\n        onCountryChange: function onCountryChange(country) {\n          // Before version `1.6.0`, the official `AsYouType` formatter API\n          // included the `.country` property of an `AsYouType` instance.\n          // Since that property (along with the others) have been moved to\n          // `this.state`, `this.country` property is emulated for compatibility\n          // with the old versions.\n          _this.country = country;\n        },\n        onCallingCodeChange: function onCallingCodeChange(country, callingCode) {\n          _this.metadata.selectNumberingPlan(country, callingCode);\n\n          _this.formatter.reset(_this.metadata.numberingPlan, _this.state);\n\n          _this.parser.reset(_this.metadata.numberingPlan);\n        }\n      });\n      this.formatter = new AsYouTypeFormatter({\n        state: this.state,\n        metadata: this.metadata\n      });\n      this.parser = new AsYouTypeParser({\n        defaultCountry: this.defaultCountry,\n        defaultCallingCode: this.defaultCallingCode,\n        metadata: this.metadata,\n        state: this.state,\n        onNationalSignificantNumberChange: function onNationalSignificantNumberChange() {\n          _this.determineTheCountryIfNeeded();\n\n          _this.formatter.reset(_this.metadata.numberingPlan, _this.state);\n        }\n      });\n      this.state.reset(this.defaultCountry, this.defaultCallingCode);\n      this.formattedOutput = '';\n      return this;\n    }\n    /**\r\n     * Returns `true` if the phone number is being input in international format.\r\n     * In other words, returns `true` if and only if the parsed phone number starts with a `\"+\"`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isInternational\",\n    value: function isInternational() {\n      return this.state.international;\n    }\n    /**\r\n     * Returns the \"calling code\" part of the phone number when it's being input\r\n     * in an international format.\r\n     * If no valid calling code has been entered so far, returns `undefined`.\r\n     * @return {string} [callingCode]\r\n     */\n\n  }, {\n    key: \"getCallingCode\",\n    value: function getCallingCode() {\n      // If the number is being input in national format and some \"default calling code\"\n      // has been passed to `AsYouType` constructor, then `this.state.callingCode`\n      // is equal to that \"default calling code\".\n      //\n      // If the number is being input in national format and no \"default calling code\"\n      // has been passed to `AsYouType` constructor, then returns `undefined`,\n      // even if a \"default country\" has been passed to `AsYouType` constructor.\n      //\n      if (this.isInternational()) {\n        return this.state.callingCode;\n      }\n    } // A legacy alias.\n\n  }, {\n    key: \"getCountryCallingCode\",\n    value: function getCountryCallingCode() {\n      return this.getCallingCode();\n    }\n    /**\r\n     * Returns a two-letter country code of the phone number.\r\n     * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n     * Returns `undefined` if no phone number has been input yet.\r\n     * @return {string} [country]\r\n     */\n\n  }, {\n    key: \"getCountry\",\n    value: function getCountry() {\n      var digits = this.state.digits; // Return `undefined` if no digits have been input yet.\n\n      if (digits) {\n        return this._getCountry();\n      }\n    }\n    /**\r\n     * Returns a two-letter country code of the phone number.\r\n     * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n     * @return {string} [country]\r\n     */\n\n  }, {\n    key: \"_getCountry\",\n    value: function _getCountry() {\n      var country = this.state.country;\n      /* istanbul ignore if */\n\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        // `AsYouType.getCountry()` returns `undefined`\n        // for \"non-geographic\" phone numbering plans.\n        if (country === '001') {\n          return;\n        }\n      }\n\n      return country;\n    }\n  }, {\n    key: \"determineTheCountryIfNeeded\",\n    value: function determineTheCountryIfNeeded() {\n      // Suppose a user enters a phone number in international format,\n      // and there're several countries corresponding to that country calling code,\n      // and a country has been derived from the number, and then\n      // a user enters one more digit and the number is no longer\n      // valid for the derived country, so the country should be re-derived\n      // on every new digit in those cases.\n      //\n      // If the phone number is being input in national format,\n      // then it could be a case when `defaultCountry` wasn't specified\n      // when creating `AsYouType` instance, and just `defaultCallingCode` was specified,\n      // and that \"calling code\" could correspond to a \"non-geographic entity\",\n      // or there could be several countries corresponding to that country calling code.\n      // In those cases, `this.country` is `undefined` and should be derived\n      // from the number. Again, if country calling code is ambiguous, then\n      // `this.country` should be re-derived with each new digit.\n      //\n      if (!this.state.country || this.isCountryCallingCodeAmbiguous()) {\n        this.determineTheCountry();\n      }\n    } // Prepends `+CountryCode ` in case of an international phone number\n\n  }, {\n    key: \"getFullNumber\",\n    value: function getFullNumber(formattedNationalNumber) {\n      var _this2 = this;\n\n      if (this.isInternational()) {\n        var prefix = function prefix(text) {\n          return _this2.formatter.getInternationalPrefixBeforeCountryCallingCode(_this2.state, {\n            spacing: text ? true : false\n          }) + text;\n        };\n\n        var callingCode = this.state.callingCode;\n\n        if (!callingCode) {\n          return prefix(\"\".concat(this.state.getDigitsWithoutInternationalPrefix()));\n        }\n\n        if (!formattedNationalNumber) {\n          return prefix(callingCode);\n        }\n\n        return prefix(\"\".concat(callingCode, \" \").concat(formattedNationalNumber));\n      }\n\n      return formattedNationalNumber;\n    }\n  }, {\n    key: \"getNonFormattedNationalNumberWithPrefix\",\n    value: function getNonFormattedNationalNumberWithPrefix() {\n      var _this$state = this.state,\n          nationalSignificantNumber = _this$state.nationalSignificantNumber,\n          complexPrefixBeforeNationalSignificantNumber = _this$state.complexPrefixBeforeNationalSignificantNumber,\n          nationalPrefix = _this$state.nationalPrefix;\n      var number = nationalSignificantNumber;\n      var prefix = complexPrefixBeforeNationalSignificantNumber || nationalPrefix;\n\n      if (prefix) {\n        number = prefix + number;\n      }\n\n      return number;\n    }\n  }, {\n    key: \"getNonFormattedNumber\",\n    value: function getNonFormattedNumber() {\n      var nationalSignificantNumberMatchesInput = this.state.nationalSignificantNumberMatchesInput;\n      return this.getFullNumber(nationalSignificantNumberMatchesInput ? this.getNonFormattedNationalNumberWithPrefix() : this.state.getNationalDigits());\n    }\n  }, {\n    key: \"getNonFormattedTemplate\",\n    value: function getNonFormattedTemplate() {\n      var number = this.getNonFormattedNumber();\n\n      if (number) {\n        return number.replace(/[\\+\\d]/g, DIGIT_PLACEHOLDER);\n      }\n    }\n  }, {\n    key: \"isCountryCallingCodeAmbiguous\",\n    value: function isCountryCallingCodeAmbiguous() {\n      var callingCode = this.state.callingCode;\n      var countryCodes = this.metadata.getCountryCodesForCallingCode(callingCode);\n      return countryCodes && countryCodes.length > 1;\n    } // Determines the country of the phone number\n    // entered so far based on the country phone code\n    // and the national phone number.\n\n  }, {\n    key: \"determineTheCountry\",\n    value: function determineTheCountry() {\n      this.state.setCountry(getCountryByCallingCode(this.isInternational() ? this.state.callingCode : this.defaultCallingCode, this.state.nationalSignificantNumber, this.metadata));\n    }\n    /**\r\n     * Returns a E.164 phone number value for the user's input.\r\n     *\r\n     * For example, for country `\"US\"` and input `\"(222) 333-4444\"`\r\n     * it will return `\"+12223334444\"`.\r\n     *\r\n     * For international phone number input, it will also auto-correct\r\n     * some minor errors such as using a national prefix when writing\r\n     * an international phone number. For example, if the user inputs\r\n     * `\"+44 0 7400 000000\"` then it will return an auto-corrected\r\n     * `\"+447400000000\"` phone number value.\r\n     *\r\n     * Will return `undefined` if no digits have been input,\r\n     * or when inputting a phone number in national format and no\r\n     * default country or default \"country calling code\" have been set.\r\n     *\r\n     * @return {string} [value]\r\n     */\n\n  }, {\n    key: \"getNumberValue\",\n    value: function getNumberValue() {\n      var _this$state2 = this.state,\n          digits = _this$state2.digits,\n          callingCode = _this$state2.callingCode,\n          country = _this$state2.country,\n          nationalSignificantNumber = _this$state2.nationalSignificantNumber; // Will return `undefined` if no digits have been input.\n\n      if (!digits) {\n        return;\n      }\n\n      if (this.isInternational()) {\n        if (callingCode) {\n          return '+' + callingCode + nationalSignificantNumber;\n        } else {\n          return '+' + digits;\n        }\n      } else {\n        if (country || callingCode) {\n          var callingCode_ = country ? this.metadata.countryCallingCode() : callingCode;\n          return '+' + callingCode_ + nationalSignificantNumber;\n        }\n      }\n    }\n    /**\r\n     * Returns an instance of `PhoneNumber` class.\r\n     * Will return `undefined` if no national (significant) number\r\n     * digits have been entered so far, or if no `defaultCountry` has been\r\n     * set and the user enters a phone number not in international format.\r\n     */\n\n  }, {\n    key: \"getNumber\",\n    value: function getNumber() {\n      var _this$state3 = this.state,\n          nationalSignificantNumber = _this$state3.nationalSignificantNumber,\n          carrierCode = _this$state3.carrierCode,\n          callingCode = _this$state3.callingCode; // `this._getCountry()` is basically same as `this.state.country`\n      // with the only change that it return `undefined` in case of a\n      // \"non-geographic\" numbering plan instead of `\"001\"` \"internal use\" value.\n\n      var country = this._getCountry();\n\n      if (!nationalSignificantNumber) {\n        return;\n      }\n\n      if (!country && !callingCode) {\n        return;\n      }\n\n      var phoneNumber = new PhoneNumber(country || callingCode, nationalSignificantNumber, this.metadata.metadata);\n\n      if (carrierCode) {\n        phoneNumber.carrierCode = carrierCode;\n      } // Phone number extensions are not supported by \"As You Type\" formatter.\n\n\n      return phoneNumber;\n    }\n    /**\r\n     * Returns `true` if the phone number is \"possible\".\r\n     * Is just a shortcut for `PhoneNumber.isPossible()`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      var phoneNumber = this.getNumber();\n\n      if (!phoneNumber) {\n        return false;\n      }\n\n      return phoneNumber.isPossible();\n    }\n    /**\r\n     * Returns `true` if the phone number is \"valid\".\r\n     * Is just a shortcut for `PhoneNumber.isValid()`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      var phoneNumber = this.getNumber();\n\n      if (!phoneNumber) {\n        return false;\n      }\n\n      return phoneNumber.isValid();\n    }\n    /**\r\n     * @deprecated\r\n     * This method is used in `react-phone-number-input/source/input-control.js`\r\n     * in versions before `3.0.16`.\r\n     */\n\n  }, {\n    key: \"getNationalNumber\",\n    value: function getNationalNumber() {\n      return this.state.nationalSignificantNumber;\n    }\n    /**\r\n     * Returns the phone number characters entered by the user.\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getChars\",\n    value: function getChars() {\n      return (this.state.international ? '+' : '') + this.state.digits;\n    }\n    /**\r\n     * Returns the template for the formatted phone number.\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate() {\n      return this.formatter.getTemplate(this.state) || this.getNonFormattedTemplate() || '';\n    }\n  }]);\n\n  return AsYouType;\n}();\n\nexport { AsYouType as default };\n//# sourceMappingURL=AsYouType.js.map","import withMetadataArgument from './withMetadataArgument.js'\r\nimport { isValidPhoneNumber as _isValidPhoneNumber } from '../../core/index.js'\r\n\r\nexport function isValidPhoneNumber() {\r\n\treturn withMetadataArgument(_isValidPhoneNumber, arguments)\r\n}","// Importing from a \".js\" file is a workaround for Node.js \"ES Modules\"\r\n// importing system which is even uncapable of importing \"*.json\" files.\r\nimport metadata from '../../metadata.min.json.js'\r\n\r\nimport { PhoneNumberMatcher as _PhoneNumberMatcher } from '../../core/index.js'\r\n\r\nexport function PhoneNumberMatcher(text, options) {\r\n\treturn _PhoneNumberMatcher.call(this, text, options, metadata)\r\n}\r\nPhoneNumberMatcher.prototype = Object.create(_PhoneNumberMatcher.prototype, {})\r\nPhoneNumberMatcher.prototype.constructor = PhoneNumberMatcher\r\n","// Importing from a \".js\" file is a workaround for Node.js \"ES Modules\"\r\n// importing system which is even uncapable of importing \"*.json\" files.\r\nimport metadata from '../../metadata.min.json.js'\r\n\r\nimport { AsYouType as _AsYouType } from '../../core/index.js'\r\n\r\nexport function AsYouType(country) {\r\n\treturn _AsYouType.call(this, country, metadata)\r\n}\r\n\r\nAsYouType.prototype = Object.create(_AsYouType.prototype, {})\r\nAsYouType.prototype.constructor = AsYouType","// Importing from a \".js\" file is a workaround for Node.js \"ES Modules\"\r\n// importing system which is even uncapable of importing \"*.json\" files.\r\nimport metadata from '../../metadata.min.json.js'\r\n\r\nimport { Metadata as _Metadata } from '../../core/index.js'\r\n\r\nexport function Metadata() {\r\n\treturn _Metadata.call(this, metadata)\r\n}\r\n\r\nMetadata.prototype = Object.create(_Metadata.prototype, {})\r\nMetadata.prototype.constructor = Metadata","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// This is a legacy function.\n// Use `findNumbers()` instead.\nimport { PLUS_CHARS, VALID_PUNCTUATION, VALID_DIGITS, WHITESPACE } from './constants.js';\nimport parse from './parse_.js';\nimport { VALID_PHONE_NUMBER_WITH_EXTENSION } from './helpers/isViablePhoneNumber.js';\nimport createExtensionPattern from './helpers/extension/createExtensionPattern.js';\nimport parsePreCandidate from './findNumbers/parsePreCandidate.js';\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate.js';\nimport isValidCandidate from './findNumbers/isValidCandidate.js';\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\n\nexport var EXTN_PATTERNS_FOR_PARSING = createExtensionPattern('parsing');\nvar WHITESPACE_IN_THE_BEGINNING_PATTERN = new RegExp('^[' + WHITESPACE + ']+');\nvar PUNCTUATION_IN_THE_END_PATTERN = new RegExp('[' + VALID_PUNCTUATION + ']+$'); // // Regular expression for getting opening brackets for a valid number\n// // found using `PHONE_NUMBER_START_PATTERN` for prepending those brackets to the number.\n// const BEFORE_NUMBER_DIGITS_PUNCTUATION = new RegExp('[' + OPENING_BRACKETS + ']+' + '[' + WHITESPACE + ']*' + '$')\n\nvar VALID_PRECEDING_CHARACTER_PATTERN = /[^a-zA-Z0-9]/;\nexport default function findPhoneNumbers(text, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  var search = new PhoneNumberSearch(text, options, metadata);\n  var phones = [];\n\n  while (search.hasNext()) {\n    phones.push(search.next());\n  }\n\n  return phones;\n}\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\n\nexport function searchPhoneNumbers(text, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  var search = new PhoneNumberSearch(text, options, metadata);\n  return _defineProperty({}, Symbol.iterator, function () {\n    return {\n      next: function next() {\n        if (search.hasNext()) {\n          return {\n            done: false,\n            value: search.next()\n          };\n        }\n\n        return {\n          done: true\n        };\n      }\n    };\n  });\n}\n/**\r\n * Extracts a parseable phone number including any opening brackets, etc.\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?startsAt, ?endsAt }`.\r\n */\n\nexport var PhoneNumberSearch = /*#__PURE__*/function () {\n  function PhoneNumberSearch(text, options, metadata) {\n    _classCallCheck(this, PhoneNumberSearch);\n\n    this.text = text; // If assigning the `{}` default value is moved to the arguments above,\n    // code coverage would decrease for some weird reason.\n\n    this.options = options || {};\n    this.metadata = metadata; // Iteration tristate.\n\n    this.state = 'NOT_READY';\n    this.regexp = new RegExp(VALID_PHONE_NUMBER_WITH_EXTENSION, 'ig');\n  }\n\n  _createClass(PhoneNumberSearch, [{\n    key: \"find\",\n    value: function find() {\n      var matches = this.regexp.exec(this.text);\n\n      if (!matches) {\n        return;\n      }\n\n      var number = matches[0];\n      var startsAt = matches.index;\n      number = number.replace(WHITESPACE_IN_THE_BEGINNING_PATTERN, '');\n      startsAt += matches[0].length - number.length; // Fixes not parsing numbers with whitespace in the end.\n      // Also fixes not parsing numbers with opening parentheses in the end.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/252\n\n      number = number.replace(PUNCTUATION_IN_THE_END_PATTERN, '');\n      number = parsePreCandidate(number);\n      var result = this.parseCandidate(number, startsAt);\n\n      if (result) {\n        return result;\n      } // Tail recursion.\n      // Try the next one if this one is not a valid phone number.\n\n\n      return this.find();\n    }\n  }, {\n    key: \"parseCandidate\",\n    value: function parseCandidate(number, startsAt) {\n      if (!isValidPreCandidate(number, startsAt, this.text)) {\n        return;\n      } // Don't parse phone numbers which are non-phone numbers\n      // due to being part of something else (e.g. a UUID).\n      // https://github.com/catamphetamine/libphonenumber-js/issues/213\n      // Copy-pasted from Google's `PhoneNumberMatcher.js` (`.parseAndValidate()`).\n\n\n      if (!isValidCandidate(number, startsAt, this.text, this.options.extended ? 'POSSIBLE' : 'VALID')) {\n        return;\n      } // // Prepend any opening brackets left behind by the\n      // // `PHONE_NUMBER_START_PATTERN` regexp.\n      // const text_before_number = text.slice(this.searching_from, startsAt)\n      // const full_number_starts_at = text_before_number.search(BEFORE_NUMBER_DIGITS_PUNCTUATION)\n      // if (full_number_starts_at >= 0)\n      // {\n      // \tnumber   = text_before_number.slice(full_number_starts_at) + number\n      // \tstartsAt = full_number_starts_at\n      // }\n      //\n      // this.searching_from = matches.lastIndex\n\n\n      var result = parse(number, this.options, this.metadata);\n\n      if (!result.phone) {\n        return;\n      }\n\n      result.startsAt = startsAt;\n      result.endsAt = startsAt + number.length;\n      return result;\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      if (this.state === 'NOT_READY') {\n        this.last_match = this.find();\n\n        if (this.last_match) {\n          this.state = 'READY';\n        } else {\n          this.state = 'DONE';\n        }\n      }\n\n      return this.state === 'READY';\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      // Check the state and find the next match as a side-effect if necessary.\n      if (!this.hasNext()) {\n        throw new Error('No next element');\n      } // Don't retain that memory any longer than necessary.\n\n\n      var result = this.last_match;\n      this.last_match = null;\n      this.state = 'NOT_READY';\n      return result;\n    }\n  }]);\n\n  return PhoneNumberSearch;\n}();\n//# sourceMappingURL=findPhoneNumbers_.js.map","// Importing from a \".js\" file is a workaround for Node.js \"ES Modules\"\r\n// importing system which is even uncapable of importing \"*.json\" files.\r\nimport metadata from '../metadata.min.json.js'\r\n\r\nimport { PhoneNumberSearch as _PhoneNumberSearch } from '../es6/findPhoneNumbers_.js'\r\n\r\nexport function PhoneNumberSearch(text, options) {\r\n\t_PhoneNumberSearch.call(this, text, options, metadata)\r\n}\r\n\r\n// Deprecated.\r\nPhoneNumberSearch.prototype = Object.create(_PhoneNumberSearch.prototype, {})\r\nPhoneNumberSearch.prototype.constructor = PhoneNumberSearch\r\n","import * as Yup from 'yup';\nimport { isValidPhoneNumber } from 'libphonenumber-js';\nimport { CountryCode } from 'libphonenumber-js/types';\n\ndeclare module 'yup' {\n  export interface StringSchema {\n    /**\n     * Check for phone number validity.\n     *\n     * @param {String} [countryCode=US] The country code to check against.\n     * @param {String} [errorMessage=DEFAULT_MESSAGE] returns error if failed validation\n     */\n    phone(countryCode?: CountryCode, errorMessage?: string): StringSchema;\n  }\n}\n\nconst YUP_PHONE_METHOD = 'phone';\nconst CLDR_REGION_CODE_SIZE = 2;\n\nconst isValidCountryCode = (countryCode: string | undefined): boolean => {\n  const isString = typeof countryCode === 'string';\n  const isValidCodeLength = countryCode?.length === CLDR_REGION_CODE_SIZE;\n\n  return isString && isValidCodeLength;\n};\n\nYup.addMethod(\n  Yup.string,\n  YUP_PHONE_METHOD,\n  function yupPhoneLite(countryCode?: CountryCode, errorMessage = '') {\n    if (!isValidCountryCode(countryCode)) {\n      // if not valid countryCode, then set default country to United States (US)\n      countryCode = 'US';\n    }\n\n    const errMsg =\n      typeof errorMessage === 'string' && errorMessage\n        ? errorMessage\n        : `\\${path} must be a valid phone number for region ${countryCode}`;\n\n    // @ts-ignore\n    return this.test(YUP_PHONE_METHOD, errMsg, (value: string) => {\n      try {\n        if (value === undefined || value === '') {\n          return true;\n        }\n\n        /* check if the countryCode provided should be used as\n          default country code or strictly followed\n        */\n        return isValidPhoneNumber(value, countryCode);\n      } catch {\n        return false;\n      }\n    });\n  }\n);\n"],"names":["withMetadataArgument","func","_arguments","args","Array","prototype","slice","call","push","metadata","apply","ParseError","code","_classCallCheck","_this","Object","setPrototypeOf","name","constructor","Error","MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","DASHES","SLASHES","DOTS","WHITESPACE","BRACKETS","TILDES","VALID_PUNCTUATION","PLUS_CHARS","a","b","split","pa","pb","i","na","Number","nb","isNaN","V3","V4","DEFAULT_EXT_PREFIX","CALLING_CODE_REG_EXP","Metadata","validateMetadata","setVersion","keys","countries","filter","_","countryCode","v1","v2","v3","nonGeographic","nonGeographical","country","getCountryMetadata","undefined","callingCode","getCountryCodesForCallingCode","countryCodes","countryCallingCodes","length","selectNumberingPlan","test","hasCountry","numberingPlan","NumberingPlan","hasCallingCode","getNumberingPlanMetadata","getCountryCodeForCallingCode","IDDPrefix","defaultIDDPrefix","nationalNumberPattern","possibleLengths","formats","nationalPrefixForParsing","nationalPrefixTransformRule","leadingDigits","hasTypes","type","ext","country_phone_code_to_countries","country_calling_codes","globalMetadataObject","_getFormats","getDefaultCountryMetadataForRegion","map","Format","_getNationalPrefixFormattingRule","_nationalPrefixForParsing","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","getType","Type","format","_format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormattingInNationalFormat","usesNationalPrefix","FIRST_GROUP_ONLY_PREFIX_PATTERN","is_object","join","type_of","_typeof","getCountryCallingCode","countryCallingCode","isSupportedCountry","version","v4","compare","RFC3966_EXTN_PREFIX","getExtensionDigitsPattern","maxLength","createExtensionPattern","purpose","extLimitAfterExplicitLabel","extLimitAfterLikelyLabel","extLimitAfterAmbiguousChar","extLimitWhenNotSure","possibleSeparatorsBetweenNumberAndExtLabel","possibleCharsAfterExtLabel","optionalExtnSuffix","explicitExtLabels","ambiguousExtLabels","ambiguousSeparator","possibleSeparatorsNumberExtLabelNoComma","autoDiallingAndExtLabelsFound","rfcExtn","explicitExtn","ambiguousExtn","americanStyleExtnWithSuffix","autoDiallingExtn","onlyCommasExtn","MIN_LENGTH_PHONE_NUMBER_PATTERN","VALID_PHONE_NUMBER","VALID_PHONE_NUMBER_START_REG_EXP","RegExp","VALID_PHONE_NUMBER_WITH_EXTENSION","VALID_PHONE_NUMBER_PATTERN","isViablePhoneNumber","number","isViablePhoneNumberStart","EXTN_PATTERN","extractExtension","start","search","numberWithoutExtension","matches","match","DIGITS","parseDigit","character","parseDigits","string","result","_createForOfIteratorHelperLoose","digit","parseIncompletePhoneNumber","parsePhoneNumberCharacter","prevParsedCharacters","mergeArrays","merged","element","indexOf","sort","checkNumberLength","nationalNumber","checkNumberLengthForType","type_info","possible_lengths","mobile_type","actual_length","minimum_length","isPossiblePhoneNumber","input","options","phone","isPossibleNumber","isNonGeographicCallingCode","parseRFC3966","text","replace","part","_slicedToArray","value","formatRFC3966","matchesEntirely","regular_expression","NON_FIXED_LINE_PHONE_TYPES","getNumberType","isNumberTypeEqualTo","pattern","isValidNumber","national_number","applyInternationalSeparatorStyle","formattedNumber","trim","FIRST_GROUP_PATTERN","formatNationalNumberUsingFormat","useInternationalFormat","withNationalPrefix","carrierCode","internationalFormat","SINGLE_IDD_PREFIX_REG_EXP","getIddPrefix","countryMetadata","DEFAULT_OPTIONS","formatExtension","extension","formatNumber","formatNationalNumber","addExtension","fromCountry","formatIDD","formatAs","chooseFormatForNumber","availableFormats","nationalNnumber","leadingDigitsPatterns","lastLeadingDigitsPattern","fromCountryCallingCode","iddPrefix","PhoneNumber","TypeError","_metadata","isCountryCode","phoneNumber","CAPTURING_DIGIT_PATTERN","stripIddPrefix","IDDPrefixPattern","matchedGroups","extractNationalNumberFromPossiblyIncompleteNumber","prefixPattern","prefixMatch","exec","capturedGroupsCount","hasCapturedGroups","prefixBeforeNationalNumber","possiblePositionOfTheFirstCapturedGroup","possibleNationalPrefix","extractNationalNumber","shouldHaveExtractedNationalPrefix","isPossibleIncompleteNationalNumber","nationalNumberBefore","nationalNumberAfter","extractCountryCallingCodeFromInternationalNumberWithoutPlusSign","possibleShorterNumber","possibleShorterNationalNumber","extractCountryCallingCode","numberWithoutIDD","shorterNumber","getCountryByCallingCode","nationalPhoneNumber","possibleCountries","selectCountryFromList","MAX_INPUT_STRING_LENGTH","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","parse","defaultCountry","parseInput","extract","formattedPhoneNumber","error","parsePhoneNumber","defaultCallingCode","hasSelectedNumberingPlan","valid","extended","possible","extractFormattedPhoneNumber","throwOnError","startsAt","withExtensionStripped","exactCountry","parseNumber","_objectSpread","normalizeArguments","arg_1","arg_2","arg_3","arg_4","isObject","parsePhoneNumberFromString","isValidPhoneNumber","arguments","isValid","Node","_createClass","key","next","prev","LRUCache","limit","size","head","tail","cache","ensureLimit","node","remove","put","console","log","RegExpCache","regExp","get","lower","upper","trimAfterFirstMatch","regexp","index","startsWith","substring","endsWith","_pZ","pZ","PZ","_pN","_pNd","pNd","_pL","pL","pL_regexp","_pSc","pSc","pSc_regexp","_pMn","pMn","pMn_regexp","_InBasic_Latin","_InLatin_1_Supplement","_InLatin_Extended_A","_InLatin_Extended_Additional","_InLatin_Extended_B","_InCombining_Diacritical_Marks","latinLetterRegexp","isLatinLetter","letter","isInvalidPunctuationSymbol","POSSIBLE","candidate","VALID","containsOnlyValidXChars","toString","STRICT_GROUPING","regExpCache","candidateString","containsMoreThanOneSlashInNationalNumber","isNationalPrefixPresentIfRequired","checkNumberGroupingIsValid","allNumberGroupsRemainGrouped","EXACT_GROUPING","allNumberGroupsAreExactlyPresent","charAtIndex","charAt","charAtNextIndex","util","isNumberMatch","MatchType","NSN_MATCH","getCountryCodeSource","phoneNumberRegion","getRegionCodeForCountryCode","getCountryCode","getMetadataForRegion","getNationalSignificantNumber","formatRule","chooseFormattingPatternForNumber","numberFormats","getNationalPrefixFormattingRule","getNationalPrefixOptionalWhenFormatting","PhoneNumberUtil","formattingRuleHasFirstGroupOnly","rawInputCopy","normalizeDigitsOnly","getRawInput","maybeStripNationalPrefixAndCarrierCode","firstSlashInBodyIndex","secondSlashInBodyIndex","candidateHasCountryCode","CountryCodeSource","FROM_NUMBER_WITH_PLUS_SIGN","FROM_NUMBER_WITHOUT_PLUS_SIGN","String","checkGroups","normalizedCandidate","normalizeDigits","formattedNumberGroups","getNationalNumberGroups","alternateFormats","MetadataManager","getAlternateFormatsForCountry","nationalSignificantNumber","alternateFormat","leadingDigitsRegExp","getPatternForRegExp","formattingPattern","formatNsnUsingPattern","rfc3966Format","endIndex","startIndex","candidateGroups","NON_DIGITS_PATTERN","candidateNumberGroupIndex","hasExtension","contains","formattedNumberGroupIndex","fromIndex","FROM_DEFAULT_COUNTRY","region","getNddPrefixForRegion","Character","isDigit","getExtension","SECOND_NUMBER_START_PATTERN","parsePreCandidate","SLASH_SEPARATED_DATES","TIME_STAMPS","TIME_STAMPS_SUFFIX_LEADING","isValidPreCandidate","offset","followingText","OPENING_PARENS","CLOSING_PARENS","NON_PARENS","LEAD_CLASS","LEAD_CLASS_LEADING","BRACKET_PAIR_LIMIT","MATCHING_BRACKETS_ENTIRE","PUB_PAGES","isValidCandidate","leniency","previousChar","lastCharIndex","nextChar","EXTN_PATTERNS_FOR_MATCHING","INNER_MATCHES","leadLimit","punctuationLimit","digitBlockLimit","blockLimit","punctuation","digitSequence","PATTERN","UNWANTED_END_CHAR_PATTERN","MAX_SAFE_INTEGER","Math","pow","PhoneNumberMatcher","maxTries","Leniency","state","searchIndex","parseAndVerify","extractInnerMatch","endsAt","innerMatchPattern","isFirstMatch","candidateMatch","innerMatchRegExp","candidateIndexGuess","lastMatch","find","hasNext","AsYouTypeState","onCountryChange","onCallingCodeChange","international","missingPlus","digits","resetNationalSignificantNumber","initCountryAndCallingCode","getNationalDigits","nationalSignificantNumberMatchesInput","complexPrefixBeforeNationalSignificantNumber","properties","setCountry","setCallingCode","nextDigits","DIGIT_PLACEHOLDER","DIGIT_PLACEHOLDER_MATCHER","repeat","times","cutAndStripNonPairedParens","cutBeforeIndex","stripNonPairedParens","dangling_braces","pop","cleared_string","populateTemplateWithDigits","template","position","formatCompleteNumber","shouldTryNationalPrefixFormattingRule","getSeparatorAfterNationalPrefix","matcher","formatNationalNumberWithAndWithoutNationalPrefixFormattingRule","canFormatCompleteNumber","useNationalPrefixFormattingRule","formattedNationalNumber","isValidFormattedNationalNumber","PatternMatcher","matchTree","PatternParser","allowOverflow","matchedChars","overflow","characters","tree","last","characterString","partialMatch","isArray","restCharacters","subtree","JSON","stringify","op","branch","char","OPERATOR","ILLEGAL_CHARACTER_REGEXP","context","or","instructions","parsePattern","branches","concat","getContext","operator","before","rightPart","startContext","endContext","oneOfSet","parseOneOfSet","values","prevValue","charCodeAt","nextValue","fromCharCode","DUMMY_DIGIT","LONGEST_NATIONAL_PHONE_NUMBER_LENGTH","LONGEST_DUMMY_PHONE_NUMBER","NATIONAL_PREFIX_SEPARATORS_PATTERN","CREATE_CHARACTER_CLASS_PATTERN","CREATE_STANDALONE_DIGIT_PATTERN","NON_ALTERING_FORMAT_REG_EXP","MIN_LEADING_DIGITS_LENGTH","AsYouTypeFormatter","resetFormat","chosenFormat","nationalNumberTemplate","populatedNationalNumberTemplate","populatedNationalNumberTemplatePosition","isNANP","matchingFormats","narrowDownMatchingFormats","formattedCompleteNumber","setNationalNumberTemplate","lastIndexOf","formatNationalNumberWithNextDigits","previouslyChosenFormat","newlyChosenFormat","chooseFormat","formatNextNationalNumberDigits","leadingDigitsPatternIndex","_this2","formatSuits","formatMatches","nationalPrefixIsMandatoryWhenFormattingInNationalFormat","leadingDigitsPatternsCount","min","leadingDigitsPattern","_this3","getFormatFormat","createTemplateForFormat","getTemplateForFormat","spacing","internationalPrefix","getInternationalPrefixBeforeCountryCallingCode","getDigitsWithoutInternationalPrefix","strictPattern","nationalNumberDummyDigits","numberFormat","nationalPrefixIncludedInTemplate","numberFormatWithNationalPrefix","VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART","VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN","VALID_FORMATTED_PHONE_NUMBER_PART","AFTER_PHONE_NUMBER_DIGITS_END_PATTERN","COMPLEX_NATIONAL_PREFIX","AsYouTypeParser","onNationalSignificantNumberChange","extractFormattedDigitsAndPlus","formattedDigits","hasPlus","justLeadingPlus","startInternationalNumber","inputDigits","hasReceivedThreeLeadingDigits","appendDigits","extractIddPrefix","isWaitingForCountryCallingCode","appendNationalSignificantNumberDigits","hasExtractedNationalSignificantNumber","extractNationalSignificantNumber","stateUpdate","update","couldPossiblyExtractAnotherNationalSignificantNumber","nationalDigits","setState","onExtractedNationalNumber","prevNationalSignificantNumber","nationalSignificantNumberIndex","extractAnotherNationalSignificantNumber","extractCallingCodeAndNationalSignificantNumber","fixMissingPlus","newCallingCode","_extractFormattedDigitsAndPlus","extractedNumber","AsYouType","optionsOrDefaultCountry","getCountryAndCallingCode","reset","parser","formattedOutput","determineTheCountryIfNeeded","formatter","reExtractNationalSignificantNumber","getFullNumber","getNonFormattedNumber","isInternational","getCallingCode","_getCountry","isCountryCallingCodeAmbiguous","determineTheCountry","prefix","getNonFormattedNationalNumberWithPrefix","callingCode_","getNumber","isPossible","getTemplate","getNonFormattedTemplate","_isValidPhoneNumber","_PhoneNumberMatcher","create","_AsYouType","_Metadata","WHITESPACE_IN_THE_BEGINNING_PATTERN","PUNCTUATION_IN_THE_END_PATTERN","PhoneNumberSearch","parseCandidate","last_match","_PhoneNumberSearch","YUP_PHONE_METHOD","CLDR_REGION_CODE_SIZE","isValidCountryCode","isString","isValidCodeLength","Yup","addMethod","yupPhoneLite","errorMessage","errMsg"],"mappings":"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"}