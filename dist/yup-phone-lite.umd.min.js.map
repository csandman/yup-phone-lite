{"version":3,"file":"yup-phone-lite.umd.min.js","sources":["../node_modules/libphonenumber-js/min/metadata.js","../node_modules/libphonenumber-js/es6/tools/semver-compare.js","../node_modules/libphonenumber-js/es6/metadata.js","../node_modules/libphonenumber-js/es6/helpers/extension/createExtensionPattern.js","../node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js","../node_modules/libphonenumber-js/es6/helpers/parseDigits.js","../node_modules/libphonenumber-js/es6/helpers/mergeArrays.js","../node_modules/libphonenumber-js/es6/helpers/checkNumberLength.js","../node_modules/libphonenumber-js/es6/isPossibleNumber_.js","../node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js","../node_modules/libphonenumber-js/es6/helpers/getNumberType.js","../node_modules/libphonenumber-js/es6/format_.js","../node_modules/libphonenumber-js/es6/helpers/RFC3966.js","../node_modules/libphonenumber-js/es6/helpers/getIddPrefix.js","../node_modules/libphonenumber-js/es6/helpers/formatNationalNumberUsingFormat.js","../node_modules/libphonenumber-js/es6/helpers/applyInternationalSeparatorStyle.js","../node_modules/libphonenumber-js/es6/helpers/extractNationalNumber.js","../node_modules/libphonenumber-js/es6/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js","../node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCode.js","../node_modules/libphonenumber-js/es6/helpers/stripIddPrefix.js","../node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js","../node_modules/libphonenumber-js/es6/constants.js","../node_modules/libphonenumber-js/es6/parse_.js","../node_modules/libphonenumber-js/es6/helpers/isViablePhoneNumber.js","../node_modules/libphonenumber-js/es6/helpers/extension/extractExtension.js","../node_modules/libphonenumber-js/es6/helpers/getCountryByCallingCode.js","../node_modules/libphonenumber-js/es6/isValidPhoneNumber.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber_.js","../node_modules/libphonenumber-js/min/exports/isValidPhoneNumber.js","../node_modules/libphonenumber-js/metadata.min.json.js","../node_modules/libphonenumber-js/es6/ParseError.js","../node_modules/libphonenumber-js/es6/PhoneNumber.js","../node_modules/libphonenumber-js/es6/validate_.js","../src/yup-phone-lite.ts"],"sourcesContent":["// Importing from `.json.js` a workaround for a bug in web browsers' \"native\"\r\n// ES6 importing system which is uncapable of importing \"*.json\" files.\r\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\r\nimport metadata from '../metadata.min.json.js'\r\nexport default metadata\r\n\r\nexport function withMetadata(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}","// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\n//\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\nexport default function (a, b) {\n  a = a.split('-');\n  b = b.split('-');\n  var pa = a[0].split('.');\n  var pb = b[0].split('.');\n\n  for (var i = 0; i < 3; i++) {\n    var na = Number(pa[i]);\n    var nb = Number(pb[i]);\n    if (na > nb) return 1;\n    if (nb > na) return -1;\n    if (!isNaN(na) && isNaN(nb)) return 1;\n    if (isNaN(na) && !isNaN(nb)) return -1;\n  }\n\n  if (a[1] && b[1]) {\n    return a[1] > b[1] ? 1 : a[1] < b[1] ? -1 : 0;\n  }\n\n  return !a[1] && b[1] ? 1 : a[1] && !b[1] ? -1 : 0;\n}\n//# sourceMappingURL=semver-compare.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport compare from './tools/semver-compare'; // Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\n\nvar V2 = '1.0.18'; // Added \"idd_prefix\" and \"default_idd_prefix\".\n\nvar V3 = '1.2.0'; // Moved `001` country code to \"nonGeographic\" section of metadata.\n\nvar V4 = '1.7.35';\nvar DEFAULT_EXT_PREFIX = ' ext. ';\nvar CALLING_CODE_REG_EXP = /^\\d+$/;\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\n\nvar Metadata =\n/*#__PURE__*/\nfunction () {\n  function Metadata(metadata) {\n    _classCallCheck(this, Metadata);\n\n    validateMetadata(metadata);\n    this.metadata = metadata;\n    setVersion.call(this, metadata);\n  }\n\n  _createClass(Metadata, [{\n    key: \"getCountries\",\n    value: function getCountries() {\n      return Object.keys(this.metadata.countries).filter(function (_) {\n        return _ !== '001';\n      });\n    }\n  }, {\n    key: \"getCountryMetadata\",\n    value: function getCountryMetadata(countryCode) {\n      return this.metadata.countries[countryCode];\n    }\n  }, {\n    key: \"nonGeographic\",\n    value: function nonGeographic() {\n      if (this.v1 || this.v2 || this.v3) return; // `nonGeographical` was a typo.\n      // It's present in metadata generated from `1.7.35` to `1.7.37`.\n\n      return this.metadata.nonGeographic || this.metadata.nonGeographical;\n    }\n  }, {\n    key: \"hasCountry\",\n    value: function hasCountry(country) {\n      return this.getCountryMetadata(country) !== undefined;\n    }\n  }, {\n    key: \"hasCallingCode\",\n    value: function hasCallingCode(callingCode) {\n      if (this.getCountryCodesForCallingCode(callingCode)) {\n        return true;\n      }\n\n      if (this.nonGeographic()) {\n        if (this.nonGeographic()[callingCode]) {\n          return true;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"isNonGeographicCallingCode\",\n    value: function isNonGeographicCallingCode(callingCode) {\n      if (this.nonGeographic()) {\n        return this.nonGeographic()[callingCode] ? true : false;\n      } else {\n        return this.getCountryCodesForCallingCode(callingCode) ? false : true;\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"country\",\n    value: function country(countryCode) {\n      return this.selectNumberingPlan(countryCode);\n    }\n  }, {\n    key: \"selectNumberingPlan\",\n    value: function selectNumberingPlan(countryCode, callingCode) {\n      // Supports just passing `callingCode` as the first argument.\n      if (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\n        callingCode = countryCode;\n        countryCode = null;\n      }\n\n      if (countryCode && countryCode !== '001') {\n        if (!this.hasCountry(countryCode)) {\n          throw new Error(\"Unknown country: \".concat(countryCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this);\n      } else if (callingCode) {\n        if (!this.hasCallingCode(callingCode)) {\n          throw new Error(\"Unknown calling code: \".concat(callingCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this);\n      } else {\n        this.numberingPlan = undefined;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getCountryCodesForCallingCode\",\n    value: function getCountryCodesForCallingCode(callingCode) {\n      var countryCodes = this.countryCallingCodes()[callingCode];\n\n      if (countryCodes) {\n        // Metadata before V4 included \"non-geographic entity\" calling codes\n        // inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\n        // Now the semantics of `country_calling_codes` has changed:\n        // it's specifically for \"countries\" now.\n        // Older versions of custom metadata will simply skip parsing\n        // \"non-geographic entity\" phone numbers with new versions\n        // of this library: it's not considered a bug,\n        // because such numbers are extremely rare,\n        // and developers extremely rarely use custom metadata.\n        if (countryCodes.length === 1 && countryCodes[0].length === 3) {\n          return;\n        }\n\n        return countryCodes;\n      }\n    }\n  }, {\n    key: \"getCountryCodeForCallingCode\",\n    value: function getCountryCodeForCallingCode(callingCode) {\n      var countryCodes = this.getCountryCodesForCallingCode(callingCode);\n\n      if (countryCodes) {\n        return countryCodes[0];\n      }\n    }\n  }, {\n    key: \"getNumberingPlanMetadata\",\n    value: function getNumberingPlanMetadata(callingCode) {\n      var countryCode = this.getCountryCodeForCallingCode(callingCode);\n\n      if (countryCode) {\n        return this.getCountryMetadata(countryCode);\n      }\n\n      if (this.nonGeographic()) {\n        var metadata = this.nonGeographic()[callingCode];\n\n        if (metadata) {\n          return metadata;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return this.metadata.countries['001'];\n        }\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"countryCallingCode\",\n    value: function countryCallingCode() {\n      return this.numberingPlan.callingCode();\n    } // Deprecated.\n\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      return this.numberingPlan.IDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      return this.numberingPlan.defaultIDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      return this.numberingPlan.nationalNumberPattern();\n    } // Deprecated.\n\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      return this.numberingPlan.possibleLengths();\n    } // Deprecated.\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return this.numberingPlan.formats();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      return this.numberingPlan.nationalPrefixForParsing();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.numberingPlan.nationalPrefixTransformRule();\n    } // Deprecated.\n\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.numberingPlan.leadingDigits();\n    } // Deprecated.\n\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      return this.numberingPlan.hasTypes();\n    } // Deprecated.\n\n  }, {\n    key: \"type\",\n    value: function type(_type) {\n      return this.numberingPlan.type(_type);\n    } // Deprecated.\n\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      return this.numberingPlan.ext();\n    }\n  }, {\n    key: \"countryCallingCodes\",\n    value: function countryCallingCodes() {\n      if (this.v1) return this.metadata.country_phone_code_to_countries;\n      return this.metadata.country_calling_codes;\n    } // Deprecated.\n\n  }, {\n    key: \"chooseCountryByCountryCallingCode\",\n    value: function chooseCountryByCountryCallingCode(callingCode) {\n      return this.selectNumberingPlan(callingCode);\n    }\n  }, {\n    key: \"hasSelectedNumberingPlan\",\n    value: function hasSelectedNumberingPlan() {\n      return this.numberingPlan !== undefined;\n    }\n  }]);\n\n  return Metadata;\n}();\n\nexport { Metadata as default };\n\nvar NumberingPlan =\n/*#__PURE__*/\nfunction () {\n  function NumberingPlan(metadata, globalMetadataObject) {\n    _classCallCheck(this, NumberingPlan);\n\n    this.globalMetadataObject = globalMetadataObject;\n    this.metadata = metadata;\n    setVersion.call(this, globalMetadataObject.metadata);\n  }\n\n  _createClass(NumberingPlan, [{\n    key: \"callingCode\",\n    value: function callingCode() {\n      return this.metadata[0];\n    } // Formatting information for regions which share\n    // a country calling code is contained by only one region\n    // for performance reasons. For example, for NANPA region\n    // (\"North American Numbering Plan Administration\",\n    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n    // it will be contained in the metadata for `US`.\n\n  }, {\n    key: \"getDefaultCountryMetadataForRegion\",\n    value: function getDefaultCountryMetadataForRegion() {\n      return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode());\n    }\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[1];\n    }\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[12];\n    }\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      if (this.v1 || this.v2) return this.metadata[1];\n      return this.metadata[2];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.v1) return;\n      return this.metadata[this.v2 ? 2 : 3];\n    }\n  }, {\n    key: \"_getFormats\",\n    value: function _getFormats(metadata) {\n      return metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n    } // For countries of the same region (e.g. NANPA)\n    // formats are all stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      var _this = this;\n\n      var formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n      return formats.map(function (_) {\n        return new Format(_, _this);\n      });\n    }\n  }, {\n    key: \"nationalPrefix\",\n    value: function nationalPrefix() {\n      return this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n    }\n  }, {\n    key: \"_getNationalPrefixFormattingRule\",\n    value: function _getNationalPrefixFormattingRule(metadata) {\n      return metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n    } // For countries of the same region (e.g. NANPA)\n    // national prefix formatting rule is stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"_nationalPrefixForParsing\",\n    value: function _nationalPrefixForParsing() {\n      return this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7];\n    }\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      // If `national_prefix_for_parsing` is not set explicitly,\n      // then infer it from `national_prefix` (if any)\n      return this._nationalPrefixForParsing() || this.nationalPrefix();\n    }\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n    }\n  }, {\n    key: \"_getNationalPrefixIsOptionalWhenFormatting\",\n    value: function _getNationalPrefixIsOptionalWhenFormatting() {\n      return !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n    } // For countries of the same region (e.g. NANPA)\n    // \"national prefix is optional when formatting\" flag is\n    // stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n    }\n  }, {\n    key: \"types\",\n    value: function types() {\n      return this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n    }\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      // Versions 1.2.0 - 1.2.4: can be `[]`.\n\n      /* istanbul ignore next */\n      if (this.types() && this.types().length === 0) {\n        return false;\n      } // Versions <= 1.2.4: can be `undefined`.\n      // Version >= 1.2.5: can be `0`.\n\n\n      return !!this.types();\n    }\n  }, {\n    key: \"type\",\n    value: function type(_type2) {\n      if (this.hasTypes() && getType(this.types(), _type2)) {\n        return new Type(getType(this.types(), _type2), this);\n      }\n    }\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      if (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n      return this.metadata[13] || DEFAULT_EXT_PREFIX;\n    }\n  }]);\n\n  return NumberingPlan;\n}();\n\nvar Format =\n/*#__PURE__*/\nfunction () {\n  function Format(format, metadata) {\n    _classCallCheck(this, Format);\n\n    this._format = format;\n    this.metadata = metadata;\n  }\n\n  _createClass(Format, [{\n    key: \"pattern\",\n    value: function pattern() {\n      return this._format[0];\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      return this._format[1];\n    }\n  }, {\n    key: \"leadingDigitsPatterns\",\n    value: function leadingDigitsPatterns() {\n      return this._format[2] || [];\n    }\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._format[3] || this.metadata.nationalPrefixFormattingRule();\n    }\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    }\n  }, {\n    key: \"nationalPrefixIsMandatoryWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\n      // National prefix is omitted if there's no national prefix formatting rule\n      // set for this country, or when the national prefix formatting rule\n      // contains no national prefix itself, or when this rule is set but\n      // national prefix is optional for this phone number format\n      // (and it is not enforced explicitly)\n      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    } // Checks whether national prefix formatting rule contains national prefix.\n\n  }, {\n    key: \"usesNationalPrefix\",\n    value: function usesNationalPrefix() {\n      return this.nationalPrefixFormattingRule() && // Check that national prefix formatting rule is not a \"dummy\" one.\n      !FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule()) // In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\n      // when `national_prefix_formatting_rule` is not present.\n      // So, `true` or `false` are returned explicitly here, so that\n      // `0` number isn't returned.\n      ? true : false;\n    }\n  }, {\n    key: \"internationalFormat\",\n    value: function internationalFormat() {\n      return this._format[5] || this.format();\n    }\n  }]);\n\n  return Format;\n}();\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\n\n\nvar FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/;\n\nvar Type =\n/*#__PURE__*/\nfunction () {\n  function Type(type, metadata) {\n    _classCallCheck(this, Type);\n\n    this.type = type;\n    this.metadata = metadata;\n  }\n\n  _createClass(Type, [{\n    key: \"pattern\",\n    value: function pattern() {\n      if (this.metadata.v1) return this.type;\n      return this.type[0];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.metadata.v1) return;\n      return this.type[1] || this.metadata.possibleLengths();\n    }\n  }]);\n\n  return Type;\n}();\n\nfunction getType(types, type) {\n  switch (type) {\n    case 'FIXED_LINE':\n      return types[0];\n\n    case 'MOBILE':\n      return types[1];\n\n    case 'TOLL_FREE':\n      return types[2];\n\n    case 'PREMIUM_RATE':\n      return types[3];\n\n    case 'PERSONAL_NUMBER':\n      return types[4];\n\n    case 'VOICEMAIL':\n      return types[5];\n\n    case 'UAN':\n      return types[6];\n\n    case 'PAGER':\n      return types[7];\n\n    case 'VOIP':\n      return types[8];\n\n    case 'SHARED_COST':\n      return types[9];\n  }\n}\n\nexport function validateMetadata(metadata) {\n  if (!metadata) {\n    throw new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n  } // `country_phone_code_to_countries` was renamed to\n  // `country_calling_codes` in `1.0.18`.\n\n\n  if (!is_object(metadata) || !is_object(metadata.countries)) {\n    throw new Error(\"[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got \".concat(is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata, \".\"));\n  }\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n}; // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar type_of = function type_of(_) {\n  return _typeof(_);\n};\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\n\n\nexport function getExtPrefix(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).ext();\n  }\n\n  return DEFAULT_EXT_PREFIX;\n}\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\n\nexport function getCountryCallingCode(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).countryCallingCode();\n  }\n\n  throw new Error(\"Unknown country: \".concat(country));\n}\nexport function isSupportedCountry(country, metadata) {\n  // metadata = new Metadata(metadata)\n  // return metadata.hasCountry(country)\n  return metadata.countries[country] !== undefined;\n}\n\nfunction setVersion(metadata) {\n  var version = metadata.version;\n\n  if (typeof version === 'number') {\n    this.v1 = version === 1;\n    this.v2 = version === 2;\n    this.v3 = version === 3;\n    this.v4 = version === 4;\n  } else {\n    if (!version) {\n      this.v1 = true;\n    } else if (compare(version, V3) === -1) {\n      this.v2 = true;\n    } else if (compare(version, V4) === -1) {\n      this.v3 = true;\n    } else {\n      this.v4 = true;\n    }\n  }\n} // const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\n// function isCountryCode(countryCode) {\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\n// }\n//# sourceMappingURL=metadata.js.map","import { VALID_DIGITS } from '../../constants'; // The RFC 3966 format for extensions.\n\nvar RFC3966_EXTN_PREFIX = ';ext=';\n/**\r\n * Helper method for constructing regular expressions for parsing. Creates\r\n * an expression that captures up to max_length digits.\r\n * @return {string} RegEx pattern to capture extension digits.\r\n */\n\nvar getExtensionDigitsPattern = function getExtensionDigitsPattern(maxLength) {\n  return \"([\".concat(VALID_DIGITS, \"]{1,\").concat(maxLength, \"})\");\n};\n/**\r\n * Helper initialiser method to create the regular-expression pattern to match\r\n * extensions.\r\n * Copy-pasted from Google's `libphonenumber`:\r\n * https://github.com/google/libphonenumber/blob/55b2646ec9393f4d3d6661b9c82ef9e258e8b829/javascript/i18n/phonenumbers/phonenumberutil.js#L759-L766\r\n * @return {string} RegEx pattern to capture extensions.\r\n */\n\n\nexport default function createExtensionPattern(purpose) {\n  // We cap the maximum length of an extension based on the ambiguity of the way\n  // the extension is prefixed. As per ITU, the officially allowed length for\n  // extensions is actually 40, but we don't support this since we haven't seen real\n  // examples and this introduces many false interpretations as the extension labels\n  // are not standardized.\n\n  /** @type {string} */\n  var extLimitAfterExplicitLabel = '20';\n  /** @type {string} */\n\n  var extLimitAfterLikelyLabel = '15';\n  /** @type {string} */\n\n  var extLimitAfterAmbiguousChar = '9';\n  /** @type {string} */\n\n  var extLimitWhenNotSure = '6';\n  /** @type {string} */\n\n  var possibleSeparatorsBetweenNumberAndExtLabel = \"[ \\xA0\\\\t,]*\"; // Optional full stop (.) or colon, followed by zero or more spaces/tabs/commas.\n\n  /** @type {string} */\n\n  var possibleCharsAfterExtLabel = \"[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*\";\n  /** @type {string} */\n\n  var optionalExtnSuffix = \"#?\"; // Here the extension is called out in more explicit way, i.e mentioning it obvious\n  // patterns like \"ext.\".\n\n  /** @type {string} */\n\n  var explicitExtLabels = \"(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\\u0434\\u043E\\u0431|anexo)\"; // One-character symbols that can be used to indicate an extension, and less\n  // commonly used or more ambiguous extension labels.\n\n  /** @type {string} */\n\n  var ambiguousExtLabels = \"(?:[x\\uFF58#\\uFF03~\\uFF5E]|int|\\uFF49\\uFF4E\\uFF54)\"; // When extension is not separated clearly.\n\n  /** @type {string} */\n\n  var ambiguousSeparator = \"[- ]+\"; // This is the same as possibleSeparatorsBetweenNumberAndExtLabel, but not matching\n  // comma as extension label may have it.\n\n  /** @type {string} */\n\n  var possibleSeparatorsNumberExtLabelNoComma = \"[ \\xA0\\\\t]*\"; // \",,\" is commonly used for auto dialling the extension when connected. First\n  // comma is matched through possibleSeparatorsBetweenNumberAndExtLabel, so we do\n  // not repeat it here. Semi-colon works in Iphone and Android also to pop up a\n  // button with the extension number following.\n\n  /** @type {string} */\n\n  var autoDiallingAndExtLabelsFound = \"(?:,{2}|;)\";\n  /** @type {string} */\n\n  var rfcExtn = RFC3966_EXTN_PREFIX + getExtensionDigitsPattern(extLimitAfterExplicitLabel);\n  /** @type {string} */\n\n  var explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterExplicitLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var americanStyleExtnWithSuffix = ambiguousSeparator + getExtensionDigitsPattern(extLimitWhenNotSure) + \"#\";\n  /** @type {string} */\n\n  var autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterLikelyLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma + \"(?:,)+\" + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix; // The first regular expression covers RFC 3966 format, where the extension is added\n  // using \";ext=\". The second more generic where extension is mentioned with explicit\n  // labels like \"ext:\". In both the above cases we allow more numbers in extension than\n  // any other extension labels. The third one captures when single character extension\n  // labels or less commonly used labels are used. In such cases we capture fewer\n  // extension digits in order to reduce the chance of falsely interpreting two\n  // numbers beside each other as a number + extension. The fourth one covers the\n  // special case of American numbers where the extension is written with a hash\n  // at the end, such as \"- 503#\". The fifth one is exclusively for extension\n  // autodialling formats which are used when dialling and in this case we accept longer\n  // extensions. The last one is more liberal on the number of commas that acts as\n  // extension labels, so we have a strict cap on the number of digits in such extensions.\n\n  return rfcExtn + \"|\" + explicitExtn + \"|\" + ambiguousExtn + \"|\" + americanStyleExtnWithSuffix + \"|\" + autoDiallingExtn + \"|\" + onlyCommasExtn;\n}\n//# sourceMappingURL=createExtensionPattern.js.map","import { parseDigit } from './helpers/parseDigits';\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\n\nexport default function parseIncompletePhoneNumber(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n    result += parsePhoneNumberCharacter(character, result) || '';\n  }\n\n  return result;\n}\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\n\nexport function parsePhoneNumberCharacter(character, prevParsedCharacters) {\n  // Only allow a leading `+`.\n  if (character === '+') {\n    // If this `+` is not the first parsed character\n    // then discard it.\n    if (prevParsedCharacters) {\n      return;\n    }\n\n    return '+';\n  } // Allow digits.\n\n\n  return parseDigit(character);\n}\n//# sourceMappingURL=parseIncompletePhoneNumber.js.map","// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n  '0': '0',\n  '1': '1',\n  '2': '2',\n  '3': '3',\n  '4': '4',\n  '5': '5',\n  '6': '6',\n  '7': '7',\n  '8': '8',\n  '9': '9',\n  \"\\uFF10\": '0',\n  // Fullwidth digit 0\n  \"\\uFF11\": '1',\n  // Fullwidth digit 1\n  \"\\uFF12\": '2',\n  // Fullwidth digit 2\n  \"\\uFF13\": '3',\n  // Fullwidth digit 3\n  \"\\uFF14\": '4',\n  // Fullwidth digit 4\n  \"\\uFF15\": '5',\n  // Fullwidth digit 5\n  \"\\uFF16\": '6',\n  // Fullwidth digit 6\n  \"\\uFF17\": '7',\n  // Fullwidth digit 7\n  \"\\uFF18\": '8',\n  // Fullwidth digit 8\n  \"\\uFF19\": '9',\n  // Fullwidth digit 9\n  \"\\u0660\": '0',\n  // Arabic-indic digit 0\n  \"\\u0661\": '1',\n  // Arabic-indic digit 1\n  \"\\u0662\": '2',\n  // Arabic-indic digit 2\n  \"\\u0663\": '3',\n  // Arabic-indic digit 3\n  \"\\u0664\": '4',\n  // Arabic-indic digit 4\n  \"\\u0665\": '5',\n  // Arabic-indic digit 5\n  \"\\u0666\": '6',\n  // Arabic-indic digit 6\n  \"\\u0667\": '7',\n  // Arabic-indic digit 7\n  \"\\u0668\": '8',\n  // Arabic-indic digit 8\n  \"\\u0669\": '9',\n  // Arabic-indic digit 9\n  \"\\u06F0\": '0',\n  // Eastern-Arabic digit 0\n  \"\\u06F1\": '1',\n  // Eastern-Arabic digit 1\n  \"\\u06F2\": '2',\n  // Eastern-Arabic digit 2\n  \"\\u06F3\": '3',\n  // Eastern-Arabic digit 3\n  \"\\u06F4\": '4',\n  // Eastern-Arabic digit 4\n  \"\\u06F5\": '5',\n  // Eastern-Arabic digit 5\n  \"\\u06F6\": '6',\n  // Eastern-Arabic digit 6\n  \"\\u06F7\": '7',\n  // Eastern-Arabic digit 7\n  \"\\u06F8\": '8',\n  // Eastern-Arabic digit 8\n  \"\\u06F9\": '9' // Eastern-Arabic digit 9\n\n};\nexport function parseDigit(character) {\n  return DIGITS[character];\n}\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\n\nexport default function parseDigits(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n    var digit = parseDigit(character);\n\n    if (digit) {\n      result += digit;\n    }\n  }\n\n  return result;\n}\n//# sourceMappingURL=parseDigits.js.map","/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\nexport default function mergeArrays(a, b) {\n  var merged = a.slice();\n\n  for (var _iterator = b, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var element = _ref;\n\n    if (a.indexOf(element) < 0) {\n      merged.push(element);\n    }\n  }\n\n  return merged.sort(function (a, b) {\n    return a - b;\n  }); // ES6 version, requires Set polyfill.\n  // let merged = new Set(a)\n  // for (const element of b) {\n  // \tmerged.add(i)\n  // }\n  // return Array.from(merged).sort((a, b) => a - b)\n}\n//# sourceMappingURL=mergeArrays.js.map","import mergeArrays from './mergeArrays';\nexport default function checkNumberLength(nationalNumber, metadata) {\n  return checkNumberLengthForType(nationalNumber, undefined, metadata);\n} // Checks whether a number is possible for the country based on its length.\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\n\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\n  var type_info = metadata.type(type); // There should always be \"<possiblePengths/>\" set for every type element.\n  // This is declared in the XML schema.\n  // For size efficiency, where a sub-description (e.g. fixed-line)\n  // has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n  // so we fall back to the \"general description\". Where no numbers of the type\n  // exist at all, there is one possible length (-1) which is guaranteed\n  // not to match the length of any real phone number.\n\n  var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths(); // let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n  // Metadata before version `1.0.18` didn't contain `possible_lengths`.\n\n  if (!possible_lengths) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (type === 'FIXED_LINE_OR_MOBILE') {\n    // No such country in metadata.\n\n    /* istanbul ignore next */\n    if (!metadata.type('FIXED_LINE')) {\n      // The rare case has been encountered where no fixedLine data is available\n      // (true for some non-geographic entities), so we just check mobile.\n      return checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n    }\n\n    var mobile_type = metadata.type('MOBILE');\n\n    if (mobile_type) {\n      // Merge the mobile data in if there was any. \"Concat\" creates a new\n      // array, it doesn't edit possible_lengths in place, so we don't need a copy.\n      // Note that when adding the possible lengths from mobile, we have\n      // to again check they aren't empty since if they are this indicates\n      // they are the same as the general desc and should be obtained from there.\n      possible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths()); // The current list is sorted; we need to merge in the new list and\n      // re-sort (duplicates are okay). Sorting isn't so expensive because\n      // the lists are very small.\n      // if (local_lengths) {\n      // \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n      // } else {\n      // \tlocal_lengths = mobile_type.possibleLengthsLocal()\n      // }\n    }\n  } // If the type doesn't exist then return 'INVALID_LENGTH'.\n  else if (type && !type_info) {\n      return 'INVALID_LENGTH';\n    }\n\n  var actual_length = nationalNumber.length; // In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n  // // This is safe because there is never an overlap beween the possible lengths\n  // // and the local-only lengths; this is checked at build time.\n  // if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n  // {\n  // \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n  // }\n\n  var minimum_length = possible_lengths[0];\n\n  if (minimum_length === actual_length) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (minimum_length > actual_length) {\n    return 'TOO_SHORT';\n  }\n\n  if (possible_lengths[possible_lengths.length - 1] < actual_length) {\n    return 'TOO_LONG';\n  } // We skip the first element since we've already checked it.\n\n\n  return possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}\n//# sourceMappingURL=checkNumberLength.js.map","import Metadata from './metadata';\nimport checkNumberLength from './helpers/checkNumberLength';\nexport default function isPossiblePhoneNumber(input, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (options.v2) {\n    if (!input.countryCallingCode) {\n      throw new Error('Invalid phone number object passed');\n    }\n\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else {\n    if (!input.phone) {\n      return false;\n    }\n\n    if (input.country) {\n      if (!metadata.hasCountry(input.country)) {\n        throw new Error(\"Unknown country: \".concat(input.country));\n      }\n\n      metadata.country(input.country);\n    } else {\n      if (!input.countryCallingCode) {\n        throw new Error('Invalid phone number object passed');\n      }\n\n      metadata.selectNumberingPlan(input.countryCallingCode);\n    }\n  }\n\n  if (metadata.possibleLengths()) {\n    return isPossibleNumber(input.phone || input.nationalNumber, metadata);\n  } else {\n    // There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\n    // were missing for \"non-geographical\" numbering plans.\n    // Just assume the number is possible in such cases:\n    // it's unlikely that anyone generated their custom metadata\n    // in that short period of time (one day).\n    // This code can be removed in some future major version update.\n    if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\n      // \"Non-geographic entities\" did't have `possibleLengths`\n      // due to a bug in metadata generation process.\n      return true;\n    } else {\n      throw new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\n    }\n  }\n}\nexport function isPossibleNumber(nationalNumber, metadata) {\n  //, isInternational) {\n  switch (checkNumberLength(nationalNumber, metadata)) {\n    case 'IS_POSSIBLE':\n      return true;\n    // This library ignores \"local-only\" phone numbers (for simplicity).\n    // See the readme for more info on what are \"local-only\" phone numbers.\n    // case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \treturn !isInternational\n\n    default:\n      return false;\n  }\n}\n//# sourceMappingURL=isPossibleNumber_.js.map","/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\nexport default function matchesEntirely(text, regular_expression) {\n  // If assigning the `''` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  text = text || '';\n  return new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n//# sourceMappingURL=matchesEntirely.js.map","import Metadata from '../metadata';\nimport matchesEntirely from './matchesEntirely';\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL']; // Finds out national phone number type (fixed line, mobile, etc)\n\nexport default function getNumberType(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {}; // When `parse()` returned `{}`\n  // meaning that the phone number is not a valid one.\n\n  if (!input.country) {\n    return;\n  }\n\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode);\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // The following is copy-pasted from the original function:\n  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n  // Is this national number even valid for this country\n\n  if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n    return;\n  } // Is it fixed line number\n\n\n  if (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\n    // Because duplicate regular expressions are removed\n    // to reduce metadata size, if \"mobile\" pattern is \"\"\n    // then it means it was removed due to being a duplicate of the fixed-line pattern.\n    //\n    if (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // v1 metadata.\n    // Legacy.\n    // Deprecated.\n\n\n    if (!metadata.type('MOBILE')) {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // Check if the number happens to qualify as both fixed line and mobile.\n    // (no such country in the minimal metadata set)\n\n    /* istanbul ignore if */\n\n\n    if (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n\n    return 'FIXED_LINE';\n  }\n\n  for (var _i = 0, _NON_FIXED_LINE_PHONE = NON_FIXED_LINE_PHONE_TYPES; _i < _NON_FIXED_LINE_PHONE.length; _i++) {\n    var type = _NON_FIXED_LINE_PHONE[_i];\n\n    if (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\n      return type;\n    }\n  }\n}\nexport function isNumberTypeEqualTo(nationalNumber, type, metadata) {\n  type = metadata.type(type);\n\n  if (!type || !type.pattern()) {\n    return false;\n  } // Check if any possible number lengths are present;\n  // if so, we use them to avoid checking\n  // the validation pattern if they don't match.\n  // If they are absent, this means they match\n  // the general description, which we have\n  // already checked before a specific number type.\n\n\n  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n    return false;\n  }\n\n  return matchesEntirely(nationalNumber, type.pattern());\n}\n//# sourceMappingURL=getNumberType.js.map","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport matchesEntirely from './helpers/matchesEntirely';\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat';\nimport Metadata, { getCountryCallingCode } from './metadata';\nimport getIddPrefix from './helpers/getIddPrefix';\nimport { formatRFC3966 } from './helpers/RFC3966';\nvar DEFAULT_OPTIONS = {\n  formatExtension: function formatExtension(formattedNumber, extension, metadata) {\n    return \"\".concat(formattedNumber).concat(metadata.ext()).concat(extension);\n  } // Formats a phone number\n  //\n  // Example use cases:\n  //\n  // ```js\n  // formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n  // formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n  // formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n  // formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n  // formatNumber('+78005553535', 'NATIONAL')\n  // formatNumber('+78005553535', 'NATIONAL', metadata)\n  // ```\n  //\n\n};\nexport default function formatNumber(input, format, options, metadata) {\n  // Apply default options.\n  if (options) {\n    options = _objectSpread({}, DEFAULT_OPTIONS, options);\n  } else {\n    options = DEFAULT_OPTIONS;\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (input.country && input.country !== '001') {\n    // Validate `input.country`.\n    if (!metadata.hasCountry(input.country)) {\n      throw new Error(\"Unknown country: \".concat(input.country));\n    }\n\n    metadata.country(input.country);\n  } else if (input.countryCallingCode) {\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else return input.phone || '';\n\n  var countryCallingCode = metadata.countryCallingCode();\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // This variable should have been declared inside `case`s\n  // but Babel has a bug and it says \"duplicate variable declaration\".\n\n  var number;\n\n  switch (format) {\n    case 'NATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '';\n      }\n\n      number = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'INTERNATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return \"+\".concat(countryCallingCode);\n      }\n\n      number = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options);\n      number = \"+\".concat(countryCallingCode, \" \").concat(number);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'E.164':\n      // `E.164` doesn't define \"phone number extensions\".\n      return \"+\".concat(countryCallingCode).concat(nationalNumber);\n\n    case 'RFC3966':\n      return formatRFC3966({\n        number: \"+\".concat(countryCallingCode).concat(nationalNumber),\n        ext: input.ext\n      });\n    // For reference, here's Google's IDD formatter:\n    // https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\n    // Not saying that this IDD formatter replicates it 1:1, but it seems to work.\n    // Who would even need to format phone numbers in IDD format anyway?\n\n    case 'IDD':\n      if (!options.fromCountry) {\n        return; // throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n      }\n\n      var formattedNumber = formatIDD(nationalNumber, input.carrierCode, countryCallingCode, options.fromCountry, metadata);\n      return addExtension(formattedNumber, input.ext, metadata, options.formatExtension);\n\n    default:\n      throw new Error(\"Unknown \\\"format\\\" argument passed to \\\"formatNumber()\\\": \\\"\".concat(format, \"\\\"\"));\n  }\n}\n\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\n  var format = chooseFormatForNumber(metadata.formats(), number);\n\n  if (!format) {\n    return number;\n  }\n\n  return formatNationalNumberUsingFormat(number, format, {\n    useInternationalFormat: formatAs === 'INTERNATIONAL',\n    withNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options && options.nationalPrefix === false ? false : true,\n    carrierCode: carrierCode,\n    metadata: metadata\n  });\n}\n\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\n  for (var _iterator = availableFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var format = _ref;\n\n    // Validate leading digits\n    if (format.leadingDigitsPatterns().length > 0) {\n      // The last leading_digits_pattern is used here, as it is the most detailed\n      var lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]; // If leading digits don't match then move on to the next phone number format\n\n      if (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\n        continue;\n      }\n    } // Check that the national number matches the phone number format regular expression\n\n\n    if (matchesEntirely(nationalNnumber, format.pattern())) {\n      return format;\n    }\n  }\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n  return ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nfunction formatIDD(nationalNumber, carrierCode, countryCallingCode, fromCountry, metadata) {\n  var fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata); // When calling within the same country calling code.\n\n  if (fromCountryCallingCode === countryCallingCode) {\n    var formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata); // For NANPA regions, return the national format for these regions\n    // but prefix it with the country calling code.\n\n    if (countryCallingCode === '1') {\n      return countryCallingCode + ' ' + formattedNumber;\n    } // If regions share a country calling code, the country calling code need\n    // not be dialled. This also applies when dialling within a region, so this\n    // if clause covers both these cases. Technically this is the case for\n    // dialling from La Reunion to other overseas departments of France (French\n    // Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n    // this edge case for now and for those cases return the version including\n    // country calling code. Details here:\n    // http://www.petitfute.com/voyage/225-info-pratiques-reunion\n    //\n\n\n    return formattedNumber;\n  }\n\n  var iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata);\n\n  if (iddPrefix) {\n    return \"\".concat(iddPrefix, \" \").concat(countryCallingCode, \" \").concat(formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata));\n  }\n}\n//# sourceMappingURL=format_.js.map","function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport isViablePhoneNumber from './isViablePhoneNumber'; // https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\nexport function parseRFC3966(text) {\n  var number;\n  var ext; // Replace \"tel:\" with \"tel=\" for parsing convenience.\n\n  text = text.replace(/^tel:/, 'tel=');\n\n  for (var _iterator = text.split(';'), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var part = _ref;\n\n    var _part$split = part.split('='),\n        _part$split2 = _slicedToArray(_part$split, 2),\n        name = _part$split2[0],\n        value = _part$split2[1];\n\n    switch (name) {\n      case 'tel':\n        number = value;\n        break;\n\n      case 'ext':\n        ext = value;\n        break;\n\n      case 'phone-context':\n        // Only \"country contexts\" are supported.\n        // \"Domain contexts\" are ignored.\n        if (value[0] === '+') {\n          number = value + number;\n        }\n\n        break;\n    }\n  } // If the phone number is not viable, then abort.\n\n\n  if (!isViablePhoneNumber(number)) {\n    return {};\n  }\n\n  var result = {\n    number: number\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\n\nexport function formatRFC3966(_ref2) {\n  var number = _ref2.number,\n      ext = _ref2.ext;\n\n  if (!number) {\n    return '';\n  }\n\n  if (number[0] !== '+') {\n    throw new Error(\"\\\"formatRFC3966()\\\" expects \\\"number\\\" to be in E.164 format.\");\n  }\n\n  return \"tel:\".concat(number).concat(ext ? ';ext=' + ext : '');\n}\n//# sourceMappingURL=RFC3966.js.map","import Metadata from '../metadata';\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\n\nvar SINGLE_IDD_PREFIX_REG_EXP = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/; // For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\n\nexport default function getIddPrefix(country, callingCode, metadata) {\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n\n  if (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {\n    return countryMetadata.IDDPrefix();\n  }\n\n  return countryMetadata.defaultIDDPrefix();\n}\n//# sourceMappingURL=getIddPrefix.js.map","import applyInternationalSeparatorStyle from './applyInternationalSeparatorStyle'; // This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly. Therefore, we use `\\d`, so that the first\n// group actually used in the pattern will be matched.\n\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\nexport default function formatNationalNumberUsingFormat(number, format, _ref) {\n  var useInternationalFormat = _ref.useInternationalFormat,\n      withNationalPrefix = _ref.withNationalPrefix,\n      carrierCode = _ref.carrierCode,\n      metadata = _ref.metadata;\n  var formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalFormat ? format.internationalFormat() : // This library doesn't use `domestic_carrier_code_formatting_rule`,\n  // because that one is only used when formatting phone numbers\n  // for dialing from a mobile phone, and this is not a dialing library.\n  // carrierCode && format.domesticCarrierCodeFormattingRule()\n  // \t// First, replace the $CC in the formatting rule with the desired carrier code.\n  // \t// Then, replace the $FG in the formatting rule with the first group\n  // \t// and the carrier code combined in the appropriate way.\n  // \t? format.format().replace(FIRST_GROUP_PATTERN, format.domesticCarrierCodeFormattingRule().replace('$CC', carrierCode))\n  // \t: (\n  // \t\twithNationalPrefix && format.nationalPrefixFormattingRule()\n  // \t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\n  // \t\t\t: format.format()\n  // \t)\n  withNationalPrefix && format.nationalPrefixFormattingRule() ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\n  if (useInternationalFormat) {\n    return applyInternationalSeparatorStyle(formattedNumber);\n  }\n\n  return formattedNumber;\n}\n//# sourceMappingURL=formatNationalNumberUsingFormat.js.map","import { VALID_PUNCTUATION } from '../constants'; // Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\n\nexport default function applyInternationalSeparatorStyle(formattedNumber) {\n  return formattedNumber.replace(new RegExp(\"[\".concat(VALID_PUNCTUATION, \"]+\"), 'g'), ' ').trim();\n}\n//# sourceMappingURL=applyInternationalSeparatorStyle.js.map","import extractNationalNumberFromPossiblyIncompleteNumber from './extractNationalNumberFromPossiblyIncompleteNumber';\nimport matchesEntirely from './matchesEntirely';\nimport checkNumberLength from './checkNumberLength';\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\n\nexport default function extractNationalNumber(number, metadata) {\n  // Parsing national prefixes and carrier codes\n  // is only required for local phone numbers\n  // but some people don't understand that\n  // and sometimes write international phone numbers\n  // with national prefixes (or maybe even carrier codes).\n  // http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n  // Google's original library forgives such mistakes\n  // and so does this library, because it has been requested:\n  // https://github.com/catamphetamine/libphonenumber-js/issues/127\n  var _extractNationalNumbe = extractNationalNumberFromPossiblyIncompleteNumber(number, metadata),\n      nationalNumber = _extractNationalNumbe.nationalNumber,\n      carrierCode = _extractNationalNumbe.carrierCode;\n\n  if (!shouldExtractNationalPrefix(number, nationalNumber, metadata)) {\n    // Don't strip the national prefix.\n    return {\n      nationalNumber: number\n    };\n  } // If a national prefix has been extracted, check to see\n  // if the resultant number isn't too short.\n  // Same code in Google's `libphonenumber`:\n  // https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3291-L3302\n  // For some reason, they do this check right after the `national_number_pattern` check\n  // this library does in `shouldExtractNationalPrefix()` function.\n  // Why is there a second \"resultant\" number validity check?\n  // They don't provide an explanation.\n  // This library just copies the behavior.\n\n\n  if (number.length !== nationalNumber.length + (carrierCode ? carrierCode.length : 0)) {\n    // If not using legacy generated metadata (before version `1.0.18`)\n    // then it has \"possible lengths\", so use those to validate the number length.\n    if (metadata.possibleLengths()) {\n      // \"We require that the NSN remaining after stripping the national prefix and\n      // carrier code be long enough to be a possible length for the region.\n      // Otherwise, we don't do the stripping, since the original number could be\n      // a valid short number.\"\n      // https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\n      switch (checkNumberLength(nationalNumber, metadata)) {\n        case 'TOO_SHORT':\n        case 'INVALID_LENGTH':\n          // case 'IS_POSSIBLE_LOCAL_ONLY':\n          // Don't strip the national prefix.\n          return {\n            nationalNumber: number\n          };\n      }\n    }\n  }\n\n  return {\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n} // In some countries, the same digit could be a national prefix\n// or a leading digit of a valid phone number.\n// For example, in Russia, national prefix is `8`,\n// and also `800 555 35 35` is a valid number\n// in which `8` is not a national prefix, but the first digit\n// of a national (significant) number.\n// Same's with Belarus:\n// `82004910060` is a valid national (significant) number,\n// but `2004910060` is not.\n// To support such cases (to prevent the code from always stripping\n// national prefix), a condition is imposed: a national prefix\n// is not extracted when the original number is \"viable\" and the\n// resultant number is not, a \"viable\" national number being the one\n// that matches `national_number_pattern`.\n\nfunction shouldExtractNationalPrefix(number, nationalSignificantNumber, metadata) {\n  // The equivalent in Google's code is:\n  // https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L2969-L3004\n  if (matchesEntirely(number, metadata.nationalNumberPattern()) && !matchesEntirely(nationalSignificantNumber, metadata.nationalNumberPattern())) {\n    return false;\n  } // Just \"possible\" number check would be more relaxed, so it's not used.\n  // if (isPossibleNumber(number, metadata) &&\n  // \t!isPossibleNumber(numberWithNationalPrefixExtracted, metadata)) {\n  // \treturn false\n  // }\n\n\n  return true;\n}\n//# sourceMappingURL=extractNationalNumber.js.map","/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, nationalPrefix: string? carrierCode: string? }`.\r\n */\nexport default function extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {\n  if (number && metadata.numberingPlan.nationalPrefixForParsing()) {\n    // See METADATA.md for the description of\n    // `national_prefix_for_parsing` and `national_prefix_transform_rule`.\n    // Attempt to parse the first digits as a national prefix.\n    var prefixPattern = new RegExp('^(?:' + metadata.numberingPlan.nationalPrefixForParsing() + ')');\n    var prefixMatch = prefixPattern.exec(number);\n\n    if (prefixMatch) {\n      var nationalNumber;\n      var carrierCode; // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\n      // If a `national_prefix_for_parsing` has any \"capturing groups\"\n      // then it means that the national (significant) number is equal to\n      // those \"capturing groups\" transformed via `national_prefix_transform_rule`,\n      // and nothing could be said about the actual national prefix:\n      // what is it and was it even there.\n      // If a `national_prefix_for_parsing` doesn't have any \"capturing groups\",\n      // then everything it matches is a national prefix.\n      // To determine whether `national_prefix_for_parsing` matched any\n      // \"capturing groups\", the value of the result of calling `.exec()`\n      // is looked at, and if it has non-undefined values where there're\n      // \"capturing groups\" in the regular expression, then it means\n      // that \"capturing groups\" have been matched.\n      // It's not possible to tell whether there'll be any \"capturing gropus\"\n      // before the matching process, because a `national_prefix_for_parsing`\n      // could exhibit both behaviors.\n\n      var capturedGroupsCount = prefixMatch.length - 1;\n      var hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount];\n\n      if (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {\n        nationalNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule()); // If there's more than one captured group,\n        // then carrier code is the second one.\n\n        if (capturedGroupsCount > 1) {\n          carrierCode = prefixMatch[1];\n        }\n      } // If there're no \"capturing groups\",\n      // or if there're \"capturing groups\" but no\n      // `national_prefix_transform_rule`,\n      // then just strip the national prefix from the number,\n      // and possibly a carrier code.\n      // Seems like there could be more.\n      else {\n          // `prefixBeforeNationalNumber` is the whole substring matched by\n          // the `national_prefix_for_parsing` regular expression.\n          // There seem to be no guarantees that it's just a national prefix.\n          // For example, if there's a carrier code, it's gonna be a\n          // part of `prefixBeforeNationalNumber` too.\n          var prefixBeforeNationalNumber = prefixMatch[0];\n          nationalNumber = number.slice(prefixBeforeNationalNumber.length); // If there's at least one captured group,\n          // then carrier code is the first one.\n\n          if (hasCapturedGroups) {\n            carrierCode = prefixMatch[1];\n          }\n        } // Tries to guess whether a national prefix was present in the input.\n      // This is not something copy-pasted from Google's library:\n      // they don't seem to have an equivalent for that.\n      // So this isn't an \"officially approved\" way of doing something like that.\n      // But since there seems no other existing method, this library uses it.\n\n\n      var nationalPrefix;\n\n      if (hasCapturedGroups) {\n        var possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1]);\n        var possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup); // Example: an Argentinian (AR) phone number `0111523456789`.\n        // `prefixMatch[0]` is `01115`, and `$1` is `11`,\n        // and the rest of the phone number is `23456789`.\n        // The national number is transformed via `9$1` to `91123456789`.\n        // National prefix `0` is detected being present at the start.\n        // if (possibleNationalPrefix.indexOf(metadata.numberingPlan.nationalPrefix()) === 0) {\n\n        if (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {\n          nationalPrefix = metadata.numberingPlan.nationalPrefix();\n        }\n      } else {\n        nationalPrefix = prefixMatch[0];\n      }\n\n      return {\n        nationalNumber: nationalNumber,\n        nationalPrefix: nationalPrefix,\n        carrierCode: carrierCode\n      };\n    }\n  }\n\n  return {\n    nationalNumber: number\n  };\n}\n//# sourceMappingURL=extractNationalNumberFromPossiblyIncompleteNumber.js.map","import stripIddPrefix from './stripIddPrefix';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './extractCountryCallingCodeFromInternationalNumberWithoutPlusSign';\nimport Metadata from '../metadata';\nimport { MAX_LENGTH_COUNTRY_CODE } from '../constants';\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\n\nexport default function extractCountryCallingCode(number, country, callingCode, metadata) {\n  if (!number) {\n    return {};\n  } // If this is not an international phone number,\n  // then either extract an \"IDD\" prefix, or extract a\n  // country calling code from a number by autocorrecting it\n  // by prepending a leading `+` in cases when it starts\n  // with the country calling code.\n  // https://wikitravel.org/en/International_dialling_prefix\n  // https://github.com/catamphetamine/libphonenumber-js/issues/376\n\n\n  if (number[0] !== '+') {\n    // Convert an \"out-of-country\" dialing phone number\n    // to a proper international phone number.\n    var numberWithoutIDD = stripIddPrefix(number, country, callingCode, metadata); // If an IDD prefix was stripped then\n    // convert the number to international one\n    // for subsequent parsing.\n\n    if (numberWithoutIDD && numberWithoutIDD !== number) {\n      number = '+' + numberWithoutIDD;\n    } else {\n      // Check to see if the number starts with the country calling code\n      // for the default country. If so, we remove the country calling code,\n      // and do some checks on the validity of the number before and after.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      if (country || callingCode) {\n        var _extractCountryCallin = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata),\n            countryCallingCode = _extractCountryCallin.countryCallingCode,\n            shorterNumber = _extractCountryCallin.number;\n\n        if (countryCallingCode) {\n          return {\n            countryCallingCode: countryCallingCode,\n            number: shorterNumber\n          };\n        }\n      }\n\n      return {\n        number: number\n      };\n    }\n  } // Fast abortion: country codes do not begin with a '0'\n\n\n  if (number[1] === '0') {\n    return {};\n  }\n\n  metadata = new Metadata(metadata); // The thing with country phone codes\n  // is that they are orthogonal to each other\n  // i.e. there's no such country phone code A\n  // for which country phone code B exists\n  // where B starts with A.\n  // Therefore, while scanning digits,\n  // if a valid country code is found,\n  // that means that it is the country code.\n  //\n\n  var i = 2;\n\n  while (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n    var _countryCallingCode = number.slice(1, i);\n\n    if (metadata.hasCallingCode(_countryCallingCode)) {\n      metadata.selectNumberingPlan(_countryCallingCode);\n      return {\n        countryCallingCode: _countryCallingCode,\n        number: number.slice(i)\n      };\n    }\n\n    i++;\n  }\n\n  return {};\n}\n//# sourceMappingURL=extractCountryCallingCode.js.map","import Metadata from '../metadata';\nimport { VALID_DIGITS } from '../constants';\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\nexport default function stripIddPrefix(number, country, callingCode, metadata) {\n  if (!country) {\n    return;\n  } // Check if the number is IDD-prefixed.\n\n\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n  if (number.search(IDDPrefixPattern) !== 0) {\n    return;\n  } // Strip IDD prefix.\n\n\n  number = number.slice(number.match(IDDPrefixPattern)[0].length); // If there're any digits after an IDD prefix,\n  // then those digits are a country calling code.\n  // Since no country code starts with a `0`,\n  // the code below validates that the next digit (if present) is not `0`.\n\n  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n\n  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n    if (matchedGroups[1] === '0') {\n      return;\n    }\n  }\n\n  return number;\n}\n//# sourceMappingURL=stripIddPrefix.js.map","import Metadata from '../metadata';\nimport matchesEntirely from './matchesEntirely';\nimport extractNationalNumber from './extractNationalNumber';\nimport checkNumberLength from './checkNumberLength';\nimport getCountryCallingCode from '../getCountryCallingCode';\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\n\nexport default function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata) {\n  var countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode;\n\n  if (number.indexOf(countryCallingCode) === 0) {\n    metadata = new Metadata(metadata);\n    metadata.selectNumberingPlan(country, callingCode);\n    var possibleShorterNumber = number.slice(countryCallingCode.length);\n\n    var _extractNationalNumbe = extractNationalNumber(possibleShorterNumber, metadata),\n        possibleShorterNationalNumber = _extractNationalNumbe.nationalNumber;\n\n    var _extractNationalNumbe2 = extractNationalNumber(number, metadata),\n        nationalNumber = _extractNationalNumbe2.nationalNumber; // If the number was not valid before but is valid now,\n    // or if it was too long before, we consider the number\n    // with the country calling code stripped to be a better result\n    // and keep that instead.\n    // For example, in Germany (+49), `49` is a valid area code,\n    // so if a number starts with `49`, it could be both a valid\n    // national German number or an international number without\n    // a leading `+`.\n\n\n    if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) && matchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern()) || checkNumberLength(nationalNumber, metadata) === 'TOO_LONG') {\n      return {\n        countryCallingCode: countryCallingCode,\n        number: possibleShorterNumber\n      };\n    }\n  }\n\n  return {\n    number: number\n  };\n}\n//# sourceMappingURL=extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js.map","// The minimum length of the national significant number.\nexport var MIN_LENGTH_FOR_NSN = 2; // The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\n\nexport var MAX_LENGTH_FOR_NSN = 17; // The maximum length of the country calling code.\n\nexport var MAX_LENGTH_COUNTRY_CODE = 3; // Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\n\nexport var VALID_DIGITS = \"0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9\"; // `DASHES` will be right after the opening square bracket of the \"character class\"\n\nvar DASHES = \"-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D\";\nvar SLASHES = \"\\uFF0F/\";\nvar DOTS = \"\\uFF0E.\";\nexport var WHITESPACE = \" \\xA0\\xAD\\u200B\\u2060\\u3000\";\nvar BRACKETS = \"()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]\"; // export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\n\nvar TILDES = \"~\\u2053\\u223C\\uFF5E\"; // Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\n\nexport var VALID_PUNCTUATION = \"\".concat(DASHES).concat(SLASHES).concat(DOTS).concat(WHITESPACE).concat(BRACKETS).concat(TILDES);\nexport var PLUS_CHARS = \"+\\uFF0B\"; // const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')\n//# sourceMappingURL=constants.js.map","// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport { VALID_DIGITS, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN } from './constants';\nimport ParseError from './ParseError';\nimport Metadata from './metadata';\nimport isViablePhoneNumber from './helpers/isViablePhoneNumber';\nimport extractExtension from './helpers/extension/extractExtension';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber';\nimport getCountryCallingCode from './getCountryCallingCode';\nimport { isPossibleNumber } from './isPossibleNumber_';\nimport { parseRFC3966 } from './helpers/RFC3966';\nimport PhoneNumber from './PhoneNumber';\nimport matchesEntirely from './helpers/matchesEntirely';\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign';\nimport extractNationalNumber from './helpers/extractNationalNumber';\nimport stripIddPrefix from './helpers/stripIddPrefix';\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode'; // We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\n\nvar MAX_INPUT_STRING_LENGTH = 250; // This consists of the plus symbol, digits, and arabic-indic digits.\n\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']'); // Regular expression of trailing characters that we want to remove.\n// A trailing `#` is sometimes used when writing phone numbers with extensions in US.\n// Example: \"+1 (645) 123 1234-910#\" number has extension \"910\".\n\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + '#' + ']+$');\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false; // Examples:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\n\nexport default function parse(text, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata); // Validate `defaultCountry`.\n\n  if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    throw new Error(\"Unknown country: \".concat(options.defaultCountry));\n  } // Parse the phone number.\n\n\n  var _parseInput = parseInput(text, options.v2, options.extract),\n      formattedPhoneNumber = _parseInput.number,\n      ext = _parseInput.ext; // If the phone number is not viable then return nothing.\n\n\n  if (!formattedPhoneNumber) {\n    if (options.v2) {\n      throw new ParseError('NOT_A_NUMBER');\n    }\n\n    return {};\n  }\n\n  var _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, options.defaultCallingCode, metadata),\n      country = _parsePhoneNumber.country,\n      nationalNumber = _parsePhoneNumber.nationalNumber,\n      countryCallingCode = _parsePhoneNumber.countryCallingCode,\n      carrierCode = _parsePhoneNumber.carrierCode;\n\n  if (!metadata.hasSelectedNumberingPlan()) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    return {};\n  } // Validate national (significant) number length.\n\n\n  if (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n    // Won't throw here because the regexp already demands length > 1.\n\n    /* istanbul ignore if */\n    if (options.v2) {\n      throw new ParseError('TOO_SHORT');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  } // Validate national (significant) number length.\n  //\n  // A sidenote:\n  //\n  // They say that sometimes national (significant) numbers\n  // can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n  // https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n  // Such numbers will just be discarded.\n  //\n\n\n  if (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n    if (options.v2) {\n      throw new ParseError('TOO_LONG');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  }\n\n  if (options.v2) {\n    var phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n\n    if (country) {\n      phoneNumber.country = country;\n    }\n\n    if (carrierCode) {\n      phoneNumber.carrierCode = carrierCode;\n    }\n\n    if (ext) {\n      phoneNumber.ext = ext;\n    }\n\n    return phoneNumber;\n  } // Check if national phone number pattern matches the number.\n  // National number pattern is different for each country,\n  // even for those ones which are part of the \"NANPA\" group.\n\n\n  var valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ? matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) : false;\n\n  if (!options.extended) {\n    return valid ? result(country, nationalNumber, ext) : {};\n  } // isInternational: countryCallingCode !== undefined\n\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    carrierCode: carrierCode,\n    valid: valid,\n    possible: valid ? true : options.extended === true && metadata.possibleLengths() && isPossibleNumber(nationalNumber, metadata) ? true : false,\n    phone: nationalNumber,\n    ext: ext\n  };\n}\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} [extract] — If `false`, then will parse the entire `text` as a phone number.\r\n * @param  {boolean} [throwOnError] — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\n\nfunction extractFormattedPhoneNumber(text, extract, throwOnError) {\n  if (!text) {\n    return;\n  }\n\n  if (text.length > MAX_INPUT_STRING_LENGTH) {\n    if (throwOnError) {\n      throw new ParseError('TOO_LONG');\n    }\n\n    return;\n  }\n\n  if (extract === false) {\n    return text;\n  } // Attempt to extract a possible number from the string passed in\n\n\n  var startsAt = text.search(PHONE_NUMBER_START_PATTERN);\n\n  if (startsAt < 0) {\n    return;\n  }\n\n  return text // Trim everything to the left of the phone number\n  .slice(startsAt) // Remove trailing non-numerical characters\n  .replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n/**\r\n * @param  {string} text - Input.\r\n * @param  {boolean} v2 - Legacy API functions don't pass `v2: true` flag.\r\n * @param  {boolean} [extract] - Whether to extract a phone number from `text`, or attempt to parse the entire text as a phone number.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\n\nfunction parseInput(text, v2, extract) {\n  // Parse RFC 3966 phone number URI.\n  if (text && text.indexOf('tel:') === 0) {\n    return parseRFC3966(text);\n  }\n\n  var number = extractFormattedPhoneNumber(text, extract, v2); // If the phone number is not viable, then abort.\n\n  if (!number || !isViablePhoneNumber(number)) {\n    return {};\n  } // Attempt to parse extension first, since it doesn't require region-specific\n  // data and we want to have the non-normalised number here.\n\n\n  var withExtensionStripped = extractExtension(number);\n\n  if (withExtensionStripped.ext) {\n    return withExtensionStripped;\n  }\n\n  return {\n    number: number\n  };\n}\n/**\r\n * Creates `parse()` result object.\r\n */\n\n\nfunction result(country, nationalNumber, ext) {\n  var result = {\n    country: country,\n    phone: nationalNumber\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\n\n\nfunction parsePhoneNumber(formattedPhoneNumber, defaultCountry, defaultCallingCode, metadata) {\n  // Extract calling code from phone number.\n  var _extractCountryCallin = extractCountryCallingCode(parseIncompletePhoneNumber(formattedPhoneNumber), defaultCountry, defaultCallingCode, metadata.metadata),\n      countryCallingCode = _extractCountryCallin.countryCallingCode,\n      number = _extractCountryCallin.number; // Choose a country by `countryCallingCode`.\n\n\n  var country;\n\n  if (countryCallingCode) {\n    metadata.selectNumberingPlan(countryCallingCode);\n  } // If `formattedPhoneNumber` is in \"national\" format\n  // then `number` is defined and `countryCallingCode` isn't.\n  else if (number && (defaultCountry || defaultCallingCode)) {\n      metadata.selectNumberingPlan(defaultCountry, defaultCallingCode);\n\n      if (defaultCountry) {\n        country = defaultCountry;\n      } else {\n        /* istanbul ignore if */\n        if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n          if (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n            country = '001';\n          }\n        }\n      }\n\n      countryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata);\n    } else return {};\n\n  if (!number) {\n    return {\n      countryCallingCode: countryCallingCode\n    };\n  }\n\n  var _extractNationalNumbe = extractNationalNumber(parseIncompletePhoneNumber(number), metadata),\n      nationalNumber = _extractNationalNumbe.nationalNumber,\n      carrierCode = _extractNationalNumbe.carrierCode; // Sometimes there are several countries\n  // corresponding to the same country phone code\n  // (e.g. NANPA countries all having `1` country phone code).\n  // Therefore, to reliably determine the exact country,\n  // national (significant) number should have been parsed first.\n  //\n  // When `metadata.json` is generated, all \"ambiguous\" country phone codes\n  // get their countries populated with the full set of\n  // \"phone number type\" regular expressions.\n  //\n\n\n  var exactCountry = getCountryByCallingCode(countryCallingCode, nationalNumber, metadata);\n\n  if (exactCountry) {\n    country = exactCountry;\n    /* istanbul ignore if */\n\n    if (exactCountry === '001') {// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\n      // If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\n      // then remove the \"istanbul ignore if\".\n    } else {\n      metadata.country(country);\n    }\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n}\n//# sourceMappingURL=parse_.js.map","import { MIN_LENGTH_FOR_NSN, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from '../constants';\nimport createExtensionPattern from './extension/createExtensionPattern'; //  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\n\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'; //\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\n\nexport var VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\nexport var VALID_PHONE_NUMBER_WITH_EXTENSION = VALID_PHONE_NUMBER + // Phone number extensions\n'(?:' + createExtensionPattern() + ')?'; // The combined regular expression for valid phone numbers:\n//\n\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp( // Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' + // Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER_WITH_EXTENSION + '$', 'i'); // Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\n\nexport default function isViablePhoneNumber(number) {\n  return number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n}\n//# sourceMappingURL=isViablePhoneNumber.js.map","import createExtensionPattern from './createExtensionPattern'; // Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\n\nvar EXTN_PATTERN = new RegExp('(?:' + createExtensionPattern() + ')$', 'i'); // Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\n\nexport default function extractExtension(number) {\n  var start = number.search(EXTN_PATTERN);\n\n  if (start < 0) {\n    return {};\n  } // If we find a potential extension, and the number preceding this is a viable\n  // number, we assume it is an extension.\n\n\n  var numberWithoutExtension = number.slice(0, start);\n  var matches = number.match(EXTN_PATTERN);\n  var i = 1;\n\n  while (i < matches.length) {\n    if (matches[i]) {\n      return {\n        number: numberWithoutExtension,\n        ext: matches[i]\n      };\n    }\n\n    i++;\n  }\n}\n//# sourceMappingURL=extractExtension.js.map","import Metadata from '../metadata';\nimport getNumberType from './getNumberType';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nexport default function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {\n  /* istanbul ignore if */\n  if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n    if (metadata.isNonGeographicCallingCode(callingCode)) {\n      return '001';\n    }\n  } // Is always non-empty, because `callingCode` is always valid\n\n\n  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);\n\n  if (!possibleCountries) {\n    return;\n  } // If there's just one country corresponding to the country code,\n  // then just return it, without further phone number digits validation.\n\n\n  if (possibleCountries.length === 1) {\n    return possibleCountries[0];\n  }\n\n  return selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata.metadata);\n}\n\nfunction selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata) {\n  // Re-create `metadata` because it will be selecting a `country`.\n  metadata = new Metadata(metadata);\n\n  for (var _iterator = possibleCountries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var country = _ref;\n    metadata.country(country); // Leading digits check would be the simplest one\n\n    if (metadata.leadingDigits()) {\n      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n        return country;\n      }\n    } // Else perform full validation with all of those\n    // fixed-line/mobile/etc regular expressions.\n    else if (getNumberType({\n        phone: nationalPhoneNumber,\n        country: country\n      }, undefined, metadata.metadata)) {\n        return country;\n      }\n  }\n}\n//# sourceMappingURL=getCountryByCallingCode.js.map","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { normalizeArguments } from './parsePhoneNumber';\nimport parsePhoneNumberFromString from './parsePhoneNumberFromString_';\nexport default function isValidPhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  options = _objectSpread({}, options, {\n    extract: false\n  });\n  var phoneNumber = parsePhoneNumberFromString(text, options, metadata);\n  return phoneNumber && phoneNumber.isValid() || false;\n}\n//# sourceMappingURL=isValidPhoneNumber.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport parsePhoneNumber_ from './parsePhoneNumber_';\nexport default function parsePhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return parsePhoneNumber_(text, options, metadata);\n}\nexport function normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n      arg_1 = _Array$prototype$slic2[0],\n      arg_2 = _Array$prototype$slic2[1],\n      arg_3 = _Array$prototype$slic2[2],\n      arg_4 = _Array$prototype$slic2[3];\n\n  var text;\n  var options;\n  var metadata; // If the phone number is passed as a string.\n  // `parsePhoneNumber('88005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    text = arg_1;\n  } else throw new TypeError('A text for parsing must be a string.'); // If \"default country\" argument is being passed then move it to `options`.\n  // `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\n\n  if (!arg_2 || typeof arg_2 === 'string') {\n    if (arg_4) {\n      options = arg_3;\n      metadata = arg_4;\n    } else {\n      options = undefined;\n      metadata = arg_3;\n    }\n\n    if (arg_2) {\n      options = _objectSpread({\n        defaultCountry: arg_2\n      }, options);\n    }\n  } // `defaultCountry` is not passed.\n  // Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n  else if (isObject(arg_2)) {\n      if (arg_3) {\n        options = arg_2;\n        metadata = arg_3;\n      } else {\n        metadata = arg_2;\n      }\n    } else throw new Error(\"Invalid second argument: \".concat(arg_2));\n\n  return {\n    text: text,\n    options: options,\n    metadata: metadata\n  };\n} // Otherwise istanbul would show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar isObject = function isObject(_) {\n  return _typeof(_) === 'object';\n};\n//# sourceMappingURL=parsePhoneNumber.js.map","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport parsePhoneNumber from './parsePhoneNumber_';\nimport ParseError from './ParseError';\nimport { isSupportedCountry } from './metadata';\nexport default function parsePhoneNumberFromString(text, options, metadata) {\n  // Validate `defaultCountry`.\n  if (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\n    options = _objectSpread({}, options, {\n      defaultCountry: undefined\n    });\n  } // Parse phone number.\n\n\n  try {\n    return parsePhoneNumber(text, options, metadata);\n  } catch (error) {\n    /* istanbul ignore else */\n    if (error instanceof ParseError) {//\n    } else {\n      throw error;\n    }\n  }\n}\n//# sourceMappingURL=parsePhoneNumberFromString_.js.map","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport parseNumber from './parse_';\nexport default function parsePhoneNumber(text, options, metadata) {\n  return parseNumber(text, _objectSpread({}, options, {\n    v2: true\n  }), metadata);\n}\n//# sourceMappingURL=parsePhoneNumber_.js.map","import { withMetadata } from '../metadata'\r\nimport { isValidPhoneNumber as _isValidPhoneNumber } from '../../core/index'\r\n\r\nexport function isValidPhoneNumber() {\r\n\treturn withMetadata(_isValidPhoneNumber, arguments)\r\n}","// This file is a workaround for a bug in web browsers' \"native\"\n// ES6 importing system which is uncapable of importing \"*.json\" files.\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\nexport default {\"version\":4,\"country_calling_codes\":{\"1\":[\"US\",\"AG\",\"AI\",\"AS\",\"BB\",\"BM\",\"BS\",\"CA\",\"DM\",\"DO\",\"GD\",\"GU\",\"JM\",\"KN\",\"KY\",\"LC\",\"MP\",\"MS\",\"PR\",\"SX\",\"TC\",\"TT\",\"VC\",\"VG\",\"VI\"],\"7\":[\"RU\",\"KZ\"],\"20\":[\"EG\"],\"27\":[\"ZA\"],\"30\":[\"GR\"],\"31\":[\"NL\"],\"32\":[\"BE\"],\"33\":[\"FR\"],\"34\":[\"ES\"],\"36\":[\"HU\"],\"39\":[\"IT\",\"VA\"],\"40\":[\"RO\"],\"41\":[\"CH\"],\"43\":[\"AT\"],\"44\":[\"GB\",\"GG\",\"IM\",\"JE\"],\"45\":[\"DK\"],\"46\":[\"SE\"],\"47\":[\"NO\",\"SJ\"],\"48\":[\"PL\"],\"49\":[\"DE\"],\"51\":[\"PE\"],\"52\":[\"MX\"],\"53\":[\"CU\"],\"54\":[\"AR\"],\"55\":[\"BR\"],\"56\":[\"CL\"],\"57\":[\"CO\"],\"58\":[\"VE\"],\"60\":[\"MY\"],\"61\":[\"AU\",\"CC\",\"CX\"],\"62\":[\"ID\"],\"63\":[\"PH\"],\"64\":[\"NZ\"],\"65\":[\"SG\"],\"66\":[\"TH\"],\"81\":[\"JP\"],\"82\":[\"KR\"],\"84\":[\"VN\"],\"86\":[\"CN\"],\"90\":[\"TR\"],\"91\":[\"IN\"],\"92\":[\"PK\"],\"93\":[\"AF\"],\"94\":[\"LK\"],\"95\":[\"MM\"],\"98\":[\"IR\"],\"211\":[\"SS\"],\"212\":[\"MA\",\"EH\"],\"213\":[\"DZ\"],\"216\":[\"TN\"],\"218\":[\"LY\"],\"220\":[\"GM\"],\"221\":[\"SN\"],\"222\":[\"MR\"],\"223\":[\"ML\"],\"224\":[\"GN\"],\"225\":[\"CI\"],\"226\":[\"BF\"],\"227\":[\"NE\"],\"228\":[\"TG\"],\"229\":[\"BJ\"],\"230\":[\"MU\"],\"231\":[\"LR\"],\"232\":[\"SL\"],\"233\":[\"GH\"],\"234\":[\"NG\"],\"235\":[\"TD\"],\"236\":[\"CF\"],\"237\":[\"CM\"],\"238\":[\"CV\"],\"239\":[\"ST\"],\"240\":[\"GQ\"],\"241\":[\"GA\"],\"242\":[\"CG\"],\"243\":[\"CD\"],\"244\":[\"AO\"],\"245\":[\"GW\"],\"246\":[\"IO\"],\"247\":[\"AC\"],\"248\":[\"SC\"],\"249\":[\"SD\"],\"250\":[\"RW\"],\"251\":[\"ET\"],\"252\":[\"SO\"],\"253\":[\"DJ\"],\"254\":[\"KE\"],\"255\":[\"TZ\"],\"256\":[\"UG\"],\"257\":[\"BI\"],\"258\":[\"MZ\"],\"260\":[\"ZM\"],\"261\":[\"MG\"],\"262\":[\"RE\",\"YT\"],\"263\":[\"ZW\"],\"264\":[\"NA\"],\"265\":[\"MW\"],\"266\":[\"LS\"],\"267\":[\"BW\"],\"268\":[\"SZ\"],\"269\":[\"KM\"],\"290\":[\"SH\",\"TA\"],\"291\":[\"ER\"],\"297\":[\"AW\"],\"298\":[\"FO\"],\"299\":[\"GL\"],\"350\":[\"GI\"],\"351\":[\"PT\"],\"352\":[\"LU\"],\"353\":[\"IE\"],\"354\":[\"IS\"],\"355\":[\"AL\"],\"356\":[\"MT\"],\"357\":[\"CY\"],\"358\":[\"FI\",\"AX\"],\"359\":[\"BG\"],\"370\":[\"LT\"],\"371\":[\"LV\"],\"372\":[\"EE\"],\"373\":[\"MD\"],\"374\":[\"AM\"],\"375\":[\"BY\"],\"376\":[\"AD\"],\"377\":[\"MC\"],\"378\":[\"SM\"],\"380\":[\"UA\"],\"381\":[\"RS\"],\"382\":[\"ME\"],\"383\":[\"XK\"],\"385\":[\"HR\"],\"386\":[\"SI\"],\"387\":[\"BA\"],\"389\":[\"MK\"],\"420\":[\"CZ\"],\"421\":[\"SK\"],\"423\":[\"LI\"],\"500\":[\"FK\"],\"501\":[\"BZ\"],\"502\":[\"GT\"],\"503\":[\"SV\"],\"504\":[\"HN\"],\"505\":[\"NI\"],\"506\":[\"CR\"],\"507\":[\"PA\"],\"508\":[\"PM\"],\"509\":[\"HT\"],\"590\":[\"GP\",\"BL\",\"MF\"],\"591\":[\"BO\"],\"592\":[\"GY\"],\"593\":[\"EC\"],\"594\":[\"GF\"],\"595\":[\"PY\"],\"596\":[\"MQ\"],\"597\":[\"SR\"],\"598\":[\"UY\"],\"599\":[\"CW\",\"BQ\"],\"670\":[\"TL\"],\"672\":[\"NF\"],\"673\":[\"BN\"],\"674\":[\"NR\"],\"675\":[\"PG\"],\"676\":[\"TO\"],\"677\":[\"SB\"],\"678\":[\"VU\"],\"679\":[\"FJ\"],\"680\":[\"PW\"],\"681\":[\"WF\"],\"682\":[\"CK\"],\"683\":[\"NU\"],\"685\":[\"WS\"],\"686\":[\"KI\"],\"687\":[\"NC\"],\"688\":[\"TV\"],\"689\":[\"PF\"],\"690\":[\"TK\"],\"691\":[\"FM\"],\"692\":[\"MH\"],\"850\":[\"KP\"],\"852\":[\"HK\"],\"853\":[\"MO\"],\"855\":[\"KH\"],\"856\":[\"LA\"],\"880\":[\"BD\"],\"886\":[\"TW\"],\"960\":[\"MV\"],\"961\":[\"LB\"],\"962\":[\"JO\"],\"963\":[\"SY\"],\"964\":[\"IQ\"],\"965\":[\"KW\"],\"966\":[\"SA\"],\"967\":[\"YE\"],\"968\":[\"OM\"],\"970\":[\"PS\"],\"971\":[\"AE\"],\"972\":[\"IL\"],\"973\":[\"BH\"],\"974\":[\"QA\"],\"975\":[\"BT\"],\"976\":[\"MN\"],\"977\":[\"NP\"],\"992\":[\"TJ\"],\"993\":[\"TM\"],\"994\":[\"AZ\"],\"995\":[\"GE\"],\"996\":[\"KG\"],\"998\":[\"UZ\"]},\"countries\":{\"AC\":[\"247\",\"00\",\"(?:[01589]\\\\d|[46])\\\\d{4}\",[5,6]],\"AD\":[\"376\",\"00\",\"(?:1|6\\\\d)\\\\d{7}|[135-9]\\\\d{5}\",[6,8,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"[135-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]]],\"AE\":[\"971\",\"00\",\"(?:[4-7]\\\\d|9[0-689])\\\\d{7}|800\\\\d{2,9}|[2-4679]\\\\d{7}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{2,9})\",\"$1 $2\",[\"60|8\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[236]|[479][2-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{5})\",\"$1 $2 $3\",[\"[479]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AF\":[\"93\",\"00\",\"[2-7]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"]],\"0\"],\"AG\":[\"1\",\"011\",\"(?:268|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([457]\\\\d{6})$\",\"268$1\",0,\"268\"],\"AI\":[\"1\",\"011\",\"(?:264|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2457]\\\\d{6})$\",\"264$1\",0,\"264\"],\"AL\":[\"355\",\"00\",\"(?:700\\\\d\\\\d|900)\\\\d{3}|8\\\\d{5,7}|(?:[2-5]|6\\\\d)\\\\d{7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"80|9\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2358][2-5]|4\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[23578]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"]],\"0\"],\"AM\":[\"374\",\"00\",\"(?:[1-489]\\\\d|55|60|77)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0 $1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2|3[12]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"1|47\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[3-9]\"],\"0$1\"]],\"0\"],\"AO\":[\"244\",\"00\",\"[29]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[29]\"]]]],\"AR\":[\"54\",\"00\",\"11\\\\d{8}|(?:[2368]|9\\\\d)\\\\d{9}\",[10,11],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2-$3\",[\"2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])\",\"2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"1\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[23]\"],\"0$1\",1],[\"(\\\\d)(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9(?:2[2-469]|3[3-578])\",\"9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))\",\"9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 15-$3-$4\",[\"91\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9\"],\"0$1\",0,\"$1 $2 $3-$4\"]],\"0\",0,\"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?\",\"9$1\"],\"AS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|684|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([267]\\\\d{6})$\",\"684$1\",0,\"684\"],\"AT\":[\"43\",\"00\",\"1\\\\d{3,12}|2\\\\d{6,12}|43(?:(?:0\\\\d|5[02-9])\\\\d{3,9}|2\\\\d{4,5}|[3467]\\\\d{4}|8\\\\d{4,6}|9\\\\d{4,7})|5\\\\d{4,12}|8\\\\d{7,12}|9\\\\d{8,12}|(?:[367]\\\\d|4[0-24-9])\\\\d{4,11}\",[4,5,6,7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3,12})\",\"$1 $2\",[\"1(?:11|[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})\",\"$1 $2\",[\"517\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"5[079]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,10})\",\"$1 $2\",[\"(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,9})\",\"$1 $2\",[\"[2-467]|5[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,7})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AU\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{7,8}|8[0-24-9]\\\\d{7})|[2-478]\\\\d{8}|1\\\\d{4,7}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"16\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"16\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"14|4\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[2378]\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:30|[89])\"]]],\"0\",0,\"0|(183[12])\",0,0,0,[[\"8(?:51(?:0(?:0[03-9]|[12479]\\\\d|3[2-9]|5[0-8]|6[1-9]|8[0-7])|1(?:[0235689]\\\\d|1[0-69]|4[0-589]|7[0-47-9])|2(?:0[0-7]|3[2-4]|[4-6]\\\\d))|91(?:[0-57-9]\\\\d|6[0135-9])\\\\d)\\\\d{3}|(?:2(?:[0-26-9]\\\\d|3[0-8]|4[02-9]|5[0135-9])|3(?:[0-3589]\\\\d|4[0-578]|6[1-9]|7[0-35-9])|7(?:[013-57-9]\\\\d|2[0-8])|8(?:6[0-8]|[78]\\\\d|9[02-9]))\\\\d{6}\",[9]],[\"4(?:83[0-38]|93[0-4])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,[\"163\\\\d{2,6}\",[5,6,7,8,9]],[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{3}|45[0-4])\\\\d{3}|13\\\\d{4}\",[6,8,10]]],\"0011\"],\"AW\":[\"297\",\"00\",\"(?:[25-79]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[25-9]\"]]]],\"AX\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"2\\\\d{4,9}|35\\\\d{4,5}|(?:60\\\\d\\\\d|800)\\\\d{4,6}|7\\\\d{5,11}|(?:[14]\\\\d|3[0-46-9]|50)\\\\d{4,8}\",[5,6,7,8,9,10,11,12],0,\"0\",0,0,0,0,\"18\",0,\"00\"],\"AZ\":[\"994\",\"00\",\"365\\\\d{6}|(?:[124579]\\\\d|60|88)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[28]|2|365|46\",\"1[28]|2|365|46\",\"1[28]|2|365(?:[0-46-9]|5[0-35-9])|46\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[13-9]\"],\"0$1\"]],\"0\"],\"BA\":[\"387\",\"00\",\"6\\\\d{8}|(?:[35689]\\\\d|49|70)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[1-3]|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2-$3\",[\"[3-5]|6[56]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\"]],\"0\"],\"BB\":[\"1\",\"011\",\"(?:246|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"246$1\",0,\"246\"],\"BD\":[\"880\",\"00\",\"1\\\\d{9}|2\\\\d{7,8}|88\\\\d{4,6}|(?:8[0-79]|9\\\\d)\\\\d{4,8}|(?:[346]\\\\d|[57])\\\\d{5,8}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1-$2\",[\"31[5-8]|[459]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1-$2\",[\"3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,6})\",\"$1-$2\",[\"[13-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{7,8})\",\"$1-$2\",[\"2\"],\"0$1\"]],\"0\"],\"BE\":[\"32\",\"00\",\"4\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:80|9)0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[239]|4[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[15-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4\"],\"0$1\"]],\"0\"],\"BF\":[\"226\",\"00\",\"[025-7]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[025-7]\"]]]],\"BG\":[\"359\",\"00\",\"[2-7]\\\\d{6,7}|[89]\\\\d{6,8}|2\\\\d{5}\",[6,7,8,9],[[\"(\\\\d)(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"43[1-6]|70[1-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:70|8)0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"43[1-7]|7\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[48]|9[08]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"BH\":[\"973\",\"00\",\"[136-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[13679]|8[047]\"]]]],\"BI\":[\"257\",\"00\",\"(?:[267]\\\\d|31)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2367]\"]]]],\"BJ\":[\"229\",\"00\",\"(?:[2689]\\\\d|51)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[25689]\"]]]],\"BL\":[\"590\",\"00\",\"(?:590|69\\\\d|976)\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:2[7-9]|5[12]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[29]|3[0-5]))\\\\d{4}\"],0,0,0,0,0,0,[\"976[01]\\\\d{5}\"]]],\"BM\":[\"1\",\"011\",\"(?:441|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-8]\\\\d{6})$\",\"441$1\",0,\"441\"],\"BN\":[\"673\",\"00\",\"[2-578]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-578]\"]]]],\"BO\":[\"591\",\"00(?:1\\\\d)?\",\"(?:[2-467]\\\\d\\\\d|8001)\\\\d{5}\",[8,9],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[23]|4[46]\"]],[\"(\\\\d{8})\",\"$1\",[\"[67]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,\"0(1\\\\d)?\"],\"BQ\":[\"599\",\"00\",\"(?:[34]1|7\\\\d)\\\\d{5}\",[7],0,0,0,0,0,0,\"[347]\"],\"BR\":[\"55\",\"00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)\",\"(?:[1-46-9]\\\\d\\\\d|5(?:[0-46-9]\\\\d|5[0-24679]))\\\\d{8}|[1-9]\\\\d{9}|[3589]\\\\d{8}|[34]\\\\d{7}\",[8,9,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"300|4(?:0[02]|37)\",\"4(?:02|37)0|[34]00\"]],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:[358]|90)0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1 $2-$3\",[\"[16][1-9]|[2-57-9]\"],\"($1)\"]],\"0\",0,\"(?:0|90)(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\\\d{10,11}))?\",\"$2\"],\"BS\":[\"1\",\"011\",\"(?:242|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([3-8]\\\\d{6})$\",\"242$1\",0,\"242\"],\"BT\":[\"975\",\"00\",\"[17]\\\\d{7}|[2-8]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-68]|7[246]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[67]|7\"]]]],\"BW\":[\"267\",\"00\",\"(?:0800|(?:[37]|800)\\\\d)\\\\d{6}|(?:[2-6]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[24-6]|3[15-79]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"BY\":[\"375\",\"810\",\"(?:[12]\\\\d|33|44|902)\\\\d{7}|8(?:0[0-79]\\\\d{5,7}|[1-7]\\\\d{9})|8(?:1[0-489]|[5-79]\\\\d)\\\\d{7}|8[1-79]\\\\d{6,7}|8[0-79]\\\\d{5}|8\\\\d{5}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"800\"],\"8 $1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,4})\",\"$1 $2 $3\",[\"800\"],\"8 $1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{3})\",\"$1 $2-$3\",[\"1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])\",\"1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"1(?:[56]|7[467])|2[1-3]\"],\"8 0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-4]\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"8 $1\"]],\"8\",0,\"0|80?\",0,0,0,0,\"8~10\"],\"BZ\":[\"501\",\"00\",\"(?:0800\\\\d|[2-8])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-8]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"0\"]]]],\"CA\":[\"1\",\"011\",\"(?:[2-8]\\\\d|90)\\\\d{8}\",[10],0,\"1\",0,0,0,0,0,[[\"(?:2(?:04|[23]6|[48]9|50)|3(?:06|43|6[57])|4(?:03|1[68]|3[178]|50)|5(?:06|1[49]|48|79|8[17])|6(?:04|13|39|47|72)|7(?:0[59]|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|(?:5(?:00|2[12]|33|44|66|77|88)|622)[2-9]\\\\d{6}\"],0,0,0,[\"600[2-9]\\\\d{6}\"]]],\"CC\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d|8[0-24-9])\\\\d{7}|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10],0,\"0\",0,\"0|([59]\\\\d{7})$\",\"8$1\",0,0,[[\"8(?:51(?:0(?:02|31|60|89)|118)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\\\d|70[23]|959))\\\\d{3}\",[9]],[\"4(?:83[0-38]|93[0-4])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{3}|45[0-4])\\\\d{3}|13\\\\d{4}\",[6,8,10]]],\"0011\"],\"CD\":[\"243\",\"00\",\"[189]\\\\d{8}|[1-68]\\\\d{6}\",[7,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[1-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"CF\":[\"236\",\"00\",\"(?:[27]\\\\d{3}|8776)\\\\d{4}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[278]\"]]]],\"CG\":[\"242\",\"00\",\"222\\\\d{6}|(?:0\\\\d|80)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"801\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[02]\"]]]],\"CH\":[\"41\",\"00\",\"8\\\\d{11}|[2-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8[047]|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]|81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"8\"],\"0$1\"]],\"0\"],\"CI\":[\"225\",\"00\",\"[02]\\\\d{9}|[02-9]\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[03-9]|2(?:[02-4]|1[023578])\",\"[03-9]|2(?:[02-4]|1(?:[02357]|80))\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d)(\\\\d{5})\",\"$1 $2 $3 $4\",[\"2\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"0\"]]]],\"CK\":[\"682\",\"00\",\"[2-578]\\\\d{4}\",[5],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"[2-578]\"]]]],\"CL\":[\"56\",\"(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0\",\"12300\\\\d{6}|6\\\\d{9,10}|[2-9]\\\\d{8}\",[9,10,11],[[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"219\",\"2196\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[1-3]\"],\"($1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"9[2-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"60|8\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"60\"]]]],\"CM\":[\"237\",\"00\",\"(?:[26]\\\\d\\\\d|88)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"88\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[26]\"]]]],\"CN\":[\"86\",\"00|1(?:[12]\\\\d|79)\\\\d\\\\d00\",\"1[127]\\\\d{8,9}|2\\\\d{9}(?:\\\\d{2})?|[12]\\\\d{6,7}|86\\\\d{6}|(?:1[03-689]\\\\d|6)\\\\d{7,9}|(?:[3-579]\\\\d|8[0-57-9])\\\\d{6,9}\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5,6})\",\"$1 $2\",[\"(?:10|2[0-57-9])[19]\",\"(?:10|2[0-57-9])(?:10|9[56])\",\"(?:10|2[0-57-9])(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]\",\"(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))[19]\",\"85[23](?:10|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:10|9[56])\",\"85[23](?:100|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:4|80)0\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|2(?:[02-57-9]|1[1-9])\",\"10|2(?:[02-57-9]|1[1-9])\",\"10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-578]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"1[3-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"[12]\"],\"0$1\",1]],\"0\",0,\"0|(1(?:[12]\\\\d|79)\\\\d\\\\d)\",0,0,0,0,\"00\"],\"CO\":[\"57\",\"00(?:4(?:[14]4|56)|[579])\",\"(?:1\\\\d|3)\\\\d{9}|[124-8]\\\\d{7}\",[8,10,11],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[14][2-9]|[25-8]\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{7})\",\"$1-$2-$3\",[\"1\"],\"0$1\",0,\"$1 $2 $3\"]],\"0\",0,\"0([3579]|4(?:[14]4|56))?\"],\"CR\":[\"506\",\"00\",\"(?:8\\\\d|90)\\\\d{8}|(?:[24-8]\\\\d{3}|3005)\\\\d{4}\",[8,10],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[3-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[89]\"]]],0,0,\"(19(?:0[0-2468]|1[09]|20|66|77|99))\"],\"CU\":[\"53\",\"119\",\"[27]\\\\d{6,7}|[34]\\\\d{5,7}|(?:5|8\\\\d\\\\d)\\\\d{7}\",[6,7,8,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"2[1-4]|[34]\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{6,7})\",\"$1 $2\",[\"7\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"8\"],\"0$1\"]],\"0\"],\"CV\":[\"238\",\"0\",\"(?:[2-59]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2-589]\"]]]],\"CW\":[\"599\",\"00\",\"(?:[34]1|60|(?:7|9\\\\d)\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[3467]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9[4-8]\"]]],0,0,0,0,0,\"[69]\"],\"CX\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d|8[0-24-9])\\\\d{7}|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10],0,\"0\",0,\"0|([59]\\\\d{7})$\",\"8$1\",0,0,[[\"8(?:51(?:0(?:01|30|59|88)|1(?:17|46|75)|235)|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\\\d|7(?:0[01]|1[0-2])|958))\\\\d{3}\",[9]],[\"4(?:83[0-38]|93[0-4])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{3}|45[0-4])\\\\d{3}|13\\\\d{4}\",[6,8,10]]],\"0011\"],\"CY\":[\"357\",\"00\",\"(?:[279]\\\\d|[58]0)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[257-9]\"]]]],\"CZ\":[\"420\",\"00\",\"(?:[2-578]\\\\d|60)\\\\d{7}|9\\\\d{8,11}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]|9[015-7]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]]],\"DE\":[\"49\",\"00\",\"[2579]\\\\d{5,14}|49(?:[34]0|69|8\\\\d)\\\\d\\\\d?|49(?:37|49|60|7[089]|9\\\\d)\\\\d{1,3}|49(?:[12]\\\\d|3[2-689]|7[1-7])\\\\d{1,8}|(?:1|[368]\\\\d|4[0-8])\\\\d{3,13}|49(?:[05]\\\\d|31|[46][1-8])\\\\d{1,9}\",[4,5,6,7,8,9,10,11,12,13,14,15],[[\"(\\\\d{2})(\\\\d{3,13})\",\"$1 $2\",[\"3[02]|40|[68]9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,12})\",\"$1 $2\",[\"2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\",\"2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2,11})\",\"$1 $2\",[\"[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]\",\"[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"138\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{2,10})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,11})\",\"$1 $2\",[\"181\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{4,10})\",\"$1 $2 $3\",[\"1(?:3|80)|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"1[67]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,12})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"185\",\"1850\",\"18500\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"18[68]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"15[0568]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"15[1279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{8})\",\"$1 $2\",[\"18\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{7,8})\",\"$1 $2 $3\",[\"1(?:6[023]|7)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{7})\",\"$1 $2 $3\",[\"15[279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{8})\",\"$1 $2 $3\",[\"15\"],\"0$1\"]],\"0\"],\"DJ\":[\"253\",\"00\",\"(?:2\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[27]\"]]]],\"DK\":[\"45\",\"00\",\"[2-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-9]\"]]]],\"DM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|767|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"767$1\",0,\"767\"],\"DO\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"8001|8[024]9\"],\"DZ\":[\"213\",\"00\",\"(?:[1-4]|[5-79]\\\\d|80)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-8]\"],\"0$1\"]],\"0\"],\"EC\":[\"593\",\"00\",\"1\\\\d{9,10}|(?:[2-7]|9\\\\d)\\\\d{7}\",[8,9,10,11],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[2-7]\"],\"(0$1)\",0,\"$1-$2-$3\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"EE\":[\"372\",\"00\",\"8\\\\d{9}|[4578]\\\\d{7}|(?:[3-8]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88\",\"[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88\"]],[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[45]|8(?:00|[1-49])\",\"[45]|8(?:00[1-9]|[1-49])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"EG\":[\"20\",\"00\",\"[189]\\\\d{8,9}|[24-6]\\\\d{8}|[135]\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{7,8})\",\"$1 $2\",[\"[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,7})\",\"$1 $2\",[\"1[35]|[4-6]|8[2468]|9[235-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[189]\"],\"0$1\"]],\"0\"],\"EH\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],0,\"0\",0,0,0,0,\"528[89]\"],\"ER\":[\"291\",\"00\",\"[178]\\\\d{6}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[178]\"],\"0$1\"]],\"0\"],\"ES\":[\"34\",\"00\",\"[5-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]00\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-9]\"]]]],\"ET\":[\"251\",\"00\",\"(?:11|[2-59]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-59]\"],\"0$1\"]],\"0\"],\"FI\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"[1-35689]\\\\d{4}|7\\\\d{10,11}|(?:[124-7]\\\\d|3[0-46-9])\\\\d{8}|[1-9]\\\\d{5,8}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d)(\\\\d{4,9})\",\"$1 $2\",[\"[2568][1-8]|3(?:0[1-9]|[1-9])|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[12]00|[368]|70[07-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,8})\",\"$1 $2\",[\"[1245]|7[135]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,10})\",\"$1 $2\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,\"1[03-79]|[2-9]\",0,\"00\"],\"FJ\":[\"679\",\"0(?:0|52)\",\"45\\\\d{5}|(?:0800\\\\d|[235-9])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[235-9]|45\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]]],0,0,0,0,0,0,0,\"00\"],\"FK\":[\"500\",\"00\",\"[2-7]\\\\d{4}\",[5]],\"FM\":[\"691\",\"00\",\"(?:[39]\\\\d\\\\d|820)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[389]\"]]]],\"FO\":[\"298\",\"00\",\"[2-9]\\\\d{5}\",[6],[[\"(\\\\d{6})\",\"$1\",[\"[2-9]\"]]],0,0,\"(10(?:01|[12]0|88))\"],\"FR\":[\"33\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0 $1\"],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[1-79]\"],\"0$1\"]],\"0\"],\"GA\":[\"241\",\"00\",\"(?:[067]\\\\d|11)\\\\d{6}|[2-7]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"11|[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]]],0,0,\"0(11\\\\d{6}|6[256]\\\\d{6}|7[47]\\\\d{6})\",\"$1\"],\"GB\":[\"44\",\"00\",\"[1-357-9]\\\\d{9}|[18]\\\\d{8}|8\\\\d{6}\",[7,9,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"800\",\"8001\",\"80011\",\"800111\",\"8001111\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"845\",\"8454\",\"84546\",\"845464\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"1(?:38|5[23]|69|76|94)\",\"1(?:(?:38|69)7|5(?:24|39)|768|946)\",\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"1(?:[2-69][02-9]|[78])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[25]|7(?:0|6[02-9])\",\"[25]|7(?:0|6(?:[03-9]|2[356]))\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1389]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:1(?:3(?:[0-58]\\\\d\\\\d|73[03])|4(?:[0-5]\\\\d\\\\d|69[7-9])|(?:5[0-26-9]|6[0-4]|[78][0-49])\\\\d\\\\d)|(?:2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\\\d)\\\\d|1(?:[0-7]\\\\d|8[02]))|(?:3(?:0\\\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\\\d)\\\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\\\d{3})\\\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\\\d)|76\\\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\\\d|7[4-79])|295[5-7]|35[34]\\\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\\\d{3}\",[9,10]],[\"7(?:457[0-57-9]|700[01]|911[028])\\\\d{5}|7(?:[1-3]\\\\d\\\\d|4(?:[0-46-9]\\\\d|5[0-689])|5(?:0[0-8]|[13-9]\\\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\\\d|8[02-9]|9[0-689])|8(?:[014-9]\\\\d|[23][0-8])|9(?:[024-9]\\\\d|1[02-9]|3[0-689]))\\\\d{6}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[2-49]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-2]|2[356]|34|4[01347]|5[49]|6[0-369]|77|81|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]],0,\" x\"],\"GD\":[\"1\",\"011\",\"(?:473|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"473$1\",0,\"473\"],\"GE\":[\"995\",\"00\",\"(?:[3-57]\\\\d\\\\d|800)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"32\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[57]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[348]\"],\"0$1\"]],\"0\"],\"GF\":[\"594\",\"00\",\"(?:[56]94|976)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"]],\"0\"],\"GG\":[\"44\",\"00\",\"(?:1481|[357-9]\\\\d{3})\\\\d{6}|8\\\\d{6}(?:\\\\d{2})?\",[7,9,10],0,\"0\",0,\"0|([25-9]\\\\d{5})$\",\"1481$1\",0,0,[[\"1481[25-9]\\\\d{5}\",[10]],[\"7(?:(?:781|839)\\\\d|911[17])\\\\d{5}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[0-3]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-2]|2[356]|34|4[01347]|5[49]|6[0-369]|77|81|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]]],\"GH\":[\"233\",\"00\",\"(?:[235]\\\\d{3}|800)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[235]\"],\"0$1\"]],\"0\"],\"GI\":[\"350\",\"00\",\"(?:[25]\\\\d\\\\d|606)\\\\d{5}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2\"]]]],\"GL\":[\"299\",\"00\",\"(?:19|[2-689]\\\\d)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"19|[2-689]\"]]]],\"GM\":[\"220\",\"00\",\"[2-9]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"GN\":[\"224\",\"00\",\"722\\\\d{6}|(?:3|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"3\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[67]\"]]]],\"GP\":[\"590\",\"00\",\"(?:590|69\\\\d|976)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"590(?:0[1-68]|1[0-2]|2[0-68]|3[1289]|4[0-24-9]|5[3-579]|6[0189]|7[08]|8[0-689]|9\\\\d)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[29]|3[0-5]))\\\\d{4}\"],0,0,0,0,0,0,[\"976[01]\\\\d{5}\"]]],\"GQ\":[\"240\",\"00\",\"222\\\\d{6}|(?:3\\\\d|55|[89]0)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235]\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[89]\"]]]],\"GR\":[\"30\",\"00\",\"5005000\\\\d{3}|8\\\\d{9,10}|(?:[269]\\\\d|70)\\\\d{8}\",[10,11],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"21|7\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2689]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"8\"]]]],\"GT\":[\"502\",\"00\",\"(?:1\\\\d{3}|[2-7])\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"GU\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|671|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([3-9]\\\\d{6})$\",\"671$1\",0,\"671\"],\"GW\":[\"245\",\"00\",\"[49]\\\\d{8}|4\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"40\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"]]]],\"GY\":[\"592\",\"001\",\"(?:862\\\\d|9008)\\\\d{3}|(?:[2-46]\\\\d|77)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46-9]\"]]]],\"HK\":[\"852\",\"00(?:30|5[09]|[126-9]?)\",\"8[0-46-9]\\\\d{6,7}|9\\\\d{4}(?:\\\\d(?:\\\\d(?:\\\\d{4})?)?)?|(?:[235-79]\\\\d|46)\\\\d{6}\",[5,6,7,8,9,11],[[\"(\\\\d{3})(\\\\d{2,5})\",\"$1 $2\",[\"900\",\"9003\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[1-4]|9(?:0[1-9]|[1-8])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,0,\"00\"],\"HN\":[\"504\",\"00\",\"8\\\\d{10}|[237-9]\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[237-9]\"]]]],\"HR\":[\"385\",\"00\",\"(?:[24-69]\\\\d|3[0-79])\\\\d{7}|80\\\\d{5,7}|[1-79]\\\\d{7}|6\\\\d{5,6}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"6[01]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-5]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"HT\":[\"509\",\"00\",\"[2-489]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-489]\"]]]],\"HU\":[\"36\",\"00\",\"[235-7]\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"06 $1\"]],\"06\"],\"ID\":[\"62\",\"00[89]\",\"(?:(?:00[1-9]|8\\\\d)\\\\d{4}|[1-36])\\\\d{6}|00\\\\d{10}|[1-9]\\\\d{8,10}|[2-9]\\\\d{7}\",[7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"15\"]],[\"(\\\\d{2})(\\\\d{5,9})\",\"$1 $2\",[\"2[124]|[36]1\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,7})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,8})\",\"$1 $2\",[\"[2-79]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{3})\",\"$1-$2-$3\",[\"8[1-35-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6,8})\",\"$1 $2\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"804\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"80\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"]],\"0\"],\"IE\":[\"353\",\"00\",\"(?:1\\\\d|[2569])\\\\d{6,8}|4\\\\d{6,9}|7\\\\d{8}|8\\\\d{8,9}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"2[24-9]|47|58|6[237-9]|9[35-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[45]0\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2569]|4[1-69]|7[14]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"81\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"IL\":[\"972\",\"0(?:0|1[2-9])\",\"1\\\\d{6}(?:\\\\d{3,5})?|[57]\\\\d{8}|[1-489]\\\\d{7}\",[7,8,9,10,11,12],[[\"(\\\\d{4})(\\\\d{3})\",\"$1-$2\",[\"125\"]],[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"121\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[2-489]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"12\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1-$2\",[\"159\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"1[7-9]\"]],[\"(\\\\d{3})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3-$4\",[\"15\"]]],\"0\"],\"IM\":[\"44\",\"00\",\"1624\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"0|([5-8]\\\\d{5})$\",\"1624$1\",0,\"74576|(?:16|7[56])24\"],\"IN\":[\"91\",\"00\",\"(?:000800|[2-9]\\\\d\\\\d)\\\\d{7}|1\\\\d{7,12}\",[8,9,10,11,12,13],[[\"(\\\\d{8})\",\"$1\",[\"5(?:0|2[23]|3[03]|[67]1|88)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)\"],0,1],[\"(\\\\d{4})(\\\\d{4,5})\",\"$1 $2\",[\"180\",\"1800\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"140\"],0,1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"11|2[02]|33|4[04]|79[1-7]|80[2-46]\",\"11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])\",\"11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807\",\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]\",\"1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\\\d|7(?:1(?:[013-8]\\\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]))[2-7]\"],\"0$1\",1],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"[6-9]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{2,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:6|8[06])\",\"1(?:6|8[06]0)\"],0,1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"18\"],0,1]],\"0\"],\"IO\":[\"246\",\"00\",\"3\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"3\"]]]],\"IQ\":[\"964\",\"00\",\"(?:1|7\\\\d\\\\d)\\\\d{7}|[2-6]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"IR\":[\"98\",\"00\",\"[1-9]\\\\d{9}|(?:[1-8]\\\\d\\\\d|9)\\\\d{3,4}\",[4,5,6,7,10],[[\"(\\\\d{4,5})\",\"$1\",[\"96\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,5})\",\"$1 $2\",[\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-8]\"],\"0$1\"]],\"0\"],\"IS\":[\"354\",\"00|1(?:0(?:01|[12]0)|100)\",\"(?:38\\\\d|[4-9])\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,0,\"00\"],\"IT\":[\"39\",\"00\",\"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"0[26]\"]],[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"0[13-57-9][0159]|8(?:03|4[17]|9[245])\",\"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|[45][0-4]))\"]],[\"(\\\\d{4})(\\\\d{2,6})\",\"$1 $2\",[\"0(?:[13-579][2-46-8]|8[236-8])\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"894\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[26]|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1[4679]|[38]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[13-57-9][0159]\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{5})\",\"$1 $2 $3\",[\"0[26]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,[[\"0669[0-79]\\\\d{1,6}|0(?:1(?:[0159]\\\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\\\d\\\\d|3(?:[0159]\\\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\\\d|6[0-8])|7(?:[0159]\\\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\\\d{2,7}\"],[\"3[1-9]\\\\d{8}|3[2-9]\\\\d{7}\",[9,10]],[\"80(?:0\\\\d{3}|3)\\\\d{3}\",[6,9]],[\"(?:0878\\\\d\\\\d|89(?:2|4[5-9]\\\\d))\\\\d{3}|89[45][0-4]\\\\d\\\\d|(?:1(?:44|6[346])|89(?:5[5-9]|9))\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],0,0,0,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\",[6,9]]]],\"JE\":[\"44\",\"00\",\"1534\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"0|([0-24-8]\\\\d{5})$\",\"1534$1\",0,0,[[\"1534[0-24-8]\\\\d{5}\"],[\"7(?:(?:(?:50|82)9|937)\\\\d|7(?:00[378]|97[7-9]))\\\\d{5}\"],[\"80(?:07(?:35|81)|8901)\\\\d{4}\"],[\"(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\\\d{4}\"],[\"701511\\\\d{4}\"],0,[\"(?:3(?:0(?:07(?:35|81)|8901)|3\\\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\\\d{4})\\\\d{4}\"],[\"76(?:464|652)\\\\d{5}|76(?:0[0-2]|2[356]|34|4[01347]|5[49]|6[0-369]|77|81|9[139])\\\\d{6}\"],[\"56\\\\d{8}\"]]],\"JM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|658|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"658|876\"],\"JO\":[\"962\",\"00\",\"(?:(?:[2689]|7\\\\d)\\\\d|32|53)\\\\d{6}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2356]|87\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"70\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"JP\":[\"81\",\"010\",\"00[1-9]\\\\d{6,14}|[257-9]\\\\d{9}|(?:00|[1-9]\\\\d\\\\d)\\\\d{6}\",[8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"(?:12|57|99)0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:49|80|9[16])\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9]|636)|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9]|636[457-9])|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[36]|4(?:2[09]|7[01])\",\"[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[27-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|51|6(?:[0-24]|36|5[0-3589]|72|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3\",[\"[14]|[289][2-9]|5[3-9]|7[2-4679]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"800\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[257-9]\"],\"0$1\"]],\"0\"],\"KE\":[\"254\",\"000\",\"(?:[17]\\\\d\\\\d|900)\\\\d{6}|(?:2|80)0\\\\d{6,7}|[4-6]\\\\d{6,8}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"[24-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[17]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"KG\":[\"996\",\"00\",\"8\\\\d{9}|(?:[235-8]\\\\d|99)\\\\d{7}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3(?:1[346]|[24-79])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235-79]|88\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d)(\\\\d{2,3})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"KH\":[\"855\",\"00[14-9]\",\"1\\\\d{9}|[1-9]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"KI\":[\"686\",\"00\",\"(?:[37]\\\\d|6[0-79])\\\\d{6}|(?:[2-48]\\\\d|50)\\\\d{3}\",[5,8],0,\"0\"],\"KM\":[\"269\",\"00\",\"[3478]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[3478]\"]]]],\"KN\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"869$1\",0,\"869\"],\"KP\":[\"850\",\"00|99\",\"85\\\\d{6}|(?:19\\\\d|[2-7])\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"KR\":[\"82\",\"00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))\",\"00[1-9]\\\\d{8,11}|(?:[12]|5\\\\d{3})\\\\d{7}|[13-6]\\\\d{9}|(?:[1-6]\\\\d|80)\\\\d{7}|[3-6]\\\\d{4,5}|(?:00|7)0\\\\d{8}\",[5,6,8,9,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1-$2\",[\"(?:3[1-3]|[46][1-4]|5[1-5])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"1\"]],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"[1346]|5[1-5]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1-$2-$3\",[\"5\"],\"0$1\"]],\"0\",0,\"0(8(?:[1-46-8]|5\\\\d\\\\d))?\"],\"KW\":[\"965\",\"00\",\"(?:18|[2569]\\\\d\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[169]|2(?:[235]|4[1-35-9])|52\"]],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[25]\"]]]],\"KY\":[\"1\",\"011\",\"(?:345|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"345$1\",0,\"345\"],\"KZ\":[\"7\",\"810\",\"33622\\\\d{5}|(?:7\\\\d|80)\\\\d{8}\",[10],0,\"8\",0,0,0,0,\"33|7\",0,\"8~10\"],\"LA\":[\"856\",\"00\",\"[23]\\\\d{9}|3\\\\d{8}|(?:[235-8]\\\\d|41)\\\\d{6}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2[13]|3[14]|[4-8]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"30[013-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\"],\"LB\":[\"961\",\"00\",\"[7-9]\\\\d{7}|[13-9]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"]]],\"0\"],\"LC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|758|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-8]\\\\d{6})$\",\"758$1\",0,\"758\"],\"LI\":[\"423\",\"00\",\"90\\\\d{5}|(?:[2378]|6\\\\d\\\\d)\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[237-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"69\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],\"0\",0,\"0|(1001)\"],\"LK\":[\"94\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[1-689]\"],\"0$1\"]],\"0\"],\"LR\":[\"231\",\"00\",\"(?:2|33|5\\\\d|77|88)\\\\d{7}|[4-6]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[4-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\"]],\"0\"],\"LS\":[\"266\",\"00\",\"(?:[256]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2568]\"]]]],\"LT\":[\"370\",\"00\",\"(?:[3469]\\\\d|52|[78]0)\\\\d{6}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"52[0-7]\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"8 $1\",1],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"37|4(?:[15]|6[1-8])\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"(8-$1)\",1]],\"8\",0,\"[08]\"],\"LU\":[\"352\",\"00\",\"35[013-9]\\\\d{4,8}|6\\\\d{8}|35\\\\d{2,4}|(?:[2457-9]\\\\d|3[0-46-9])\\\\d{2,9}\",[4,5,6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"20[2-689]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"80[01]|90[015]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"20\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4 $5\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,5})\",\"$1 $2 $3 $4\",[\"[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]\"]]],0,0,\"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\\\d)\"],\"LV\":[\"371\",\"00\",\"(?:[268]\\\\d|90)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[269]|8[01]\"]]]],\"LY\":[\"218\",\"00\",\"[2-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MA\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],[[\"(\\\\d{5})(\\\\d{4})\",\"$1-$2\",[\"5(?:29|38)\",\"5(?:29|38)[89]\",\"5(?:29|38)[89]0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5[45]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1-$2\",[\"5(?:2[2-489]|3[5-9]|9)|892\",\"5(?:2(?:[2-49]|8[235-9])|3[5-9]|9)|892\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"8\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1-$2\",[\"[5-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"5(?:29(?:[189][05]|2[29]|3[01])|38[89][05])\\\\d{4}|5(?:2(?:[015-7]\\\\d|2[02-9]|3[0-578]|4[02-46-8]|8[0235-7]|90)|3(?:[0-47]\\\\d|5[02-9]|6[02-8]|80|9[3-9])|(?:4[067]|5[03])\\\\d)\\\\d{5}\"],[\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:0[0-8]|6[1267]|7[0-37]))\\\\d{6}\"],[\"80\\\\d{7}\"],[\"89\\\\d{7}\"],0,0,0,0,[\"592(?:4[0-2]|93)\\\\d{4}\"]]],\"MC\":[\"377\",\"00\",\"870\\\\d{5}|(?:[349]|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[39]\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"6\"],\"0$1\"]],\"0\"],\"MD\":[\"373\",\"00\",\"(?:[235-7]\\\\d|[89]0)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"22|3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[25-7]\"],\"0$1\"]],\"0\"],\"ME\":[\"382\",\"00\",\"(?:20|[3-79]\\\\d)\\\\d{6}|80\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MF\":[\"590\",\"00\",\"(?:590|69\\\\d|976)\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[29]|3[0-5]))\\\\d{4}\"],0,0,0,0,0,0,[\"976[01]\\\\d{5}\"]]],\"MG\":[\"261\",\"00\",\"[23]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\",0,\"0|([24-9]\\\\d{6})$\",\"20$1\"],\"MH\":[\"692\",\"011\",\"329\\\\d{4}|(?:[256]\\\\d|45)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-6]\"]]],\"1\"],\"MK\":[\"389\",\"00\",\"[2-578]\\\\d{7}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[347]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[58]\"],\"0$1\"]],\"0\"],\"ML\":[\"223\",\"00\",\"[24-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-9]\"]]]],\"MM\":[\"95\",\"00\",\"1\\\\d{5,7}|95\\\\d{6}|(?:[4-7]|9[0-46-9])\\\\d{6,8}|(?:2|8\\\\d)\\\\d{5,8}\",[6,7,8,9,10],[[\"(\\\\d)(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"16|2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[4-7]|8[1-35]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4,6})\",\"$1 $2 $3\",[\"9(?:2[0-4]|[35-9]|4[137-9])\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"92\"],\"0$1\"],[\"(\\\\d)(\\\\d{5})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"MN\":[\"976\",\"001\",\"[12]\\\\d{7,9}|[57-9]\\\\d{7}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[12]1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[57-9]\"]],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[12]2[1-3]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])\",\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"[12]\"],\"0$1\"]],\"0\"],\"MO\":[\"853\",\"00\",\"(?:28|[68]\\\\d)\\\\d{6}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[268]\"]]]],\"MP\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:67|90)0\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"670$1\",0,\"670\"],\"MQ\":[\"596\",\"00\",\"69\\\\d{7}|(?:59|97)6\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"]],\"0\"],\"MR\":[\"222\",\"00\",\"(?:[2-4]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-48]\"]]]],\"MS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|664|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([34]\\\\d{6})$\",\"664$1\",0,\"664\"],\"MT\":[\"356\",\"00\",\"3550\\\\d{4}|(?:[2579]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2357-9]\"]]]],\"MU\":[\"230\",\"0(?:0|[24-7]0|3[03])\",\"(?:[2-468]|5\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46]|8[013]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"5\"]]],0,0,0,0,0,0,0,\"020\"],\"MV\":[\"960\",\"0(?:0|19)\",\"(?:800|9[0-57-9]\\\\d)\\\\d{7}|[34679]\\\\d{6}\",[7,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[3467]|9[13-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,0,\"00\"],\"MW\":[\"265\",\"00\",\"1\\\\d{6}(?:\\\\d{2})?|(?:[23]1|77|88|99)\\\\d{7}\",[7,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[137-9]\"],\"0$1\"]],\"0\"],\"MX\":[\"52\",\"0[09]\",\"(?:1(?:[01467]\\\\d|[2359][1-9]|8[1-79])|[2-9]\\\\d)\\\\d{8}\",[10,11],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"33|5[56]|81\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-9]\"],0,1],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 $3 $4\",[\"1(?:33|5[56]|81)\"],0,1],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 $3 $4\",[\"1\"],0,1]],\"01\",0,\"0(?:[12]|4[45])|1\",0,0,0,0,\"00\"],\"MY\":[\"60\",\"00\",\"1\\\\d{8,9}|(?:3\\\\d|[4-9])\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"[4-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1-$2 $3\",[\"1(?:[02469]|[378][1-9])|8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"3\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3-$4\",[\"1[36-8]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"15\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"MZ\":[\"258\",\"00\",\"(?:2|8\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2|8[2-79]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"NA\":[\"264\",\"00\",\"[68]\\\\d{7,8}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"87\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"NC\":[\"687\",\"00\",\"[2-57-9]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1.$2.$3\",[\"[2-57-9]\"]]]],\"NE\":[\"227\",\"00\",\"[027-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"08\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[089]|2[013]|7[04]\"]]]],\"NF\":[\"672\",\"00\",\"[13]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"1[0-3]\"]],[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"[13]\"]]],0,0,\"([0-258]\\\\d{4})$\",\"3$1\"],\"NG\":[\"234\",\"009\",\"(?:[124-7]|9\\\\d{3})\\\\d{6}|[1-9]\\\\d{7}|[78]\\\\d{9,13}\",[7,8,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"78\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]|9(?:0[3-9]|[1-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-7]|8[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})(\\\\d{5,6})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"]],\"0\"],\"NI\":[\"505\",\"00\",\"(?:1800|[25-8]\\\\d{3})\\\\d{4}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[125-8]\"]]]],\"NL\":[\"31\",\"00\",\"(?:[124-7]\\\\d\\\\d|3(?:[02-9]\\\\d|1[0-8]))\\\\d{6}|[89]\\\\d{6,9}|1\\\\d{4,5}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{4,7})\",\"$1 $2\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"66\"],\"0$1\"],[\"(\\\\d)(\\\\d{8})\",\"$1 $2\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[16-8]|2[259]|3[124]|4[17-9]|5[124679]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-57-9]\"],\"0$1\"]],\"0\"],\"NO\":[\"47\",\"00\",\"(?:0|[2-9]\\\\d{3})\\\\d{4}\",[5,8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[489]|5[89]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[235-7]\"]]],0,0,0,0,0,\"[02-689]|7[0-8]\"],\"NP\":[\"977\",\"00\",\"(?:1\\\\d|9)\\\\d{9}|[1-9]\\\\d{7}\",[8,10,11],[[\"(\\\\d)(\\\\d{7})\",\"$1-$2\",[\"1[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1-$2\",[\"1[01]|[2-8]|9(?:[1-579]|6[2-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"9\"]]],\"0\"],\"NR\":[\"674\",\"00\",\"(?:444|(?:55|8\\\\d)\\\\d|666)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-68]\"]]]],\"NU\":[\"683\",\"00\",\"(?:[47]|888\\\\d)\\\\d{3}\",[4,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8\"]]]],\"NZ\":[\"64\",\"0(?:0|161)\",\"[29]\\\\d{7,9}|50\\\\d{5}(?:\\\\d{2,3})?|6[0-35-9]\\\\d{6}|7\\\\d{7,8}|8\\\\d{4,9}|(?:11\\\\d|[34])\\\\d{7}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,8})\",\"$1 $2\",[\"8[1-579]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"50[036-8]|[89]0\",\"50(?:[0367]|88)|[89]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"24|[346]|7[2-57-9]|9[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:10|74)|[59]|80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1|2[028]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,5})\",\"$1 $2 $3\",[\"2(?:[169]|7[0-35-9])|7|86\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"00\"],\"OM\":[\"968\",\"00\",\"(?:1505|[279]\\\\d{3}|500)\\\\d{4}|800\\\\d{5,6}\",[7,8,9],[[\"(\\\\d{3})(\\\\d{4,6})\",\"$1 $2\",[\"[58]\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[179]\"]]]],\"PA\":[\"507\",\"00\",\"8\\\\d{9}|[68]\\\\d{7}|[1-57-9]\\\\d{6}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[1-57-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[68]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]]],\"PE\":[\"51\",\"19(?:1[124]|77|90)00\",\"(?:[14-8]|9\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[4-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"]]],\"0\",0,0,0,0,0,0,0,\" Anexo \"],\"PF\":[\"689\",\"00\",\"[48]\\\\d{7}|4\\\\d{5}\",[6,8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[48]\"]]]],\"PG\":[\"675\",\"00|140[1-3]\",\"(?:180|[78]\\\\d{3})\\\\d{4}|(?:[2-589]\\\\d|64)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"18|[2-69]|85\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[78]\"]]],0,0,0,0,0,0,0,\"00\"],\"PH\":[\"63\",\"00\",\"1800\\\\d{7,9}|(?:2|[89]\\\\d{4})\\\\d{5}|[2-8]\\\\d{8}|[28]\\\\d{7}\",[6,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"2\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2\",\"3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"346|4(?:27|9[35])|883\",\"3469|4(?:279|9(?:30|56))|8834\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|8[2-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{4})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"1\"]]],\"0\"],\"PK\":[\"92\",\"00\",\"122\\\\d{6}|[24-8]\\\\d{10,11}|9(?:[013-9]\\\\d{8,10}|2(?:[01]\\\\d\\\\d|2(?:[06-8]\\\\d|1[01]))\\\\d{7})|(?:[2-8]\\\\d{3}|92(?:[0-7]\\\\d|8[1-9]))\\\\d{6}|[24-9]\\\\d{8}|[89]\\\\d{7}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,7})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{6,7})\",\"$1 $2\",[\"2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])\",\"9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{7,8})\",\"$1 $2\",[\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"58\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[24-9]\"],\"(0$1)\"]],\"0\"],\"PL\":[\"48\",\"00\",\"6\\\\d{5}(?:\\\\d{2})?|8\\\\d{9}|[1-9]\\\\d{6}(?:\\\\d{2})?\",[6,7,8,9,10],[[\"(\\\\d{5})\",\"$1\",[\"19\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"11|64\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1\",\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"64\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"39|45|5[0137]|6[0469]|7[02389]|8(?:0[14]|8)\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[2-8]|[2-7]|8[1-79]|9[145]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"8\"]]]],\"PM\":[\"508\",\"00\",\"[45]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"]],\"0\"],\"PR\":[\"1\",\"011\",\"(?:[589]\\\\d\\\\d|787)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"787|939\"],\"PS\":[\"970\",\"00\",\"[2489]2\\\\d{6}|(?:1\\\\d|5)\\\\d{8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2489]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"PT\":[\"351\",\"00\",\"(?:[26-9]\\\\d|30)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2[12]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[236-9]\"]]]],\"PW\":[\"680\",\"01[12]\",\"(?:[24-8]\\\\d\\\\d|345|900)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"PY\":[\"595\",\"00\",\"59\\\\d{4,6}|9\\\\d{5,10}|(?:[2-46-8]\\\\d|5[0-8])\\\\d{4,7}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"[2-9]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{4,5})\",\"$1 $2\",[\"2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"87\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"9(?:[5-79]|8[1-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"]]],\"0\"],\"QA\":[\"974\",\"00\",\"[2-7]\\\\d{7}|(?:2\\\\d\\\\d|800)\\\\d{4}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"2[126]|8\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]]]],\"RE\":[\"262\",\"00\",\"9769\\\\d{5}|(?:26|[68]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2689]\"],\"0$1\"]],\"0\",0,0,0,0,\"26[23]|69|[89]\"],\"RO\":[\"40\",\"00\",\"(?:[237]\\\\d|[89]0)\\\\d{7}|[23]\\\\d{5}\",[6,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"2[3-6]\",\"2[3-6]\\\\d9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"219|31\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[237-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\" int \"],\"RS\":[\"381\",\"00\",\"38[02-9]\\\\d{6,9}|6\\\\d{7,9}|90\\\\d{4,8}|38\\\\d{5,6}|(?:7\\\\d\\\\d|800)\\\\d{3,9}|(?:[12]\\\\d|3[0-79])\\\\d{5,10}\",[6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3,9})\",\"$1 $2\",[\"(?:2[389]|39)0|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5,10})\",\"$1 $2\",[\"[1-36]\"],\"0$1\"]],\"0\"],\"RU\":[\"7\",\"810\",\"[347-9]\\\\d{9}\",[10],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-8]|2[1-9])\",\"7(?:1(?:[0-6]2|7|8[27])|2(?:1[23]|[2-9]2))\",\"7(?:1(?:[0-6]2|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2\"],\"8 ($1)\",1],[\"(\\\\d{5})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-68]|2[1-9])\",\"7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))\",\"7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[3489]\"],\"8 ($1)\",1]],\"8\",0,0,0,0,\"3[04-689]|[489]\",0,\"8~10\"],\"RW\":[\"250\",\"00\",\"(?:06|[27]\\\\d\\\\d|[89]00)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"]]],\"0\"],\"SA\":[\"966\",\"00\",\"92\\\\d{7}|(?:[15]|8\\\\d)\\\\d{8}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\"],\"SB\":[\"677\",\"0[01]\",\"(?:[1-6]|[7-9]\\\\d\\\\d)\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7|8[4-9]|9(?:[1-8]|9[0-8])\"]]]],\"SC\":[\"248\",\"010|0[0-2]\",\"8000\\\\d{3}|(?:[249]\\\\d|64)\\\\d{5}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[246]|9[57]\"]]],0,0,0,0,0,0,0,\"00\"],\"SD\":[\"249\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"SE\":[\"46\",\"00\",\"(?:[26]\\\\d\\\\d|9)\\\\d{9}|[1-9]\\\\d{8}|[1-689]\\\\d{7}|[1-4689]\\\\d{6}|2\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"20\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3\",[\"[12][136]|3[356]|4[0246]|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d)(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{3})\",\"$1-$2 $3\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"10|7\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1-$2 $3 $4\",[\"9\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4 $5\",[\"[26]\"],\"0$1\",0,\"$1 $2 $3 $4 $5\"]],\"0\"],\"SG\":[\"65\",\"0[0-3]\\\\d\",\"(?:(?:1\\\\d|8)\\\\d\\\\d|7000)\\\\d{7}|[3689]\\\\d{7}\",[8,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[369]|8(?:0[1-3]|[1-9])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"SH\":[\"290\",\"00\",\"(?:[256]\\\\d|8)\\\\d{3}\",[4,5],0,0,0,0,0,0,\"[256]\"],\"SI\":[\"386\",\"00|10(?:22|66|88|99)\",\"[1-7]\\\\d{7}|8\\\\d{4,7}|90\\\\d{4,6}\",[5,6,7,8],[[\"(\\\\d{2})(\\\\d{3,6})\",\"$1 $2\",[\"8[09]|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"59|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37][01]|4[0139]|51|6\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-57]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,0,\"00\"],\"SJ\":[\"47\",\"00\",\"0\\\\d{4}|(?:[4589]\\\\d|79)\\\\d{6}\",[5,8],0,0,0,0,0,0,\"79\"],\"SK\":[\"421\",\"00\",\"[2-689]\\\\d{8}|[2-59]\\\\d{6}|[2-5]\\\\d{5}\",[6,7,9],[[\"(\\\\d)(\\\\d{2})(\\\\d{3,4})\",\"$1 $2 $3\",[\"21\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-5][1-8]1\",\"[3-5][1-8]1[67]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[689]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"[3-5]\"],\"0$1\"]],\"0\"],\"SL\":[\"232\",\"00\",\"(?:[2378]\\\\d|66|99)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[236-9]\"],\"(0$1)\"]],\"0\"],\"SM\":[\"378\",\"00\",\"(?:0549|[5-7]\\\\d)\\\\d{6}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"0\"]]],0,0,\"([89]\\\\d{5})$\",\"0549$1\"],\"SN\":[\"221\",\"00\",\"(?:[378]\\\\d{4}|93330)\\\\d{4}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[379]\"]]]],\"SO\":[\"252\",\"00\",\"[346-9]\\\\d{8}|[12679]\\\\d{7}|[1-5]\\\\d{6}|[1348]\\\\d{5}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"8[125]\"]],[\"(\\\\d{6})\",\"$1\",[\"[134]\"]],[\"(\\\\d)(\\\\d{6})\",\"$1 $2\",[\"[15]|2[0-79]|3[0-46-8]|4[0-7]\"]],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"24|[67]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[3478]|64|90\"]],[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"1|28|6[1-35-9]|9[2-9]\"]]],\"0\"],\"SR\":[\"597\",\"00\",\"(?:[2-5]|68|[78]\\\\d)\\\\d{5}\",[6,7],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"56\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1-$2\",[\"[2-5]\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[6-8]\"]]]],\"SS\":[\"211\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"ST\":[\"239\",\"00\",\"(?:22|9\\\\d)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[29]\"]]]],\"SV\":[\"503\",\"00\",\"[267]\\\\d{7}|[89]00\\\\d{4}(?:\\\\d{4})?\",[7,8,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[89]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[267]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]]],\"SX\":[\"1\",\"011\",\"7215\\\\d{6}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|(5\\\\d{6})$\",\"721$1\",0,\"721\"],\"SY\":[\"963\",\"00\",\"[1-39]\\\\d{8}|[1-5]\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-5]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\",1]],\"0\"],\"SZ\":[\"268\",\"00\",\"0800\\\\d{4}|(?:[237]\\\\d|900)\\\\d{6}\",[8,9],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[0237]\"]],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"9\"]]]],\"TA\":[\"290\",\"00\",\"8\\\\d{3}\",[4],0,0,0,0,0,0,\"8\"],\"TC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|649|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-479]\\\\d{6})$\",\"649$1\",0,\"649\"],\"TD\":[\"235\",\"00|16\",\"(?:22|[69]\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2679]\"]]],0,0,0,0,0,0,0,\"00\"],\"TG\":[\"228\",\"00\",\"[279]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[279]\"]]]],\"TH\":[\"66\",\"00[1-9]\",\"1\\\\d{9}|[1689]\\\\d{8}|[1-57]\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[13-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"TJ\":[\"992\",\"810\",\"(?:[02]0|11|[3-57-9]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{6})(\\\\d)(\\\\d{2})\",\"$1 $2 $3\",[\"331\",\"3317\"],0,1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[34]7|91[78]\"],0,1],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"3\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[02457-9]|11\"],0,1]],\"8\",0,0,0,0,0,0,\"8~10\"],\"TK\":[\"690\",\"00\",\"[2-47]\\\\d{3,6}\",[4,5,6,7]],\"TL\":[\"670\",\"00\",\"7\\\\d{7}|(?:[2-47]\\\\d|[89]0)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-489]|70\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"7\"]]]],\"TM\":[\"993\",\"810\",\"[1-6]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"12\"],\"(8 $1)\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-5]\"],\"(8 $1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"6\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"TN\":[\"216\",\"00\",\"[2-57-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-57-9]\"]]]],\"TO\":[\"676\",\"00\",\"(?:0800|(?:[5-8]\\\\d\\\\d|999)\\\\d)\\\\d{3}|[2-8]\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1-$2\",[\"[2-4]|50|6[09]|7[0-24-69]|8[05]\"]],[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]]]],\"TR\":[\"90\",\"00\",\"4\\\\d{6}|8\\\\d{11,12}|(?:[2-58]\\\\d\\\\d|900)\\\\d{7}\",[7,10,12,13],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"512|8[01589]|90\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5(?:[0-59]|61)\",\"5(?:[0-59]|616)\",\"5(?:[0-59]|6161)\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24][1-8]|3[1-9]\"],\"(0$1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{6,7})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1]],\"0\"],\"TT\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-46-8]\\\\d{6})$\",\"868$1\",0,\"868\"],\"TV\":[\"688\",\"00\",\"(?:2|7\\\\d\\\\d|90)\\\\d{4}\",[5,6,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"TW\":[\"886\",\"0(?:0[25-79]|19)\",\"[2-689]\\\\d{8}|7\\\\d{9,10}|[2-8]\\\\d{7}|2\\\\d{6}\",[7,8,9,10,11],[[\"(\\\\d{2})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"202\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[258]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]\",\"[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\"#\"],\"TZ\":[\"255\",\"00[056]\",\"(?:[26-8]\\\\d|41|90)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[24]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"]],\"0\"],\"UA\":[\"380\",\"00\",\"[89]\\\\d{9}|[3-9]\\\\d{8}\",[9,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]\",\"6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[45][0-5]|5(?:0|6[37])|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]\",\"4[45][0-5]|5(?:0|6(?:3[14-7]|7))|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"0~0\"],\"UG\":[\"256\",\"00[057]\",\"800\\\\d{6}|(?:[29]0|[347]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"202\",\"2024\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[27-9]|4(?:6[45]|[7-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[34]\"],\"0$1\"]],\"0\"],\"US\":[\"1\",\"011\",\"[2-9]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",[\"[2-9]\"],0,1,\"$1-$2-$3\"]],\"1\",0,0,0,0,0,[[\"(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[01356]|3[0-24679]|4[167]|5[12]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[0235]|58|6[39]|7[0589]|8[04])|5(?:0[1-57-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[013-5]|8[056])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[0179]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[02-59]|8[156])|8(?:0[1-68]|1[02-8]|2[08]|3[0-289]|4[3578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[0179]|5[12469]|7[0-389]|8[04-69]))[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"UY\":[\"598\",\"0(?:0|1[3-9]\\\\d)\",\"4\\\\d{9}|[249]\\\\d{7}|(?:[49]\\\\d|80)\\\\d{5}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"405|8|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[24]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"00\",\" int. \"],\"UZ\":[\"998\",\"810\",\"55501\\\\d{4}|(?:33|[679]\\\\d|88)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[35-9]\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"VA\":[\"39\",\"00\",\"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11],0,0,0,0,0,0,\"06698\"],\"VC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|784|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"784$1\",0,\"784\"],\"VE\":[\"58\",\"00\",\"[68]00\\\\d{7}|(?:[24]\\\\d|[59]0)\\\\d{8}\",[10],[[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"[24-689]\"],\"0$1\"]],\"0\"],\"VG\":[\"1\",\"011\",\"(?:284|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-578]\\\\d{6})$\",\"284$1\",0,\"284\"],\"VI\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:34|90)0\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"340$1\",0,\"340\"],\"VN\":[\"84\",\"00\",\"[12]\\\\d{9}|[135-9]\\\\d{8}|[16]\\\\d{7}|[16-8]\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"1\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[69]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[48]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\",1]],\"0\"],\"VU\":[\"678\",\"00\",\"[48]8\\\\d{3}|(?:[23]|[579]\\\\d\\\\d)\\\\d{4}\",[5,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[579]\"]]]],\"WF\":[\"681\",\"00\",\"(?:[45]0|68|72|8\\\\d)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[4-8]\"]]]],\"WS\":[\"685\",\"0\",\"(?:[2-6]|8\\\\d{5})\\\\d{4}|[78]\\\\d{6}|[68]\\\\d{5}\",[5,6,7,10],[[\"(\\\\d{5})\",\"$1\",[\"[2-5]|6[1-9]\"]],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[68]\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"XK\":[\"383\",\"00\",\"[23]\\\\d{7,8}|(?:4\\\\d\\\\d|[89]00)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[23]\"],\"0$1\"]],\"0\"],\"YE\":[\"967\",\"00\",\"(?:1|7\\\\d)\\\\d{7}|[1-7]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-6]|7[24-68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"YT\":[\"262\",\"00\",\"80\\\\d{7}|(?:26|63)9\\\\d{6}\",[9],0,\"0\",0,0,0,0,\"269|63\"],\"ZA\":[\"27\",\"00\",\"[1-79]\\\\d{8}|8\\\\d{4,9}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"860\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"ZM\":[\"260\",\"00\",\"(?:63|80)0\\\\d{6}|(?:21|[79]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[28]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[79]\"],\"0$1\"]],\"0\"],\"ZW\":[\"263\",\"00\",\"2(?:[0-57-9]\\\\d{6,8}|6[0-24-9]\\\\d{6,7})|[38]\\\\d{9}|[35-8]\\\\d{8}|[3-6]\\\\d{7}|[1-689]\\\\d{6}|[1-3569]\\\\d{5}|[1356]\\\\d{4}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{3,5})\",\"$1 $2\",[\"2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2\",\"2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)\",\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"29[013-9]|39|54\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,5})\",\"$1 $2\",[\"(?:25|54)8\",\"258|5483\"],\"0$1\"]],\"0\"]},\"nonGeographic\":{\"800\":[\"800\",0,\"[1-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[1-9]\"]]],0,0,0,0,0,0,[0,0,[\"[1-9]\\\\d{7}\"]]],\"808\":[\"808\",0,\"[1-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[1-9]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,0,[\"[1-9]\\\\d{7}\"]]],\"870\":[\"870\",0,\"7\\\\d{11}|[35-7]\\\\d{8}\",[9,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[35-7]\"]]],0,0,0,0,0,0,[0,[\"(?:[356]|774[45])\\\\d{8}|7[6-8]\\\\d{7}\"]]],\"878\":[\"878\",0,\"10\\\\d{10}\",[12],[[\"(\\\\d{2})(\\\\d{5})(\\\\d{5})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"10\\\\d{10}\"]]],\"881\":[\"881\",0,\"[0-36-9]\\\\d{8}\",[9],[[\"(\\\\d)(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"[0-36-9]\"]]],0,0,0,0,0,0,[0,[\"[0-36-9]\\\\d{8}\"]]],\"882\":[\"882\",0,\"[13]\\\\d{6}(?:\\\\d{2,5})?|285\\\\d{9}|[19]\\\\d{7}\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"16|342\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"3[23]\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"34[57]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"34\"]],[\"(\\\\d{2})(\\\\d{4,5})(\\\\d{5})\",\"$1 $2 $3\",[\"[1-3]\"]]],0,0,0,0,0,0,[0,[\"3(?:37\\\\d\\\\d|42)\\\\d{4}|3(?:2|47|7\\\\d{3})\\\\d{7}\",[7,9,10,12]],0,0,0,0,0,0,[\"1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\\\d{4}|6\\\\d{5,10})|(?:(?:285\\\\d\\\\d|3(?:45|[69]\\\\d{3}))\\\\d|9[89])\\\\d{6}\"]]],\"883\":[\"883\",0,\"51\\\\d{7}(?:\\\\d{3})?\",[9,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"510\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"510\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"51[013]0\\\\d{8}|5100\\\\d{5}\"]]],\"888\":[\"888\",0,\"\\\\d{11}\",[11],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\"]],0,0,0,0,0,0,[0,0,0,0,0,0,[\"\\\\d{11}\"]]],\"979\":[\"979\",0,\"[1359]\\\\d{8}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1359]\"]]],0,0,0,0,0,0,[0,0,0,[\"[1359]\\\\d{8}\"]]]}}","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// https://stackoverflow.com/a/46971044/970769\nvar ParseError = function ParseError(code) {\n  _classCallCheck(this, ParseError);\n\n  this.name = this.constructor.name;\n  this.message = code;\n  this.stack = new Error(code).stack;\n};\n\nexport { ParseError as default };\nParseError.prototype = Object.create(Error.prototype);\nParseError.prototype.constructor = ParseError;\n//# sourceMappingURL=ParseError.js.map","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport Metadata from './metadata';\nimport isPossibleNumber from './isPossibleNumber_';\nimport isValidNumber from './validate_';\nimport isValidNumberForRegion from './isValidNumberForRegion_';\nimport getNumberType from './helpers/getNumberType';\nimport formatNumber from './format_';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar PhoneNumber =\n/*#__PURE__*/\nfunction () {\n  function PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n    _classCallCheck(this, PhoneNumber);\n\n    if (!countryCallingCode) {\n      throw new TypeError('`country` or `countryCallingCode` not passed');\n    }\n\n    if (!nationalNumber) {\n      throw new TypeError('`nationalNumber` not passed');\n    }\n\n    var _metadata = new Metadata(metadata); // If country code is passed then derive `countryCallingCode` from it.\n    // Also store the country code as `.country`.\n\n\n    if (isCountryCode(countryCallingCode)) {\n      this.country = countryCallingCode;\n\n      _metadata.country(countryCallingCode);\n\n      countryCallingCode = _metadata.countryCallingCode();\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (_metadata.isNonGeographicCallingCode(countryCallingCode)) {\n          this.country = '001';\n        }\n      }\n    }\n\n    this.countryCallingCode = countryCallingCode;\n    this.nationalNumber = nationalNumber;\n    this.number = '+' + this.countryCallingCode + this.nationalNumber;\n    this.metadata = metadata;\n  }\n\n  _createClass(PhoneNumber, [{\n    key: \"isPossible\",\n    value: function isPossible() {\n      return isPossibleNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return isValidNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isNonGeographic\",\n    value: function isNonGeographic() {\n      var metadata = new Metadata(this.metadata);\n      return metadata.isNonGeographicCallingCode(this.countryCallingCode);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(phoneNumber) {\n      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;\n    } // // Is just an alias for `this.isValid() && this.country === country`.\n    // // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n    // isValidForRegion(country) {\n    // \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n    // }\n\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return getNumberType(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"format\",\n    value: function format(_format, options) {\n      return formatNumber(this, _format, options ? _objectSpread({}, options, {\n        v2: true\n      }) : {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"formatNational\",\n    value: function formatNational(options) {\n      return this.format('NATIONAL', options);\n    }\n  }, {\n    key: \"formatInternational\",\n    value: function formatInternational(options) {\n      return this.format('INTERNATIONAL', options);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI(options) {\n      return this.format('RFC3966', options);\n    }\n  }]);\n\n  return PhoneNumber;\n}();\n\nexport { PhoneNumber as default };\n\nvar isCountryCode = function isCountryCode(value) {\n  return /^[A-Z]{2}$/.test(value);\n};\n//# sourceMappingURL=PhoneNumber.js.map","import Metadata from './metadata';\nimport matchesEntirely from './helpers/matchesEntirely';\nimport getNumberType from './helpers/getNumberType';\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\n\nexport default function isValidNumber(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata); // This is just to support `isValidNumber({})`\n  // for cases when `parseNumber()` returns `{}`.\n\n  if (!input.country) {\n    return false;\n  }\n\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode); // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  } // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n\n\n  var national_number = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(national_number, metadata.nationalNumberPattern());\n}\n//# sourceMappingURL=validate_.js.map","import * as Yup from \"yup\";\nimport { isValidPhoneNumber } from \"libphonenumber-js\";\nimport { CountryCode } from \"libphonenumber-js/types\";\n\ndeclare module \"yup\" {\n  export interface StringSchema {\n    /**\n     * Check for phone number validity.\n     *\n     * @param {String} [countryCode=US] The country code to check against.\n     * @param {String} [errorMessage=DEFAULT_MESSAGE] The error message to return if the validation fails.\n     */\n    phone(countryCode?: CountryCode, errorMessage?: string): StringSchema;\n  }\n}\n\nconst YUP_PHONE_METHOD = \"phone\";\nconst CLDR_REGION_CODE_SIZE = 2;\n\nconst isValidCountryCode = (countryCode: any): boolean =>\n  typeof countryCode === \"string\" &&\n  countryCode.length === CLDR_REGION_CODE_SIZE;\n\nYup.addMethod(\n  Yup.string,\n  YUP_PHONE_METHOD,\n  function yupPhoneLite(countryCode?: CountryCode, errorMessage: string = \"\") {\n    const errMsg =\n      typeof errorMessage === \"string\" && errorMessage\n        ? errorMessage\n        : isValidCountryCode(countryCode)\n        ? `\\${path} must be a valid phone number for region ${countryCode}`\n        : \"${path} must be a valid phone number.\";\n    // @ts-ignore\n    return this.test(YUP_PHONE_METHOD, errMsg, (value: string) => {\n      if (!isValidCountryCode(countryCode)) {\n        // if not valid countryCode, then set default country to United States (US)\n        countryCode = \"US\";\n      }\n\n      if (value === undefined || value === \"\") {\n        return true;\n      }\n\n      try {\n        /* check if the countryCode provided should be used as\n          default country code or strictly followed\n        */\n        return isValidPhoneNumber(value, countryCode);\n      } catch {\n        return false;\n      }\n    });\n  }\n);\n"],"names":["withMetadata","func","_arguments","args","Array","metadata","compare","a","b","pa","pb","i","na","Number","nb","isNaN","getType","types","type","getCountryCallingCode","country","Metadata","Error","concat","setVersion","version","V3","V4","createExtensionPattern","purpose","rfcExtn","RFC3966_EXTN_PREFIX","getExtensionDigitsPattern","extLimitAfterExplicitLabel","explicitExtn","possibleSeparatorsBetweenNumberAndExtLabel","optionalExtnSuffix","ambiguousExtn","extLimitAfterAmbiguousChar","americanStyleExtnWithSuffix","ambiguousSeparator","extLimitWhenNotSure","autoDiallingExtn","possibleSeparatorsNumberExtLabelNoComma","extLimitAfterLikelyLabel","onlyCommasExtn","parseIncompletePhoneNumber","string","result","_iterator","_isArray","isArray","_i","Symbol","iterator","length","_ref","next","done","value","character","parsePhoneNumberCharacter","DIGITS","mergeArrays","merged","sort","checkNumberLengthForType","nationalNumber","type_info","possible_lengths","mobile_type","actual_length","minimum_length","isPossibleNumber","undefined","matchesEntirely","text","regular_expression","test","RegExp","getNumberType","input","options","isNumberTypeEqualTo","_NON_FIXED_LINE_PHONE","NON_FIXED_LINE_PHONE_TYPES","formatNumber","format","_objectSpread","DEFAULT_OPTIONS","countryCallingCode","number","formatNationalNumber","ext","formatExtension","formattedNumber","formatRFC3966","fromCountry","carrierCode","countryMetadata","SINGLE_IDD_PREFIX_REG_EXP","iddPrefix","formatAs","lastLeadingDigitsPattern","nationalNnumber","useInternationalFormat","withNationalPrefix","VALID_PUNCTUATION","formatNationalNumberUsingFormat","extractNationalNumber","prefixPattern","prefixMatch","capturedGroupsCount","hasCapturedGroups","prefixBeforeNationalNumber","possiblePositionOfTheFirstCapturedGroup","shouldExtractNationalPrefix","extractCountryCallingCode","callingCode","IDDPrefixPattern","matchedGroups","CAPTURING_DIGIT_PATTERN","numberWithoutIDD","possibleShorterNumber","possibleShorterNationalNumber","checkNumberLength","MAX_LENGTH_COUNTRY_CODE","_countryCallingCode","parse","ParseError","_part$split","part","_part$split2","name","MIN_LENGTH_FOR_NSN","VALID_PHONE_NUMBER_PATTERN","MAX_INPUT_STRING_LENGTH","v2","extract","startsAt","PHONE_NUMBER_START_PATTERN","slice","replace","AFTER_PHONE_NUMBER_END_PATTERN","start","EXTN_PATTERN","numberWithoutExtension","matches","withExtensionStripped","formattedPhoneNumber","_parseInput","_extractCountryCallin","defaultCountry","defaultCallingCode","_extractNationalNumbe","possibleCountries","nationalPhoneNumber","phone","exactCountry","MAX_LENGTH_FOR_NSN","phoneNumber","PhoneNumber","valid","possible","isValidPhoneNumber","_Array$prototype$slic","arguments","arg_1","arg_2","arg_3","arg_4","TypeError","_typeof","parseNumber","error","isValidPhoneNumber$1","_isValidPhoneNumber","code","instance","constructor","stack","Object","DASHES","SLASHES","DOTS","WHITESPACE","BRACKETS","TILDES","CALLING_CODE_REG_EXP","_classCallCheck","validateMetadata","is_object","keys","countries","filter","_","countryCode","v1","v3","nonGeographic","nonGeographical","getCountryMetadata","getCountryCodesForCallingCode","countryCodes","countryCallingCodes","selectNumberingPlan","hasCountry","NumberingPlan","hasCallingCode","getNumberingPlanMetadata","getCountryCodeForCallingCode","numberingPlan","IDDPrefix","defaultIDDPrefix","nationalNumberPattern","possibleLengths","formats","nationalPrefixForParsing","nationalPrefixTransformRule","leadingDigits","hasTypes","_type","country_phone_code_to_countries","country_calling_codes","globalMetadataObject","_this","map","_getFormats","getDefaultCountryMetadataForRegion","Format","_getNationalPrefixFormattingRule","_nationalPrefixForParsing","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","_type2","Type","DEFAULT_EXT_PREFIX","_format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormattingInNationalFormat","usesNationalPrefix","FIRST_GROUP_ONLY_PREFIX_PATTERN","maxLength","VALID_DIGITS","VALID_PHONE_NUMBER_WITH_EXTENSION","FIRST_GROUP_PATTERN","extension","_metadata","isValidNumber","Yup.string","YUP_PHONE_METHOD","yupPhoneLite","errorMessage","errMsg","CLDR_REGION_CODE_SIZE"],"mappings":"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"}