{"version":3,"file":"yup-phone-lite.umd.min.js","sources":["../node_modules/libphonenumber-js/min/metadata.js","../node_modules/libphonenumber-js/es6/tools/semver-compare.js","../node_modules/libphonenumber-js/es6/metadata.js","../node_modules/libphonenumber-js/es6/helpers/extension/createExtensionPattern.js","../node_modules/libphonenumber-js/es6/helpers/parseDigits.js","../node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js","../node_modules/libphonenumber-js/es6/helpers/mergeArrays.js","../node_modules/libphonenumber-js/es6/helpers/checkNumberLength.js","../node_modules/libphonenumber-js/es6/isPossibleNumber_.js","../node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js","../node_modules/libphonenumber-js/es6/helpers/getNumberType.js","../node_modules/libphonenumber-js/es6/validate_.js","../node_modules/libphonenumber-js/es6/helpers/applyInternationalSeparatorStyle.js","../node_modules/libphonenumber-js/es6/helpers/formatNationalNumberUsingFormat.js","../node_modules/libphonenumber-js/es6/format_.js","../node_modules/libphonenumber-js/es6/helpers/RFC3966.js","../node_modules/libphonenumber-js/es6/helpers/getIddPrefix.js","../node_modules/libphonenumber-js/es6/helpers/stripIddPrefix.js","../node_modules/libphonenumber-js/es6/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js","../node_modules/libphonenumber-js/es6/helpers/extractNationalNumber.js","../node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js","../node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCode.js","../node_modules/libphonenumber-js/es6/constants.js","../node_modules/libphonenumber-js/es6/helpers/getCountryByCallingCode.js","../node_modules/libphonenumber-js/es6/parse_.js","../node_modules/libphonenumber-js/es6/helpers/isViablePhoneNumber.js","../node_modules/libphonenumber-js/es6/helpers/extension/extractExtension.js","../node_modules/libphonenumber-js/es6/isValidPhoneNumber.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber_.js","../node_modules/libphonenumber-js/es6/findNumbers/util.js","../node_modules/libphonenumber-js/es6/findNumbers/utf-8.js","../node_modules/libphonenumber-js/es6/findNumbers/Leniency.js","../node_modules/libphonenumber-js/es6/findNumbers/isValidPreCandidate.js","../node_modules/libphonenumber-js/es6/findNumbers/isValidCandidate.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.util.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.complete.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.PatternMatcher.js","../node_modules/libphonenumber-js/min/exports/isValidPhoneNumber.js","../node_modules/libphonenumber-js/min/exports/PhoneNumberMatcher.js","../node_modules/libphonenumber-js/min/exports/AsYouType.js","../node_modules/libphonenumber-js/min/exports/Metadata.js","../node_modules/libphonenumber-js/index.es6.exports/PhoneNumberSearch.js","../node_modules/libphonenumber-js/metadata.min.json.js","../node_modules/libphonenumber-js/es6/ParseError.js","../node_modules/libphonenumber-js/es6/PhoneNumber.js","../node_modules/libphonenumber-js/es6/findNumbers/LRUCache.js","../node_modules/libphonenumber-js/es6/findNumbers/RegExpCache.js","../node_modules/libphonenumber-js/es6/findNumbers/parsePreCandidate.js","../node_modules/libphonenumber-js/es6/PhoneNumberMatcher.js","../node_modules/libphonenumber-js/es6/AsYouTypeState.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.js","../node_modules/libphonenumber-js/es6/AsYouTypeParser.js","../node_modules/libphonenumber-js/es6/AsYouType.js","../node_modules/libphonenumber-js/es6/findPhoneNumbers_.js","../src/yup-phone-lite.ts"],"sourcesContent":["// Importing from `.json.js` a workaround for a bug in web browsers' \"native\"\r\n// ES6 importing system which is uncapable of importing \"*.json\" files.\r\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\r\nimport metadata from '../metadata.min.json.js'\r\nexport default metadata\r\n\r\nexport function withMetadata(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}","// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\n//\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\nexport default function (a, b) {\n  a = a.split('-');\n  b = b.split('-');\n  var pa = a[0].split('.');\n  var pb = b[0].split('.');\n\n  for (var i = 0; i < 3; i++) {\n    var na = Number(pa[i]);\n    var nb = Number(pb[i]);\n    if (na > nb) return 1;\n    if (nb > na) return -1;\n    if (!isNaN(na) && isNaN(nb)) return 1;\n    if (isNaN(na) && !isNaN(nb)) return -1;\n  }\n\n  if (a[1] && b[1]) {\n    return a[1] > b[1] ? 1 : a[1] < b[1] ? -1 : 0;\n  }\n\n  return !a[1] && b[1] ? 1 : a[1] && !b[1] ? -1 : 0;\n}\n//# sourceMappingURL=semver-compare.js.map","function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport compare from './tools/semver-compare.js'; // Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\n\nvar V2 = '1.0.18'; // Added \"idd_prefix\" and \"default_idd_prefix\".\n\nvar V3 = '1.2.0'; // Moved `001` country code to \"nonGeographic\" section of metadata.\n\nvar V4 = '1.7.35';\nvar DEFAULT_EXT_PREFIX = ' ext. ';\nvar CALLING_CODE_REG_EXP = /^\\d+$/;\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\n\nvar Metadata = /*#__PURE__*/function () {\n  function Metadata(metadata) {\n    _classCallCheck(this, Metadata);\n\n    validateMetadata(metadata);\n    this.metadata = metadata;\n    setVersion.call(this, metadata);\n  }\n\n  _createClass(Metadata, [{\n    key: \"getCountries\",\n    value: function getCountries() {\n      return Object.keys(this.metadata.countries).filter(function (_) {\n        return _ !== '001';\n      });\n    }\n  }, {\n    key: \"getCountryMetadata\",\n    value: function getCountryMetadata(countryCode) {\n      return this.metadata.countries[countryCode];\n    }\n  }, {\n    key: \"nonGeographic\",\n    value: function nonGeographic() {\n      if (this.v1 || this.v2 || this.v3) return; // `nonGeographical` was a typo.\n      // It's present in metadata generated from `1.7.35` to `1.7.37`.\n      // The test case could be found by searching for \"nonGeographical\".\n\n      return this.metadata.nonGeographic || this.metadata.nonGeographical;\n    }\n  }, {\n    key: \"hasCountry\",\n    value: function hasCountry(country) {\n      return this.getCountryMetadata(country) !== undefined;\n    }\n  }, {\n    key: \"hasCallingCode\",\n    value: function hasCallingCode(callingCode) {\n      if (this.getCountryCodesForCallingCode(callingCode)) {\n        return true;\n      }\n\n      if (this.nonGeographic()) {\n        if (this.nonGeographic()[callingCode]) {\n          return true;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"isNonGeographicCallingCode\",\n    value: function isNonGeographicCallingCode(callingCode) {\n      if (this.nonGeographic()) {\n        return this.nonGeographic()[callingCode] ? true : false;\n      } else {\n        return this.getCountryCodesForCallingCode(callingCode) ? false : true;\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"country\",\n    value: function country(countryCode) {\n      return this.selectNumberingPlan(countryCode);\n    }\n  }, {\n    key: \"selectNumberingPlan\",\n    value: function selectNumberingPlan(countryCode, callingCode) {\n      // Supports just passing `callingCode` as the first argument.\n      if (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\n        callingCode = countryCode;\n        countryCode = null;\n      }\n\n      if (countryCode && countryCode !== '001') {\n        if (!this.hasCountry(countryCode)) {\n          throw new Error(\"Unknown country: \".concat(countryCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this);\n      } else if (callingCode) {\n        if (!this.hasCallingCode(callingCode)) {\n          throw new Error(\"Unknown calling code: \".concat(callingCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this);\n      } else {\n        this.numberingPlan = undefined;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getCountryCodesForCallingCode\",\n    value: function getCountryCodesForCallingCode(callingCode) {\n      var countryCodes = this.countryCallingCodes()[callingCode];\n\n      if (countryCodes) {\n        // Metadata before V4 included \"non-geographic entity\" calling codes\n        // inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\n        // Now the semantics of `country_calling_codes` has changed:\n        // it's specifically for \"countries\" now.\n        // Older versions of custom metadata will simply skip parsing\n        // \"non-geographic entity\" phone numbers with new versions\n        // of this library: it's not considered a bug,\n        // because such numbers are extremely rare,\n        // and developers extremely rarely use custom metadata.\n        if (countryCodes.length === 1 && countryCodes[0].length === 3) {\n          return;\n        }\n\n        return countryCodes;\n      }\n    }\n  }, {\n    key: \"getCountryCodeForCallingCode\",\n    value: function getCountryCodeForCallingCode(callingCode) {\n      var countryCodes = this.getCountryCodesForCallingCode(callingCode);\n\n      if (countryCodes) {\n        return countryCodes[0];\n      }\n    }\n  }, {\n    key: \"getNumberingPlanMetadata\",\n    value: function getNumberingPlanMetadata(callingCode) {\n      var countryCode = this.getCountryCodeForCallingCode(callingCode);\n\n      if (countryCode) {\n        return this.getCountryMetadata(countryCode);\n      }\n\n      if (this.nonGeographic()) {\n        var metadata = this.nonGeographic()[callingCode];\n\n        if (metadata) {\n          return metadata;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        // In that metadata, there was no concept of \"non-geographic\" metadata\n        // so metadata for `001` country code was stored along with other countries.\n        // The test case can be found by searching for:\n        // \"should work around `nonGeographic` metadata not existing\".\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return this.metadata.countries['001'];\n        }\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"countryCallingCode\",\n    value: function countryCallingCode() {\n      return this.numberingPlan.callingCode();\n    } // Deprecated.\n\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      return this.numberingPlan.IDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      return this.numberingPlan.defaultIDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      return this.numberingPlan.nationalNumberPattern();\n    } // Deprecated.\n\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      return this.numberingPlan.possibleLengths();\n    } // Deprecated.\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return this.numberingPlan.formats();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      return this.numberingPlan.nationalPrefixForParsing();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.numberingPlan.nationalPrefixTransformRule();\n    } // Deprecated.\n\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.numberingPlan.leadingDigits();\n    } // Deprecated.\n\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      return this.numberingPlan.hasTypes();\n    } // Deprecated.\n\n  }, {\n    key: \"type\",\n    value: function type(_type) {\n      return this.numberingPlan.type(_type);\n    } // Deprecated.\n\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      return this.numberingPlan.ext();\n    }\n  }, {\n    key: \"countryCallingCodes\",\n    value: function countryCallingCodes() {\n      if (this.v1) return this.metadata.country_phone_code_to_countries;\n      return this.metadata.country_calling_codes;\n    } // Deprecated.\n\n  }, {\n    key: \"chooseCountryByCountryCallingCode\",\n    value: function chooseCountryByCountryCallingCode(callingCode) {\n      return this.selectNumberingPlan(callingCode);\n    }\n  }, {\n    key: \"hasSelectedNumberingPlan\",\n    value: function hasSelectedNumberingPlan() {\n      return this.numberingPlan !== undefined;\n    }\n  }]);\n\n  return Metadata;\n}();\n\nexport { Metadata as default };\n\nvar NumberingPlan = /*#__PURE__*/function () {\n  function NumberingPlan(metadata, globalMetadataObject) {\n    _classCallCheck(this, NumberingPlan);\n\n    this.globalMetadataObject = globalMetadataObject;\n    this.metadata = metadata;\n    setVersion.call(this, globalMetadataObject.metadata);\n  }\n\n  _createClass(NumberingPlan, [{\n    key: \"callingCode\",\n    value: function callingCode() {\n      return this.metadata[0];\n    } // Formatting information for regions which share\n    // a country calling code is contained by only one region\n    // for performance reasons. For example, for NANPA region\n    // (\"North American Numbering Plan Administration\",\n    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n    // it will be contained in the metadata for `US`.\n\n  }, {\n    key: \"getDefaultCountryMetadataForRegion\",\n    value: function getDefaultCountryMetadataForRegion() {\n      return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode());\n    } // Is always present.\n\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[1];\n    } // Is only present when a country supports multiple IDD prefixes.\n\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[12];\n    }\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      if (this.v1 || this.v2) return this.metadata[1];\n      return this.metadata[2];\n    } // \"possible length\" data is always present in Google's metadata.\n\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.v1) return;\n      return this.metadata[this.v2 ? 2 : 3];\n    }\n  }, {\n    key: \"_getFormats\",\n    value: function _getFormats(metadata) {\n      return metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n    } // For countries of the same region (e.g. NANPA)\n    // formats are all stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      var _this = this;\n\n      var formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n      return formats.map(function (_) {\n        return new Format(_, _this);\n      });\n    }\n  }, {\n    key: \"nationalPrefix\",\n    value: function nationalPrefix() {\n      return this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n    }\n  }, {\n    key: \"_getNationalPrefixFormattingRule\",\n    value: function _getNationalPrefixFormattingRule(metadata) {\n      return metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n    } // For countries of the same region (e.g. NANPA)\n    // national prefix formatting rule is stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"_nationalPrefixForParsing\",\n    value: function _nationalPrefixForParsing() {\n      return this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7];\n    }\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      // If `national_prefix_for_parsing` is not set explicitly,\n      // then infer it from `national_prefix` (if any)\n      return this._nationalPrefixForParsing() || this.nationalPrefix();\n    }\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n    }\n  }, {\n    key: \"_getNationalPrefixIsOptionalWhenFormatting\",\n    value: function _getNationalPrefixIsOptionalWhenFormatting() {\n      return !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n    } // For countries of the same region (e.g. NANPA)\n    // \"national prefix is optional when formatting\" flag is\n    // stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n    }\n  }, {\n    key: \"types\",\n    value: function types() {\n      return this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n    }\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      // Versions 1.2.0 - 1.2.4: can be `[]`.\n\n      /* istanbul ignore next */\n      if (this.types() && this.types().length === 0) {\n        return false;\n      } // Versions <= 1.2.4: can be `undefined`.\n      // Version >= 1.2.5: can be `0`.\n\n\n      return !!this.types();\n    }\n  }, {\n    key: \"type\",\n    value: function type(_type2) {\n      if (this.hasTypes() && getType(this.types(), _type2)) {\n        return new Type(getType(this.types(), _type2), this);\n      }\n    }\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      if (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n      return this.metadata[13] || DEFAULT_EXT_PREFIX;\n    }\n  }]);\n\n  return NumberingPlan;\n}();\n\nvar Format = /*#__PURE__*/function () {\n  function Format(format, metadata) {\n    _classCallCheck(this, Format);\n\n    this._format = format;\n    this.metadata = metadata;\n  }\n\n  _createClass(Format, [{\n    key: \"pattern\",\n    value: function pattern() {\n      return this._format[0];\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      return this._format[1];\n    }\n  }, {\n    key: \"leadingDigitsPatterns\",\n    value: function leadingDigitsPatterns() {\n      return this._format[2] || [];\n    }\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._format[3] || this.metadata.nationalPrefixFormattingRule();\n    }\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    }\n  }, {\n    key: \"nationalPrefixIsMandatoryWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\n      // National prefix is omitted if there's no national prefix formatting rule\n      // set for this country, or when the national prefix formatting rule\n      // contains no national prefix itself, or when this rule is set but\n      // national prefix is optional for this phone number format\n      // (and it is not enforced explicitly)\n      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    } // Checks whether national prefix formatting rule contains national prefix.\n\n  }, {\n    key: \"usesNationalPrefix\",\n    value: function usesNationalPrefix() {\n      return this.nationalPrefixFormattingRule() && // Check that national prefix formatting rule is not a \"dummy\" one.\n      !FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule()) // In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\n      // when `national_prefix_formatting_rule` is not present.\n      // So, `true` or `false` are returned explicitly here, so that\n      // `0` number isn't returned.\n      ? true : false;\n    }\n  }, {\n    key: \"internationalFormat\",\n    value: function internationalFormat() {\n      return this._format[5] || this.format();\n    }\n  }]);\n\n  return Format;\n}();\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\n\n\nvar FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/;\n\nvar Type = /*#__PURE__*/function () {\n  function Type(type, metadata) {\n    _classCallCheck(this, Type);\n\n    this.type = type;\n    this.metadata = metadata;\n  }\n\n  _createClass(Type, [{\n    key: \"pattern\",\n    value: function pattern() {\n      if (this.metadata.v1) return this.type;\n      return this.type[0];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.metadata.v1) return;\n      return this.type[1] || this.metadata.possibleLengths();\n    }\n  }]);\n\n  return Type;\n}();\n\nfunction getType(types, type) {\n  switch (type) {\n    case 'FIXED_LINE':\n      return types[0];\n\n    case 'MOBILE':\n      return types[1];\n\n    case 'TOLL_FREE':\n      return types[2];\n\n    case 'PREMIUM_RATE':\n      return types[3];\n\n    case 'PERSONAL_NUMBER':\n      return types[4];\n\n    case 'VOICEMAIL':\n      return types[5];\n\n    case 'UAN':\n      return types[6];\n\n    case 'PAGER':\n      return types[7];\n\n    case 'VOIP':\n      return types[8];\n\n    case 'SHARED_COST':\n      return types[9];\n  }\n}\n\nexport function validateMetadata(metadata) {\n  if (!metadata) {\n    throw new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n  } // `country_phone_code_to_countries` was renamed to\n  // `country_calling_codes` in `1.0.18`.\n\n\n  if (!is_object(metadata) || !is_object(metadata.countries)) {\n    throw new Error(\"[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got \".concat(is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata, \".\"));\n  }\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n}; // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar type_of = function type_of(_) {\n  return _typeof(_);\n};\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\n\n\nexport function getExtPrefix(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).ext();\n  }\n\n  return DEFAULT_EXT_PREFIX;\n}\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\n\nexport function getCountryCallingCode(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).countryCallingCode();\n  }\n\n  throw new Error(\"Unknown country: \".concat(country));\n}\nexport function isSupportedCountry(country, metadata) {\n  // metadata = new Metadata(metadata)\n  // return metadata.hasCountry(country)\n  return metadata.countries[country] !== undefined;\n}\n\nfunction setVersion(metadata) {\n  var version = metadata.version;\n\n  if (typeof version === 'number') {\n    this.v1 = version === 1;\n    this.v2 = version === 2;\n    this.v3 = version === 3;\n    this.v4 = version === 4;\n  } else {\n    if (!version) {\n      this.v1 = true;\n    } else if (compare(version, V3) === -1) {\n      this.v2 = true;\n    } else if (compare(version, V4) === -1) {\n      this.v3 = true;\n    } else {\n      this.v4 = true;\n    }\n  }\n} // const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\n// function isCountryCode(countryCode) {\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\n// }\n//# sourceMappingURL=metadata.js.map","import { VALID_DIGITS } from '../../constants.js'; // The RFC 3966 format for extensions.\n\nvar RFC3966_EXTN_PREFIX = ';ext=';\n/**\r\n * Helper method for constructing regular expressions for parsing. Creates\r\n * an expression that captures up to max_length digits.\r\n * @return {string} RegEx pattern to capture extension digits.\r\n */\n\nvar getExtensionDigitsPattern = function getExtensionDigitsPattern(maxLength) {\n  return \"([\".concat(VALID_DIGITS, \"]{1,\").concat(maxLength, \"})\");\n};\n/**\r\n * Helper initialiser method to create the regular-expression pattern to match\r\n * extensions.\r\n * Copy-pasted from Google's `libphonenumber`:\r\n * https://github.com/google/libphonenumber/blob/55b2646ec9393f4d3d6661b9c82ef9e258e8b829/javascript/i18n/phonenumbers/phonenumberutil.js#L759-L766\r\n * @return {string} RegEx pattern to capture extensions.\r\n */\n\n\nexport default function createExtensionPattern(purpose) {\n  // We cap the maximum length of an extension based on the ambiguity of the way\n  // the extension is prefixed. As per ITU, the officially allowed length for\n  // extensions is actually 40, but we don't support this since we haven't seen real\n  // examples and this introduces many false interpretations as the extension labels\n  // are not standardized.\n\n  /** @type {string} */\n  var extLimitAfterExplicitLabel = '20';\n  /** @type {string} */\n\n  var extLimitAfterLikelyLabel = '15';\n  /** @type {string} */\n\n  var extLimitAfterAmbiguousChar = '9';\n  /** @type {string} */\n\n  var extLimitWhenNotSure = '6';\n  /** @type {string} */\n\n  var possibleSeparatorsBetweenNumberAndExtLabel = \"[ \\xA0\\\\t,]*\"; // Optional full stop (.) or colon, followed by zero or more spaces/tabs/commas.\n\n  /** @type {string} */\n\n  var possibleCharsAfterExtLabel = \"[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*\";\n  /** @type {string} */\n\n  var optionalExtnSuffix = \"#?\"; // Here the extension is called out in more explicit way, i.e mentioning it obvious\n  // patterns like \"ext.\".\n\n  /** @type {string} */\n\n  var explicitExtLabels = \"(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\\u0434\\u043E\\u0431|anexo)\"; // One-character symbols that can be used to indicate an extension, and less\n  // commonly used or more ambiguous extension labels.\n\n  /** @type {string} */\n\n  var ambiguousExtLabels = \"(?:[x\\uFF58#\\uFF03~\\uFF5E]|int|\\uFF49\\uFF4E\\uFF54)\"; // When extension is not separated clearly.\n\n  /** @type {string} */\n\n  var ambiguousSeparator = \"[- ]+\"; // This is the same as possibleSeparatorsBetweenNumberAndExtLabel, but not matching\n  // comma as extension label may have it.\n\n  /** @type {string} */\n\n  var possibleSeparatorsNumberExtLabelNoComma = \"[ \\xA0\\\\t]*\"; // \",,\" is commonly used for auto dialling the extension when connected. First\n  // comma is matched through possibleSeparatorsBetweenNumberAndExtLabel, so we do\n  // not repeat it here. Semi-colon works in Iphone and Android also to pop up a\n  // button with the extension number following.\n\n  /** @type {string} */\n\n  var autoDiallingAndExtLabelsFound = \"(?:,{2}|;)\";\n  /** @type {string} */\n\n  var rfcExtn = RFC3966_EXTN_PREFIX + getExtensionDigitsPattern(extLimitAfterExplicitLabel);\n  /** @type {string} */\n\n  var explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterExplicitLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var americanStyleExtnWithSuffix = ambiguousSeparator + getExtensionDigitsPattern(extLimitWhenNotSure) + \"#\";\n  /** @type {string} */\n\n  var autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterLikelyLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma + \"(?:,)+\" + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix; // The first regular expression covers RFC 3966 format, where the extension is added\n  // using \";ext=\". The second more generic where extension is mentioned with explicit\n  // labels like \"ext:\". In both the above cases we allow more numbers in extension than\n  // any other extension labels. The third one captures when single character extension\n  // labels or less commonly used labels are used. In such cases we capture fewer\n  // extension digits in order to reduce the chance of falsely interpreting two\n  // numbers beside each other as a number + extension. The fourth one covers the\n  // special case of American numbers where the extension is written with a hash\n  // at the end, such as \"- 503#\". The fifth one is exclusively for extension\n  // autodialling formats which are used when dialling and in this case we accept longer\n  // extensions. The last one is more liberal on the number of commas that acts as\n  // extension labels, so we have a strict cap on the number of digits in such extensions.\n\n  return rfcExtn + \"|\" + explicitExtn + \"|\" + ambiguousExtn + \"|\" + americanStyleExtnWithSuffix + \"|\" + autoDiallingExtn + \"|\" + onlyCommasExtn;\n}\n//# sourceMappingURL=createExtensionPattern.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n  '0': '0',\n  '1': '1',\n  '2': '2',\n  '3': '3',\n  '4': '4',\n  '5': '5',\n  '6': '6',\n  '7': '7',\n  '8': '8',\n  '9': '9',\n  \"\\uFF10\": '0',\n  // Fullwidth digit 0\n  \"\\uFF11\": '1',\n  // Fullwidth digit 1\n  \"\\uFF12\": '2',\n  // Fullwidth digit 2\n  \"\\uFF13\": '3',\n  // Fullwidth digit 3\n  \"\\uFF14\": '4',\n  // Fullwidth digit 4\n  \"\\uFF15\": '5',\n  // Fullwidth digit 5\n  \"\\uFF16\": '6',\n  // Fullwidth digit 6\n  \"\\uFF17\": '7',\n  // Fullwidth digit 7\n  \"\\uFF18\": '8',\n  // Fullwidth digit 8\n  \"\\uFF19\": '9',\n  // Fullwidth digit 9\n  \"\\u0660\": '0',\n  // Arabic-indic digit 0\n  \"\\u0661\": '1',\n  // Arabic-indic digit 1\n  \"\\u0662\": '2',\n  // Arabic-indic digit 2\n  \"\\u0663\": '3',\n  // Arabic-indic digit 3\n  \"\\u0664\": '4',\n  // Arabic-indic digit 4\n  \"\\u0665\": '5',\n  // Arabic-indic digit 5\n  \"\\u0666\": '6',\n  // Arabic-indic digit 6\n  \"\\u0667\": '7',\n  // Arabic-indic digit 7\n  \"\\u0668\": '8',\n  // Arabic-indic digit 8\n  \"\\u0669\": '9',\n  // Arabic-indic digit 9\n  \"\\u06F0\": '0',\n  // Eastern-Arabic digit 0\n  \"\\u06F1\": '1',\n  // Eastern-Arabic digit 1\n  \"\\u06F2\": '2',\n  // Eastern-Arabic digit 2\n  \"\\u06F3\": '3',\n  // Eastern-Arabic digit 3\n  \"\\u06F4\": '4',\n  // Eastern-Arabic digit 4\n  \"\\u06F5\": '5',\n  // Eastern-Arabic digit 5\n  \"\\u06F6\": '6',\n  // Eastern-Arabic digit 6\n  \"\\u06F7\": '7',\n  // Eastern-Arabic digit 7\n  \"\\u06F8\": '8',\n  // Eastern-Arabic digit 8\n  \"\\u06F9\": '9' // Eastern-Arabic digit 9\n\n};\nexport function parseDigit(character) {\n  return DIGITS[character];\n}\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\n\nexport default function parseDigits(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n    var digit = parseDigit(character);\n\n    if (digit) {\n      result += digit;\n    }\n  }\n\n  return result;\n}\n//# sourceMappingURL=parseDigits.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { parseDigit } from './helpers/parseDigits.js';\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\n\nexport default function parseIncompletePhoneNumber(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n    result += parsePhoneNumberCharacter(character, result) || '';\n  }\n\n  return result;\n}\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\n\nexport function parsePhoneNumberCharacter(character, prevParsedCharacters) {\n  // Only allow a leading `+`.\n  if (character === '+') {\n    // If this `+` is not the first parsed character\n    // then discard it.\n    if (prevParsedCharacters) {\n      return;\n    }\n\n    return '+';\n  } // Allow digits.\n\n\n  return parseDigit(character);\n}\n//# sourceMappingURL=parseIncompletePhoneNumber.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\nexport default function mergeArrays(a, b) {\n  var merged = a.slice();\n\n  for (var _iterator = _createForOfIteratorHelperLoose(b), _step; !(_step = _iterator()).done;) {\n    var element = _step.value;\n\n    if (a.indexOf(element) < 0) {\n      merged.push(element);\n    }\n  }\n\n  return merged.sort(function (a, b) {\n    return a - b;\n  }); // ES6 version, requires Set polyfill.\n  // let merged = new Set(a)\n  // for (const element of b) {\n  // \tmerged.add(i)\n  // }\n  // return Array.from(merged).sort((a, b) => a - b)\n}\n//# sourceMappingURL=mergeArrays.js.map","import mergeArrays from './mergeArrays.js';\nexport default function checkNumberLength(nationalNumber, metadata) {\n  return checkNumberLengthForType(nationalNumber, undefined, metadata);\n} // Checks whether a number is possible for the country based on its length.\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\n\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\n  var type_info = metadata.type(type); // There should always be \"<possiblePengths/>\" set for every type element.\n  // This is declared in the XML schema.\n  // For size efficiency, where a sub-description (e.g. fixed-line)\n  // has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n  // so we fall back to the \"general description\". Where no numbers of the type\n  // exist at all, there is one possible length (-1) which is guaranteed\n  // not to match the length of any real phone number.\n\n  var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths(); // let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n  // Metadata before version `1.0.18` didn't contain `possible_lengths`.\n\n  if (!possible_lengths) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (type === 'FIXED_LINE_OR_MOBILE') {\n    // No such country in metadata.\n\n    /* istanbul ignore next */\n    if (!metadata.type('FIXED_LINE')) {\n      // The rare case has been encountered where no fixedLine data is available\n      // (true for some non-geographic entities), so we just check mobile.\n      return checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n    }\n\n    var mobile_type = metadata.type('MOBILE');\n\n    if (mobile_type) {\n      // Merge the mobile data in if there was any. \"Concat\" creates a new\n      // array, it doesn't edit possible_lengths in place, so we don't need a copy.\n      // Note that when adding the possible lengths from mobile, we have\n      // to again check they aren't empty since if they are this indicates\n      // they are the same as the general desc and should be obtained from there.\n      possible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths()); // The current list is sorted; we need to merge in the new list and\n      // re-sort (duplicates are okay). Sorting isn't so expensive because\n      // the lists are very small.\n      // if (local_lengths) {\n      // \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n      // } else {\n      // \tlocal_lengths = mobile_type.possibleLengthsLocal()\n      // }\n    }\n  } // If the type doesn't exist then return 'INVALID_LENGTH'.\n  else if (type && !type_info) {\n    return 'INVALID_LENGTH';\n  }\n\n  var actual_length = nationalNumber.length; // In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n  // // This is safe because there is never an overlap beween the possible lengths\n  // // and the local-only lengths; this is checked at build time.\n  // if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n  // {\n  // \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n  // }\n\n  var minimum_length = possible_lengths[0];\n\n  if (minimum_length === actual_length) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (minimum_length > actual_length) {\n    return 'TOO_SHORT';\n  }\n\n  if (possible_lengths[possible_lengths.length - 1] < actual_length) {\n    return 'TOO_LONG';\n  } // We skip the first element since we've already checked it.\n\n\n  return possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}\n//# sourceMappingURL=checkNumberLength.js.map","import Metadata from './metadata.js';\nimport checkNumberLength from './helpers/checkNumberLength.js';\nexport default function isPossiblePhoneNumber(input, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (options.v2) {\n    if (!input.countryCallingCode) {\n      throw new Error('Invalid phone number object passed');\n    }\n\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else {\n    if (!input.phone) {\n      return false;\n    }\n\n    if (input.country) {\n      if (!metadata.hasCountry(input.country)) {\n        throw new Error(\"Unknown country: \".concat(input.country));\n      }\n\n      metadata.country(input.country);\n    } else {\n      if (!input.countryCallingCode) {\n        throw new Error('Invalid phone number object passed');\n      }\n\n      metadata.selectNumberingPlan(input.countryCallingCode);\n    }\n  } // Old metadata (< 1.0.18) had no \"possible length\" data.\n\n\n  if (metadata.possibleLengths()) {\n    return isPossibleNumber(input.phone || input.nationalNumber, metadata);\n  } else {\n    // There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\n    // were missing for \"non-geographical\" numbering plans.\n    // Just assume the number is possible in such cases:\n    // it's unlikely that anyone generated their custom metadata\n    // in that short period of time (one day).\n    // This code can be removed in some future major version update.\n    if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\n      // \"Non-geographic entities\" did't have `possibleLengths`\n      // due to a bug in metadata generation process.\n      return true;\n    } else {\n      throw new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\n    }\n  }\n}\nexport function isPossibleNumber(nationalNumber, metadata) {\n  //, isInternational) {\n  switch (checkNumberLength(nationalNumber, metadata)) {\n    case 'IS_POSSIBLE':\n      return true;\n    // This library ignores \"local-only\" phone numbers (for simplicity).\n    // See the readme for more info on what are \"local-only\" phone numbers.\n    // case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \treturn !isInternational\n\n    default:\n      return false;\n  }\n}\n//# sourceMappingURL=isPossibleNumber_.js.map","/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\nexport default function matchesEntirely(text, regular_expression) {\n  // If assigning the `''` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  text = text || '';\n  return new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n//# sourceMappingURL=matchesEntirely.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Metadata from '../metadata.js';\nimport matchesEntirely from './matchesEntirely.js';\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL']; // Finds out national phone number type (fixed line, mobile, etc)\n\nexport default function getNumberType(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {}; // When `parse()` returned `{}`\n  // meaning that the phone number is not a valid one.\n\n  if (!input.country) {\n    return;\n  }\n\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode);\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // The following is copy-pasted from the original function:\n  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n  // Is this national number even valid for this country\n\n  if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n    return;\n  } // Is it fixed line number\n\n\n  if (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\n    // Because duplicate regular expressions are removed\n    // to reduce metadata size, if \"mobile\" pattern is \"\"\n    // then it means it was removed due to being a duplicate of the fixed-line pattern.\n    //\n    if (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // `MOBILE` type pattern isn't included if it matched `FIXED_LINE` one.\n    // For example, for \"US\" country.\n    // Old metadata (< `1.0.18`) had a specific \"types\" data structure\n    // that happened to be `undefined` for `MOBILE` in that case.\n    // Newer metadata (>= `1.0.18`) has another data structure that is\n    // not `undefined` for `MOBILE` in that case (it's just an empty array).\n    // So this `if` is just for backwards compatibility with old metadata.\n\n\n    if (!metadata.type('MOBILE')) {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // Check if the number happens to qualify as both fixed line and mobile.\n    // (no such country in the minimal metadata set)\n\n    /* istanbul ignore if */\n\n\n    if (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n\n    return 'FIXED_LINE';\n  }\n\n  for (var _iterator = _createForOfIteratorHelperLoose(NON_FIXED_LINE_PHONE_TYPES), _step; !(_step = _iterator()).done;) {\n    var type = _step.value;\n\n    if (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\n      return type;\n    }\n  }\n}\nexport function isNumberTypeEqualTo(nationalNumber, type, metadata) {\n  type = metadata.type(type);\n\n  if (!type || !type.pattern()) {\n    return false;\n  } // Check if any possible number lengths are present;\n  // if so, we use them to avoid checking\n  // the validation pattern if they don't match.\n  // If they are absent, this means they match\n  // the general description, which we have\n  // already checked before a specific number type.\n\n\n  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n    return false;\n  }\n\n  return matchesEntirely(nationalNumber, type.pattern());\n}\n//# sourceMappingURL=getNumberType.js.map","import Metadata from './metadata.js';\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport getNumberType from './helpers/getNumberType.js';\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\n\nexport default function isValidNumber(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata); // This is just to support `isValidNumber({})`\n  // for cases when `parseNumber()` returns `{}`.\n\n  if (!input.country) {\n    return false;\n  }\n\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode); // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  } // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n\n\n  var national_number = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(national_number, metadata.nationalNumberPattern());\n}\n//# sourceMappingURL=validate_.js.map","import { VALID_PUNCTUATION } from '../constants.js'; // Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\n\nexport default function applyInternationalSeparatorStyle(formattedNumber) {\n  return formattedNumber.replace(new RegExp(\"[\".concat(VALID_PUNCTUATION, \"]+\"), 'g'), ' ').trim();\n}\n//# sourceMappingURL=applyInternationalSeparatorStyle.js.map","import applyInternationalSeparatorStyle from './applyInternationalSeparatorStyle.js'; // This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly. Therefore, we use `\\d`, so that the first\n// group actually used in the pattern will be matched.\n\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\nexport default function formatNationalNumberUsingFormat(number, format, _ref) {\n  var useInternationalFormat = _ref.useInternationalFormat,\n      withNationalPrefix = _ref.withNationalPrefix,\n      carrierCode = _ref.carrierCode,\n      metadata = _ref.metadata;\n  var formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalFormat ? format.internationalFormat() : // This library doesn't use `domestic_carrier_code_formatting_rule`,\n  // because that one is only used when formatting phone numbers\n  // for dialing from a mobile phone, and this is not a dialing library.\n  // carrierCode && format.domesticCarrierCodeFormattingRule()\n  // \t// First, replace the $CC in the formatting rule with the desired carrier code.\n  // \t// Then, replace the $FG in the formatting rule with the first group\n  // \t// and the carrier code combined in the appropriate way.\n  // \t? format.format().replace(FIRST_GROUP_PATTERN, format.domesticCarrierCodeFormattingRule().replace('$CC', carrierCode))\n  // \t: (\n  // \t\twithNationalPrefix && format.nationalPrefixFormattingRule()\n  // \t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\n  // \t\t\t: format.format()\n  // \t)\n  withNationalPrefix && format.nationalPrefixFormattingRule() ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\n  if (useInternationalFormat) {\n    return applyInternationalSeparatorStyle(formattedNumber);\n  }\n\n  return formattedNumber;\n}\n//# sourceMappingURL=formatNationalNumberUsingFormat.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js';\nimport Metadata, { getCountryCallingCode } from './metadata.js';\nimport getIddPrefix from './helpers/getIddPrefix.js';\nimport { formatRFC3966 } from './helpers/RFC3966.js';\nvar DEFAULT_OPTIONS = {\n  formatExtension: function formatExtension(formattedNumber, extension, metadata) {\n    return \"\".concat(formattedNumber).concat(metadata.ext()).concat(extension);\n  }\n}; // Formats a phone number\n//\n// Example use cases:\n//\n// ```js\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n// formatNumber('+78005553535', 'NATIONAL')\n// formatNumber('+78005553535', 'NATIONAL', metadata)\n// ```\n//\n\nexport default function formatNumber(input, format, options, metadata) {\n  // Apply default options.\n  if (options) {\n    options = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n  } else {\n    options = DEFAULT_OPTIONS;\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (input.country && input.country !== '001') {\n    // Validate `input.country`.\n    if (!metadata.hasCountry(input.country)) {\n      throw new Error(\"Unknown country: \".concat(input.country));\n    }\n\n    metadata.country(input.country);\n  } else if (input.countryCallingCode) {\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else return input.phone || '';\n\n  var countryCallingCode = metadata.countryCallingCode();\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // This variable should have been declared inside `case`s\n  // but Babel has a bug and it says \"duplicate variable declaration\".\n\n  var number;\n\n  switch (format) {\n    case 'NATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '';\n      }\n\n      number = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'INTERNATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return \"+\".concat(countryCallingCode);\n      }\n\n      number = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options);\n      number = \"+\".concat(countryCallingCode, \" \").concat(number);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'E.164':\n      // `E.164` doesn't define \"phone number extensions\".\n      return \"+\".concat(countryCallingCode).concat(nationalNumber);\n\n    case 'RFC3966':\n      return formatRFC3966({\n        number: \"+\".concat(countryCallingCode).concat(nationalNumber),\n        ext: input.ext\n      });\n    // For reference, here's Google's IDD formatter:\n    // https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\n    // Not saying that this IDD formatter replicates it 1:1, but it seems to work.\n    // Who would even need to format phone numbers in IDD format anyway?\n\n    case 'IDD':\n      if (!options.fromCountry) {\n        return; // throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n      }\n\n      var formattedNumber = formatIDD(nationalNumber, input.carrierCode, countryCallingCode, options.fromCountry, metadata);\n      return addExtension(formattedNumber, input.ext, metadata, options.formatExtension);\n\n    default:\n      throw new Error(\"Unknown \\\"format\\\" argument passed to \\\"formatNumber()\\\": \\\"\".concat(format, \"\\\"\"));\n  }\n}\n\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\n  var format = chooseFormatForNumber(metadata.formats(), number);\n\n  if (!format) {\n    return number;\n  }\n\n  return formatNationalNumberUsingFormat(number, format, {\n    useInternationalFormat: formatAs === 'INTERNATIONAL',\n    withNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options && options.nationalPrefix === false ? false : true,\n    carrierCode: carrierCode,\n    metadata: metadata\n  });\n}\n\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\n  for (var _iterator = _createForOfIteratorHelperLoose(availableFormats), _step; !(_step = _iterator()).done;) {\n    var format = _step.value;\n\n    // Validate leading digits.\n    // The test case for \"else path\" could be found by searching for\n    // \"format.leadingDigitsPatterns().length === 0\".\n    if (format.leadingDigitsPatterns().length > 0) {\n      // The last leading_digits_pattern is used here, as it is the most detailed\n      var lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]; // If leading digits don't match then move on to the next phone number format\n\n      if (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\n        continue;\n      }\n    } // Check that the national number matches the phone number format regular expression\n\n\n    if (matchesEntirely(nationalNnumber, format.pattern())) {\n      return format;\n    }\n  }\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n  return ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nfunction formatIDD(nationalNumber, carrierCode, countryCallingCode, fromCountry, metadata) {\n  var fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata); // When calling within the same country calling code.\n\n  if (fromCountryCallingCode === countryCallingCode) {\n    var formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata); // For NANPA regions, return the national format for these regions\n    // but prefix it with the country calling code.\n\n    if (countryCallingCode === '1') {\n      return countryCallingCode + ' ' + formattedNumber;\n    } // If regions share a country calling code, the country calling code need\n    // not be dialled. This also applies when dialling within a region, so this\n    // if clause covers both these cases. Technically this is the case for\n    // dialling from La Reunion to other overseas departments of France (French\n    // Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n    // this edge case for now and for those cases return the version including\n    // country calling code. Details here:\n    // http://www.petitfute.com/voyage/225-info-pratiques-reunion\n    //\n\n\n    return formattedNumber;\n  }\n\n  var iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata);\n\n  if (iddPrefix) {\n    return \"\".concat(iddPrefix, \" \").concat(countryCallingCode, \" \").concat(formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata));\n  }\n}\n//# sourceMappingURL=format_.js.map","function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport isViablePhoneNumber from './isViablePhoneNumber.js'; // https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\nexport function parseRFC3966(text) {\n  var number;\n  var ext; // Replace \"tel:\" with \"tel=\" for parsing convenience.\n\n  text = text.replace(/^tel:/, 'tel=');\n\n  for (var _iterator = _createForOfIteratorHelperLoose(text.split(';')), _step; !(_step = _iterator()).done;) {\n    var part = _step.value;\n\n    var _part$split = part.split('='),\n        _part$split2 = _slicedToArray(_part$split, 2),\n        name = _part$split2[0],\n        value = _part$split2[1];\n\n    switch (name) {\n      case 'tel':\n        number = value;\n        break;\n\n      case 'ext':\n        ext = value;\n        break;\n\n      case 'phone-context':\n        // Only \"country contexts\" are supported.\n        // \"Domain contexts\" are ignored.\n        if (value[0] === '+') {\n          number = value + number;\n        }\n\n        break;\n    }\n  } // If the phone number is not viable, then abort.\n\n\n  if (!isViablePhoneNumber(number)) {\n    return {};\n  }\n\n  var result = {\n    number: number\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\n\nexport function formatRFC3966(_ref) {\n  var number = _ref.number,\n      ext = _ref.ext;\n\n  if (!number) {\n    return '';\n  }\n\n  if (number[0] !== '+') {\n    throw new Error(\"\\\"formatRFC3966()\\\" expects \\\"number\\\" to be in E.164 format.\");\n  }\n\n  return \"tel:\".concat(number).concat(ext ? ';ext=' + ext : '');\n}\n//# sourceMappingURL=RFC3966.js.map","import Metadata from '../metadata.js';\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\n\nvar SINGLE_IDD_PREFIX_REG_EXP = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/; // For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\n\nexport default function getIddPrefix(country, callingCode, metadata) {\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n\n  if (countryMetadata.defaultIDDPrefix()) {\n    return countryMetadata.defaultIDDPrefix();\n  }\n\n  if (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {\n    return countryMetadata.IDDPrefix();\n  }\n}\n//# sourceMappingURL=getIddPrefix.js.map","import Metadata from '../metadata.js';\nimport { VALID_DIGITS } from '../constants.js';\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\nexport default function stripIddPrefix(number, country, callingCode, metadata) {\n  if (!country) {\n    return;\n  } // Check if the number is IDD-prefixed.\n\n\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n  if (number.search(IDDPrefixPattern) !== 0) {\n    return;\n  } // Strip IDD prefix.\n\n\n  number = number.slice(number.match(IDDPrefixPattern)[0].length); // If there're any digits after an IDD prefix,\n  // then those digits are a country calling code.\n  // Since no country code starts with a `0`,\n  // the code below validates that the next digit (if present) is not `0`.\n\n  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n\n  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n    if (matchedGroups[1] === '0') {\n      return;\n    }\n  }\n\n  return number;\n}\n//# sourceMappingURL=stripIddPrefix.js.map","/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, nationalPrefix: string? carrierCode: string? }`. Even if a national prefix was extracted, it's not necessarily present in the returned object, so don't rely on its presence in the returned object in order to find out whether a national prefix has been extracted or not.\r\n */\nexport default function extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {\n  if (number && metadata.numberingPlan.nationalPrefixForParsing()) {\n    // See METADATA.md for the description of\n    // `national_prefix_for_parsing` and `national_prefix_transform_rule`.\n    // Attempt to parse the first digits as a national prefix.\n    var prefixPattern = new RegExp('^(?:' + metadata.numberingPlan.nationalPrefixForParsing() + ')');\n    var prefixMatch = prefixPattern.exec(number);\n\n    if (prefixMatch) {\n      var nationalNumber;\n      var carrierCode; // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\n      // If a `national_prefix_for_parsing` has any \"capturing groups\"\n      // then it means that the national (significant) number is equal to\n      // those \"capturing groups\" transformed via `national_prefix_transform_rule`,\n      // and nothing could be said about the actual national prefix:\n      // what is it and was it even there.\n      // If a `national_prefix_for_parsing` doesn't have any \"capturing groups\",\n      // then everything it matches is a national prefix.\n      // To determine whether `national_prefix_for_parsing` matched any\n      // \"capturing groups\", the value of the result of calling `.exec()`\n      // is looked at, and if it has non-undefined values where there're\n      // \"capturing groups\" in the regular expression, then it means\n      // that \"capturing groups\" have been matched.\n      // It's not possible to tell whether there'll be any \"capturing gropus\"\n      // before the matching process, because a `national_prefix_for_parsing`\n      // could exhibit both behaviors.\n\n      var capturedGroupsCount = prefixMatch.length - 1;\n      var hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount];\n\n      if (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {\n        nationalNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule()); // If there's more than one captured group,\n        // then carrier code is the second one.\n\n        if (capturedGroupsCount > 1) {\n          carrierCode = prefixMatch[1];\n        }\n      } // If there're no \"capturing groups\",\n      // or if there're \"capturing groups\" but no\n      // `national_prefix_transform_rule`,\n      // then just strip the national prefix from the number,\n      // and possibly a carrier code.\n      // Seems like there could be more.\n      else {\n        // `prefixBeforeNationalNumber` is the whole substring matched by\n        // the `national_prefix_for_parsing` regular expression.\n        // There seem to be no guarantees that it's just a national prefix.\n        // For example, if there's a carrier code, it's gonna be a\n        // part of `prefixBeforeNationalNumber` too.\n        var prefixBeforeNationalNumber = prefixMatch[0];\n        nationalNumber = number.slice(prefixBeforeNationalNumber.length); // If there's at least one captured group,\n        // then carrier code is the first one.\n\n        if (hasCapturedGroups) {\n          carrierCode = prefixMatch[1];\n        }\n      } // Tries to guess whether a national prefix was present in the input.\n      // This is not something copy-pasted from Google's library:\n      // they don't seem to have an equivalent for that.\n      // So this isn't an \"officially approved\" way of doing something like that.\n      // But since there seems no other existing method, this library uses it.\n\n\n      var nationalPrefix;\n\n      if (hasCapturedGroups) {\n        var possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1]);\n        var possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup); // Example: an Argentinian (AR) phone number `0111523456789`.\n        // `prefixMatch[0]` is `01115`, and `$1` is `11`,\n        // and the rest of the phone number is `23456789`.\n        // The national number is transformed via `9$1` to `91123456789`.\n        // National prefix `0` is detected being present at the start.\n        // if (possibleNationalPrefix.indexOf(metadata.numberingPlan.nationalPrefix()) === 0) {\n\n        if (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {\n          nationalPrefix = metadata.numberingPlan.nationalPrefix();\n        }\n      } else {\n        nationalPrefix = prefixMatch[0];\n      }\n\n      return {\n        nationalNumber: nationalNumber,\n        nationalPrefix: nationalPrefix,\n        carrierCode: carrierCode\n      };\n    }\n  }\n\n  return {\n    nationalNumber: number\n  };\n}\n//# sourceMappingURL=extractNationalNumberFromPossiblyIncompleteNumber.js.map","import extractNationalNumberFromPossiblyIncompleteNumber from './extractNationalNumberFromPossiblyIncompleteNumber.js';\nimport matchesEntirely from './matchesEntirely.js';\nimport checkNumberLength from './checkNumberLength.js';\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\n\nexport default function extractNationalNumber(number, metadata) {\n  // Parsing national prefixes and carrier codes\n  // is only required for local phone numbers\n  // but some people don't understand that\n  // and sometimes write international phone numbers\n  // with national prefixes (or maybe even carrier codes).\n  // http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n  // Google's original library forgives such mistakes\n  // and so does this library, because it has been requested:\n  // https://github.com/catamphetamine/libphonenumber-js/issues/127\n  var _extractNationalNumbe = extractNationalNumberFromPossiblyIncompleteNumber(number, metadata),\n      carrierCode = _extractNationalNumbe.carrierCode,\n      nationalNumber = _extractNationalNumbe.nationalNumber;\n\n  if (nationalNumber !== number) {\n    if (!shouldHaveExtractedNationalPrefix(number, nationalNumber, metadata)) {\n      // Don't strip the national prefix.\n      return {\n        nationalNumber: number\n      };\n    } // Check the national (significant) number length after extracting national prefix and carrier code.\n    // Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature.\n\n\n    if (metadata.possibleLengths()) {\n      // The number remaining after stripping the national prefix and carrier code\n      // should be long enough to have a possible length for the country.\n      // Otherwise, don't strip the national prefix and carrier code,\n      // since the original number could be a valid number.\n      // This check has been copy-pasted \"as is\" from Google's original library:\n      // https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\n      // It doesn't check for the \"possibility\" of the original `number`.\n      // I guess it's fine not checking that one. It works as is anyway.\n      if (!isPossibleIncompleteNationalNumber(nationalNumber, metadata)) {\n        // Don't strip the national prefix.\n        return {\n          nationalNumber: number\n        };\n      }\n    }\n  }\n\n  return {\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n} // In some countries, the same digit could be a national prefix\n// or a leading digit of a valid phone number.\n// For example, in Russia, national prefix is `8`,\n// and also `800 555 35 35` is a valid number\n// in which `8` is not a national prefix, but the first digit\n// of a national (significant) number.\n// Same's with Belarus:\n// `82004910060` is a valid national (significant) number,\n// but `2004910060` is not.\n// To support such cases (to prevent the code from always stripping\n// national prefix), a condition is imposed: a national prefix\n// is not extracted when the original number is \"viable\" and the\n// resultant number is not, a \"viable\" national number being the one\n// that matches `national_number_pattern`.\n\nfunction shouldHaveExtractedNationalPrefix(nationalNumberBefore, nationalNumberAfter, metadata) {\n  // The equivalent in Google's code is:\n  // https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L2969-L3004\n  if (matchesEntirely(nationalNumberBefore, metadata.nationalNumberPattern()) && !matchesEntirely(nationalNumberAfter, metadata.nationalNumberPattern())) {\n    return false;\n  } // This \"is possible\" national number (length) check has been commented out\n  // because it's superceded by the (effectively) same check done in the\n  // `extractNationalNumber()` function after it calls `shouldHaveExtractedNationalPrefix()`.\n  // In other words, why run the same check twice if it could only be run once.\n  // // Check the national (significant) number length after extracting national prefix and carrier code.\n  // // Fixes a minor \"weird behavior\" bug: https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/57\n  // // (Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature).\n  // if (metadata.possibleLengths()) {\n  // \tif (isPossibleIncompleteNationalNumber(nationalNumberBefore, metadata) &&\n  // \t\t!isPossibleIncompleteNationalNumber(nationalNumberAfter, metadata)) {\n  // \t\treturn false\n  // \t}\n  // }\n\n\n  return true;\n}\n\nfunction isPossibleIncompleteNationalNumber(nationalNumber, metadata) {\n  switch (checkNumberLength(nationalNumber, metadata)) {\n    case 'TOO_SHORT':\n    case 'INVALID_LENGTH':\n      // This library ignores \"local-only\" phone numbers (for simplicity).\n      // See the readme for more info on what are \"local-only\" phone numbers.\n      // case 'IS_POSSIBLE_LOCAL_ONLY':\n      return false;\n\n    default:\n      return true;\n  }\n}\n//# sourceMappingURL=extractNationalNumber.js.map","import Metadata from '../metadata.js';\nimport matchesEntirely from './matchesEntirely.js';\nimport extractNationalNumber from './extractNationalNumber.js';\nimport checkNumberLength from './checkNumberLength.js';\nimport getCountryCallingCode from '../getCountryCallingCode.js';\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\n\nexport default function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata) {\n  var countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode;\n\n  if (number.indexOf(countryCallingCode) === 0) {\n    metadata = new Metadata(metadata);\n    metadata.selectNumberingPlan(country, callingCode);\n    var possibleShorterNumber = number.slice(countryCallingCode.length);\n\n    var _extractNationalNumbe = extractNationalNumber(possibleShorterNumber, metadata),\n        possibleShorterNationalNumber = _extractNationalNumbe.nationalNumber;\n\n    var _extractNationalNumbe2 = extractNationalNumber(number, metadata),\n        nationalNumber = _extractNationalNumbe2.nationalNumber; // If the number was not valid before but is valid now,\n    // or if it was too long before, we consider the number\n    // with the country calling code stripped to be a better result\n    // and keep that instead.\n    // For example, in Germany (+49), `49` is a valid area code,\n    // so if a number starts with `49`, it could be both a valid\n    // national German number or an international number without\n    // a leading `+`.\n\n\n    if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) && matchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern()) || checkNumberLength(nationalNumber, metadata) === 'TOO_LONG') {\n      return {\n        countryCallingCode: countryCallingCode,\n        number: possibleShorterNumber\n      };\n    }\n  }\n\n  return {\n    number: number\n  };\n}\n//# sourceMappingURL=extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js.map","import stripIddPrefix from './stripIddPrefix.js';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js';\nimport Metadata from '../metadata.js';\nimport { MAX_LENGTH_COUNTRY_CODE } from '../constants.js';\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\n\nexport default function extractCountryCallingCode(number, country, callingCode, metadata) {\n  if (!number) {\n    return {};\n  } // If this is not an international phone number,\n  // then either extract an \"IDD\" prefix, or extract a\n  // country calling code from a number by autocorrecting it\n  // by prepending a leading `+` in cases when it starts\n  // with the country calling code.\n  // https://wikitravel.org/en/International_dialling_prefix\n  // https://github.com/catamphetamine/libphonenumber-js/issues/376\n\n\n  if (number[0] !== '+') {\n    // Convert an \"out-of-country\" dialing phone number\n    // to a proper international phone number.\n    var numberWithoutIDD = stripIddPrefix(number, country, callingCode, metadata); // If an IDD prefix was stripped then\n    // convert the number to international one\n    // for subsequent parsing.\n\n    if (numberWithoutIDD && numberWithoutIDD !== number) {\n      number = '+' + numberWithoutIDD;\n    } else {\n      // Check to see if the number starts with the country calling code\n      // for the default country. If so, we remove the country calling code,\n      // and do some checks on the validity of the number before and after.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      if (country || callingCode) {\n        var _extractCountryCallin = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata),\n            countryCallingCode = _extractCountryCallin.countryCallingCode,\n            shorterNumber = _extractCountryCallin.number;\n\n        if (countryCallingCode) {\n          return {\n            countryCallingCode: countryCallingCode,\n            number: shorterNumber\n          };\n        }\n      }\n\n      return {\n        number: number\n      };\n    }\n  } // Fast abortion: country codes do not begin with a '0'\n\n\n  if (number[1] === '0') {\n    return {};\n  }\n\n  metadata = new Metadata(metadata); // The thing with country phone codes\n  // is that they are orthogonal to each other\n  // i.e. there's no such country phone code A\n  // for which country phone code B exists\n  // where B starts with A.\n  // Therefore, while scanning digits,\n  // if a valid country code is found,\n  // that means that it is the country code.\n  //\n\n  var i = 2;\n\n  while (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n    var _countryCallingCode = number.slice(1, i);\n\n    if (metadata.hasCallingCode(_countryCallingCode)) {\n      metadata.selectNumberingPlan(_countryCallingCode);\n      return {\n        countryCallingCode: _countryCallingCode,\n        number: number.slice(i)\n      };\n    }\n\n    i++;\n  }\n\n  return {};\n}\n//# sourceMappingURL=extractCountryCallingCode.js.map","// The minimum length of the national significant number.\nexport var MIN_LENGTH_FOR_NSN = 2; // The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\n\nexport var MAX_LENGTH_FOR_NSN = 17; // The maximum length of the country calling code.\n\nexport var MAX_LENGTH_COUNTRY_CODE = 3; // Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\n\nexport var VALID_DIGITS = \"0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9\"; // `DASHES` will be right after the opening square bracket of the \"character class\"\n\nvar DASHES = \"-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D\";\nvar SLASHES = \"\\uFF0F/\";\nvar DOTS = \"\\uFF0E.\";\nexport var WHITESPACE = \" \\xA0\\xAD\\u200B\\u2060\\u3000\";\nvar BRACKETS = \"()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]\"; // export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\n\nvar TILDES = \"~\\u2053\\u223C\\uFF5E\"; // Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\n\nexport var VALID_PUNCTUATION = \"\".concat(DASHES).concat(SLASHES).concat(DOTS).concat(WHITESPACE).concat(BRACKETS).concat(TILDES);\nexport var PLUS_CHARS = \"+\\uFF0B\"; // const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')\n//# sourceMappingURL=constants.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Metadata from '../metadata.js';\nimport getNumberType from './getNumberType.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nexport default function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {\n  /* istanbul ignore if */\n  if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n    if (metadata.isNonGeographicCallingCode(callingCode)) {\n      return '001';\n    }\n  } // Is always non-empty, because `callingCode` is always valid\n\n\n  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);\n\n  if (!possibleCountries) {\n    return;\n  } // If there's just one country corresponding to the country code,\n  // then just return it, without further phone number digits validation.\n\n\n  if (possibleCountries.length === 1) {\n    return possibleCountries[0];\n  }\n\n  return selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata.metadata);\n}\n\nfunction selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata) {\n  // Re-create `metadata` because it will be selecting a `country`.\n  metadata = new Metadata(metadata);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(possibleCountries), _step; !(_step = _iterator()).done;) {\n    var country = _step.value;\n    metadata.country(country); // Leading digits check would be the simplest and fastest one.\n    // Leading digits patterns are only defined for about 20% of all countries.\n    // https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\n    // Matching \"leading digits\" is a sufficient but not necessary condition.\n\n    if (metadata.leadingDigits()) {\n      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n        return country;\n      }\n    } // Else perform full validation with all of those\n    // fixed-line/mobile/etc regular expressions.\n    else if (getNumberType({\n      phone: nationalPhoneNumber,\n      country: country\n    }, undefined, metadata.metadata)) {\n      return country;\n    }\n  }\n}\n//# sourceMappingURL=getCountryByCallingCode.js.map","// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport { VALID_DIGITS, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN } from './constants.js';\nimport ParseError from './ParseError.js';\nimport Metadata from './metadata.js';\nimport isViablePhoneNumber, { isViablePhoneNumberStart } from './helpers/isViablePhoneNumber.js';\nimport extractExtension from './helpers/extension/extractExtension.js';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber.js';\nimport getCountryCallingCode from './getCountryCallingCode.js';\nimport { isPossibleNumber } from './isPossibleNumber_.js';\nimport { parseRFC3966 } from './helpers/RFC3966.js';\nimport PhoneNumber from './PhoneNumber.js';\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode.js';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js';\nimport extractNationalNumber from './helpers/extractNationalNumber.js';\nimport stripIddPrefix from './helpers/stripIddPrefix.js';\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode.js'; // We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\n\nvar MAX_INPUT_STRING_LENGTH = 250; // This consists of the plus symbol, digits, and arabic-indic digits.\n\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']'); // Regular expression of trailing characters that we want to remove.\n// A trailing `#` is sometimes used when writing phone numbers with extensions in US.\n// Example: \"+1 (645) 123 1234-910#\" number has extension \"910\".\n\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + '#' + ']+$');\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false; // Examples:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\n\nexport default function parse(text, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata); // Validate `defaultCountry`.\n\n  if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    throw new Error(\"Unknown country: \".concat(options.defaultCountry));\n  } // Parse the phone number.\n\n\n  var _parseInput = parseInput(text, options.v2, options.extract),\n      formattedPhoneNumber = _parseInput.number,\n      ext = _parseInput.ext,\n      error = _parseInput.error; // If the phone number is not viable then return nothing.\n\n\n  if (!formattedPhoneNumber) {\n    if (options.v2) {\n      if (error === 'TOO_SHORT') {\n        throw new ParseError('TOO_SHORT');\n      }\n\n      throw new ParseError('NOT_A_NUMBER');\n    }\n\n    return {};\n  }\n\n  var _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, options.defaultCallingCode, metadata),\n      country = _parsePhoneNumber.country,\n      nationalNumber = _parsePhoneNumber.nationalNumber,\n      countryCallingCode = _parsePhoneNumber.countryCallingCode,\n      carrierCode = _parsePhoneNumber.carrierCode;\n\n  if (!metadata.hasSelectedNumberingPlan()) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    return {};\n  } // Validate national (significant) number length.\n\n\n  if (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n    // Won't throw here because the regexp already demands length > 1.\n\n    /* istanbul ignore if */\n    if (options.v2) {\n      throw new ParseError('TOO_SHORT');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  } // Validate national (significant) number length.\n  //\n  // A sidenote:\n  //\n  // They say that sometimes national (significant) numbers\n  // can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n  // https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n  // Such numbers will just be discarded.\n  //\n\n\n  if (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n    if (options.v2) {\n      throw new ParseError('TOO_LONG');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  }\n\n  if (options.v2) {\n    var phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n\n    if (country) {\n      phoneNumber.country = country;\n    }\n\n    if (carrierCode) {\n      phoneNumber.carrierCode = carrierCode;\n    }\n\n    if (ext) {\n      phoneNumber.ext = ext;\n    }\n\n    return phoneNumber;\n  } // Check if national phone number pattern matches the number.\n  // National number pattern is different for each country,\n  // even for those ones which are part of the \"NANPA\" group.\n\n\n  var valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ? matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) : false;\n\n  if (!options.extended) {\n    return valid ? result(country, nationalNumber, ext) : {};\n  } // isInternational: countryCallingCode !== undefined\n\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    carrierCode: carrierCode,\n    valid: valid,\n    possible: valid ? true : options.extended === true && metadata.possibleLengths() && isPossibleNumber(nationalNumber, metadata) ? true : false,\n    phone: nationalNumber,\n    ext: ext\n  };\n}\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} [extract] — If `false`, then will parse the entire `text` as a phone number.\r\n * @param  {boolean} [throwOnError] — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\n\nfunction extractFormattedPhoneNumber(text, extract, throwOnError) {\n  if (!text) {\n    return;\n  }\n\n  if (text.length > MAX_INPUT_STRING_LENGTH) {\n    if (throwOnError) {\n      throw new ParseError('TOO_LONG');\n    }\n\n    return;\n  }\n\n  if (extract === false) {\n    return text;\n  } // Attempt to extract a possible number from the string passed in\n\n\n  var startsAt = text.search(PHONE_NUMBER_START_PATTERN);\n\n  if (startsAt < 0) {\n    return;\n  }\n\n  return text // Trim everything to the left of the phone number\n  .slice(startsAt) // Remove trailing non-numerical characters\n  .replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n/**\r\n * @param  {string} text - Input.\r\n * @param  {boolean} v2 - Legacy API functions don't pass `v2: true` flag.\r\n * @param  {boolean} [extract] - Whether to extract a phone number from `text`, or attempt to parse the entire text as a phone number.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\n\nfunction parseInput(text, v2, extract) {\n  // Parse RFC 3966 phone number URI.\n  if (text && text.indexOf('tel:') === 0) {\n    return parseRFC3966(text);\n  }\n\n  var number = extractFormattedPhoneNumber(text, extract, v2); // If the phone number is not viable, then abort.\n\n  if (!number) {\n    return {};\n  }\n\n  if (!isViablePhoneNumber(number)) {\n    if (isViablePhoneNumberStart(number)) {\n      return {\n        error: 'TOO_SHORT'\n      };\n    }\n\n    return {};\n  } // Attempt to parse extension first, since it doesn't require region-specific\n  // data and we want to have the non-normalised number here.\n\n\n  var withExtensionStripped = extractExtension(number);\n\n  if (withExtensionStripped.ext) {\n    return withExtensionStripped;\n  }\n\n  return {\n    number: number\n  };\n}\n/**\r\n * Creates `parse()` result object.\r\n */\n\n\nfunction result(country, nationalNumber, ext) {\n  var result = {\n    country: country,\n    phone: nationalNumber\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\n\n\nfunction parsePhoneNumber(formattedPhoneNumber, defaultCountry, defaultCallingCode, metadata) {\n  // Extract calling code from phone number.\n  var _extractCountryCallin = extractCountryCallingCode(parseIncompletePhoneNumber(formattedPhoneNumber), defaultCountry, defaultCallingCode, metadata.metadata),\n      countryCallingCode = _extractCountryCallin.countryCallingCode,\n      number = _extractCountryCallin.number; // Choose a country by `countryCallingCode`.\n\n\n  var country;\n\n  if (countryCallingCode) {\n    metadata.selectNumberingPlan(countryCallingCode);\n  } // If `formattedPhoneNumber` is in \"national\" format\n  // then `number` is defined and `countryCallingCode` isn't.\n  else if (number && (defaultCountry || defaultCallingCode)) {\n    metadata.selectNumberingPlan(defaultCountry, defaultCallingCode);\n\n    if (defaultCountry) {\n      country = defaultCountry;\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n          country = '001';\n        }\n      }\n    }\n\n    countryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata);\n  } else return {};\n\n  if (!number) {\n    return {\n      countryCallingCode: countryCallingCode\n    };\n  }\n\n  var _extractNationalNumbe = extractNationalNumber(parseIncompletePhoneNumber(number), metadata),\n      nationalNumber = _extractNationalNumbe.nationalNumber,\n      carrierCode = _extractNationalNumbe.carrierCode; // Sometimes there are several countries\n  // corresponding to the same country phone code\n  // (e.g. NANPA countries all having `1` country phone code).\n  // Therefore, to reliably determine the exact country,\n  // national (significant) number should have been parsed first.\n  //\n  // When `metadata.json` is generated, all \"ambiguous\" country phone codes\n  // get their countries populated with the full set of\n  // \"phone number type\" regular expressions.\n  //\n\n\n  var exactCountry = getCountryByCallingCode(countryCallingCode, nationalNumber, metadata);\n\n  if (exactCountry) {\n    country = exactCountry;\n    /* istanbul ignore if */\n\n    if (exactCountry === '001') {// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\n      // If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\n      // then remove the \"istanbul ignore if\".\n    } else {\n      metadata.country(country);\n    }\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n}\n//# sourceMappingURL=parse_.js.map","import { MIN_LENGTH_FOR_NSN, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from '../constants.js';\nimport createExtensionPattern from './extension/createExtensionPattern.js'; //  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\n\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'; //\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\n\nexport var VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*'; // This regular expression isn't present in Google's `libphonenumber`\n// and is only used to determine whether the phone number being input\n// is too short for it to even consider it a \"valid\" number.\n// This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\n\nvar VALID_PHONE_NUMBER_START_REG_EXP = new RegExp('^' + '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){1,2}' + '$', 'i');\nexport var VALID_PHONE_NUMBER_WITH_EXTENSION = VALID_PHONE_NUMBER + // Phone number extensions\n'(?:' + createExtensionPattern() + ')?'; // The combined regular expression for valid phone numbers:\n//\n\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp( // Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' + // Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER_WITH_EXTENSION + '$', 'i'); // Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\n\nexport default function isViablePhoneNumber(number) {\n  return number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n} // This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\n\nexport function isViablePhoneNumberStart(number) {\n  return VALID_PHONE_NUMBER_START_REG_EXP.test(number);\n}\n//# sourceMappingURL=isViablePhoneNumber.js.map","import createExtensionPattern from './createExtensionPattern.js'; // Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\n\nvar EXTN_PATTERN = new RegExp('(?:' + createExtensionPattern() + ')$', 'i'); // Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\n\nexport default function extractExtension(number) {\n  var start = number.search(EXTN_PATTERN);\n\n  if (start < 0) {\n    return {};\n  } // If we find a potential extension, and the number preceding this is a viable\n  // number, we assume it is an extension.\n\n\n  var numberWithoutExtension = number.slice(0, start);\n  var matches = number.match(EXTN_PATTERN);\n  var i = 1;\n\n  while (i < matches.length) {\n    if (matches[i]) {\n      return {\n        number: numberWithoutExtension,\n        ext: matches[i]\n      };\n    }\n\n    i++;\n  }\n}\n//# sourceMappingURL=extractExtension.js.map","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { normalizeArguments } from './parsePhoneNumber.js';\nimport parsePhoneNumberFromString from './parsePhoneNumberFromString_.js';\nexport default function isValidPhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  options = _objectSpread(_objectSpread({}, options), {}, {\n    extract: false\n  });\n  var phoneNumber = parsePhoneNumberFromString(text, options, metadata);\n  return phoneNumber && phoneNumber.isValid() || false;\n}\n//# sourceMappingURL=isValidPhoneNumber.js.map","function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport parsePhoneNumber_ from './parsePhoneNumber_.js';\nexport default function parsePhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return parsePhoneNumber_(text, options, metadata);\n}\nexport function normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n      arg_1 = _Array$prototype$slic2[0],\n      arg_2 = _Array$prototype$slic2[1],\n      arg_3 = _Array$prototype$slic2[2],\n      arg_4 = _Array$prototype$slic2[3];\n\n  var text;\n  var options;\n  var metadata; // If the phone number is passed as a string.\n  // `parsePhoneNumber('88005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    text = arg_1;\n  } else throw new TypeError('A text for parsing must be a string.'); // If \"default country\" argument is being passed then move it to `options`.\n  // `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\n\n  if (!arg_2 || typeof arg_2 === 'string') {\n    if (arg_4) {\n      options = arg_3;\n      metadata = arg_4;\n    } else {\n      options = undefined;\n      metadata = arg_3;\n    }\n\n    if (arg_2) {\n      options = _objectSpread({\n        defaultCountry: arg_2\n      }, options);\n    }\n  } // `defaultCountry` is not passed.\n  // Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n  else if (isObject(arg_2)) {\n    if (arg_3) {\n      options = arg_2;\n      metadata = arg_3;\n    } else {\n      metadata = arg_2;\n    }\n  } else throw new Error(\"Invalid second argument: \".concat(arg_2));\n\n  return {\n    text: text,\n    options: options,\n    metadata: metadata\n  };\n} // Otherwise istanbul would show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar isObject = function isObject(_) {\n  return _typeof(_) === 'object';\n};\n//# sourceMappingURL=parsePhoneNumber.js.map","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport parsePhoneNumber from './parsePhoneNumber_.js';\nimport ParseError from './ParseError.js';\nimport { isSupportedCountry } from './metadata.js';\nexport default function parsePhoneNumberFromString(text, options, metadata) {\n  // Validate `defaultCountry`.\n  if (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\n    options = _objectSpread(_objectSpread({}, options), {}, {\n      defaultCountry: undefined\n    });\n  } // Parse phone number.\n\n\n  try {\n    return parsePhoneNumber(text, options, metadata);\n  } catch (error) {\n    /* istanbul ignore else */\n    if (error instanceof ParseError) {//\n    } else {\n      throw error;\n    }\n  }\n}\n//# sourceMappingURL=parsePhoneNumberFromString_.js.map","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport parseNumber from './parse_.js';\nexport default function parsePhoneNumber(text, options, metadata) {\n  return parseNumber(text, _objectSpread(_objectSpread({}, options), {}, {\n    v2: true\n  }), metadata);\n}\n//# sourceMappingURL=parsePhoneNumber_.js.map","/** Returns a regular expression quantifier with an upper and lower limit. */\nexport function limit(lower, upper) {\n  if (lower < 0 || upper <= 0 || upper < lower) {\n    throw new TypeError();\n  }\n\n  return \"{\".concat(lower, \",\").concat(upper, \"}\");\n}\n/**\r\n * Trims away any characters after the first match of {@code pattern} in {@code candidate},\r\n * returning the trimmed version.\r\n */\n\nexport function trimAfterFirstMatch(regexp, string) {\n  var index = string.search(regexp);\n\n  if (index >= 0) {\n    return string.slice(0, index);\n  }\n\n  return string;\n}\nexport function startsWith(string, substring) {\n  return string.indexOf(substring) === 0;\n}\nexport function endsWith(string, substring) {\n  return string.indexOf(substring, string.length - substring.length) === string.length - substring.length;\n}\n//# sourceMappingURL=util.js.map","// Javascript doesn't support UTF-8 regular expressions.\n// So mimicking them here.\n// Copy-pasted from `PhoneNumberMatcher.js`.\n\n/**\r\n * \"\\p{Z}\" is any kind of whitespace or invisible separator (\"Separator\").\r\n * http://www.regular-expressions.info/unicode.html\r\n * \"\\P{Z}\" is the reverse of \"\\p{Z}\".\r\n * \"\\p{N}\" is any kind of numeric character in any script (\"Number\").\r\n * \"\\p{Nd}\" is a digit zero through nine in any script except \"ideographic scripts\" (\"Decimal_Digit_Number\").\r\n * \"\\p{Sc}\" is a currency symbol (\"Currency_Symbol\").\r\n * \"\\p{L}\" is any kind of letter from any language (\"Letter\").\r\n * \"\\p{Mn}\" is \"non-spacing mark\".\r\n *\r\n * Javascript doesn't support Unicode Regular Expressions\r\n * so substituting it with this explicit set of characters.\r\n *\r\n * https://stackoverflow.com/questions/13210194/javascript-regex-equivalent-of-a-za-z-using-pl\r\n * https://github.com/danielberndt/babel-plugin-utf-8-regex/blob/master/src/transformer.js\r\n */\nvar _pZ = \" \\xA0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\";\nexport var pZ = \"[\".concat(_pZ, \"]\");\nexport var PZ = \"[^\".concat(_pZ, \"]\");\nexport var _pN = \"0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19\"; // const pN = `[${_pN}]`\n\nvar _pNd = \"0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19\";\nexport var pNd = \"[\".concat(_pNd, \"]\");\nexport var _pL = \"A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\";\nvar pL = \"[\".concat(_pL, \"]\");\nvar pL_regexp = new RegExp(pL);\nvar _pSc = \"$\\xA2-\\xA5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20B9\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6\";\nvar pSc = \"[\".concat(_pSc, \"]\");\nvar pSc_regexp = new RegExp(pSc);\nvar _pMn = \"\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u08FE\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F\\uA674-\\uA67D\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26\";\nvar pMn = \"[\".concat(_pMn, \"]\");\nvar pMn_regexp = new RegExp(pMn);\nvar _InBasic_Latin = \"\\0-\\x7F\";\nvar _InLatin_1_Supplement = \"\\x80-\\xFF\";\nvar _InLatin_Extended_A = \"\\u0100-\\u017F\";\nvar _InLatin_Extended_Additional = \"\\u1E00-\\u1EFF\";\nvar _InLatin_Extended_B = \"\\u0180-\\u024F\";\nvar _InCombining_Diacritical_Marks = \"\\u0300-\\u036F\";\nvar latinLetterRegexp = new RegExp('[' + _InBasic_Latin + _InLatin_1_Supplement + _InLatin_Extended_A + _InLatin_Extended_Additional + _InLatin_Extended_B + _InCombining_Diacritical_Marks + ']');\n/**\r\n * Helper method to determine if a character is a Latin-script letter or not.\r\n * For our purposes, combining marks should also return true since we assume\r\n * they have been added to a preceding Latin character.\r\n */\n\nexport function isLatinLetter(letter) {\n  // Combining marks are a subset of non-spacing-mark.\n  if (!pL_regexp.test(letter) && !pMn_regexp.test(letter)) {\n    return false;\n  }\n\n  return latinLetterRegexp.test(letter);\n}\nexport function isInvalidPunctuationSymbol(character) {\n  return character === '%' || pSc_regexp.test(character);\n}\n//# sourceMappingURL=utf-8.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport isValidNumber from '../validate_.js';\nimport parseDigits from '../helpers/parseDigits.js';\nimport { startsWith, endsWith } from './util.js';\n/**\r\n * Leniency when finding potential phone numbers in text segments\r\n * The levels here are ordered in increasing strictness.\r\n */\n\nexport default {\n  /**\r\n   * Phone numbers accepted are \"possible\", but not necessarily \"valid\".\r\n   */\n  POSSIBLE: function POSSIBLE(number, candidate, metadata) {\n    return true;\n  },\n\n  /**\r\n   * Phone numbers accepted are \"possible\" and \"valid\".\r\n   * Numbers written in national format must have their national-prefix\r\n   * present if it is usually written for a number of this type.\r\n   */\n  VALID: function VALID(number, candidate, metadata) {\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidate.toString(), metadata)) {\n      return false;\n    } // Skipped for simplicity.\n    // return isNationalPrefixPresentIfRequired(number, metadata)\n\n\n    return true;\n  },\n\n  /**\r\n   * Phone numbers accepted are \"valid\" and\r\n   * are grouped in a possible way for this locale. For example, a US number written as\r\n   * \"65 02 53 00 00\" and \"650253 0000\" are not accepted at this leniency level, whereas\r\n   * \"650 253 0000\", \"650 2530000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol in the national significant number\r\n   * are also dropped at this level.\r\n   *\r\n   * Warning: This level might result in lower coverage especially for regions outside of\r\n   * country code \"+1\". If you are not sure about which level to use,\r\n   * email the discussion group libphonenumber-discuss@googlegroups.com.\r\n   */\n  STRICT_GROUPING: function STRICT_GROUPING(number, candidate, metadata, regExpCache) {\n    var candidateString = candidate.toString();\n\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsRemainGrouped, regExpCache);\n  },\n\n  /**\r\n   * Phone numbers accepted are {@linkplain PhoneNumberUtil#isValidNumber(PhoneNumber) valid} and\r\n   * are grouped in the same way that we would have formatted it, or as a single block. For\r\n   * example, a US number written as \"650 2530000\" is not accepted at this leniency level, whereas\r\n   * \"650 253 0000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol are also dropped at this level.\r\n   * <p>\r\n   * Warning: This level might result in lower coverage especially for regions outside of country\r\n   * code \"+1\". If you are not sure about which level to use, email the discussion group\r\n   * libphonenumber-discuss@googlegroups.com.\r\n   */\n  EXACT_GROUPING: function EXACT_GROUPING(number, candidate, metadata, regExpCache) {\n    var candidateString = candidate.toString();\n\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsAreExactlyPresent, regExpCache);\n  }\n};\n\nfunction containsOnlyValidXChars(number, candidate, metadata) {\n  // The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the\n  // national significant number or (2) an extension sign, in which case they always precede the\n  // extension number. We assume a carrier code is more than 1 digit, so the first case has to\n  // have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'\n  // or 'X'. We ignore the character if it appears as the last character of the string.\n  for (var index = 0; index < candidate.length - 1; index++) {\n    var charAtIndex = candidate.charAt(index);\n\n    if (charAtIndex === 'x' || charAtIndex === 'X') {\n      var charAtNextIndex = candidate.charAt(index + 1);\n\n      if (charAtNextIndex === 'x' || charAtNextIndex === 'X') {\n        // This is the carrier code case, in which the 'X's always precede the national\n        // significant number.\n        index++;\n\n        if (util.isNumberMatch(number, candidate.substring(index)) != MatchType.NSN_MATCH) {\n          return false;\n        } // This is the extension sign case, in which the 'x' or 'X' should always precede the\n        // extension number.\n\n      } else if (parseDigits(candidate.substring(index)) !== number.ext) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction isNationalPrefixPresentIfRequired(number, _metadata) {\n  // First, check how we deduced the country code. If it was written in international format, then\n  // the national prefix is not required.\n  if (number.getCountryCodeSource() != 'FROM_DEFAULT_COUNTRY') {\n    return true;\n  }\n\n  var phoneNumberRegion = util.getRegionCodeForCountryCode(number.getCountryCode());\n  var metadata = util.getMetadataForRegion(phoneNumberRegion);\n\n  if (metadata == null) {\n    return true;\n  } // Check if a national prefix should be present when formatting this number.\n\n\n  var nationalNumber = util.getNationalSignificantNumber(number);\n  var formatRule = util.chooseFormattingPatternForNumber(metadata.numberFormats(), nationalNumber); // To do this, we check that a national prefix formatting rule was present\n  // and that it wasn't just the first-group symbol ($1) with punctuation.\n\n  if (formatRule && formatRule.getNationalPrefixFormattingRule().length > 0) {\n    if (formatRule.getNationalPrefixOptionalWhenFormatting()) {\n      // The national-prefix is optional in these cases, so we don't need to check if it was\n      // present.\n      return true;\n    }\n\n    if (PhoneNumberUtil.formattingRuleHasFirstGroupOnly(formatRule.getNationalPrefixFormattingRule())) {\n      // National Prefix not needed for this number.\n      return true;\n    } // Normalize the remainder.\n\n\n    var rawInputCopy = PhoneNumberUtil.normalizeDigitsOnly(number.getRawInput()); // Check if we found a national prefix and/or carrier code at the start of the raw input, and\n    // return the result.\n\n    return util.maybeStripNationalPrefixAndCarrierCode(rawInputCopy, metadata, null);\n  }\n\n  return true;\n}\n\nexport function containsMoreThanOneSlashInNationalNumber(number, candidate) {\n  var firstSlashInBodyIndex = candidate.indexOf('/');\n\n  if (firstSlashInBodyIndex < 0) {\n    // No slashes, this is okay.\n    return false;\n  } // Now look for a second one.\n\n\n  var secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1);\n\n  if (secondSlashInBodyIndex < 0) {\n    // Only one slash, this is okay.\n    return false;\n  } // If the first slash is after the country calling code, this is permitted.\n\n\n  var candidateHasCountryCode = number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN || number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITHOUT_PLUS_SIGN;\n\n  if (candidateHasCountryCode && PhoneNumberUtil.normalizeDigitsOnly(candidate.substring(0, firstSlashInBodyIndex)) === String(number.getCountryCode())) {\n    // Any more slashes and this is illegal.\n    return candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0;\n  }\n\n  return true;\n}\n\nfunction checkNumberGroupingIsValid(number, candidate, metadata, checkGroups, regExpCache) {\n  var normalizedCandidate = normalizeDigits(candidate, true\n  /* keep non-digits */\n  );\n  var formattedNumberGroups = getNationalNumberGroups(metadata, number, null);\n\n  if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n    return true;\n  } // If this didn't pass, see if there are any alternate formats that match, and try them instead.\n\n\n  var alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode());\n  var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n\n  if (alternateFormats) {\n    for (var _iterator = _createForOfIteratorHelperLoose(alternateFormats.numberFormats()), _step; !(_step = _iterator()).done;) {\n      var alternateFormat = _step.value;\n\n      if (alternateFormat.leadingDigitsPatterns().length > 0) {\n        // There is only one leading digits pattern for alternate formats.\n        var leadingDigitsRegExp = regExpCache.getPatternForRegExp('^' + alternateFormat.leadingDigitsPatterns()[0]);\n\n        if (!leadingDigitsRegExp.test(nationalSignificantNumber)) {\n          // Leading digits don't match; try another one.\n          continue;\n        }\n      }\n\n      formattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat);\n\n      if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n/**\r\n * Helper method to get the national-number part of a number, formatted without any national\r\n * prefix, and return it as a set of digit blocks that would be formatted together following\r\n * standard formatting rules.\r\n */\n\n\nfunction getNationalNumberGroups(metadata, number, formattingPattern) {\n  if (formattingPattern) {\n    // We format the NSN only, and split that according to the separator.\n    var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n    return util.formatNsnUsingPattern(nationalSignificantNumber, formattingPattern, 'RFC3966', metadata).split('-');\n  } // This will be in the format +CC-DG1-DG2-DGX;ext=EXT where DG1..DGX represents groups of digits.\n\n\n  var rfc3966Format = formatNumber(number, 'RFC3966', metadata); // We remove the extension part from the formatted string before splitting it into different\n  // groups.\n\n  var endIndex = rfc3966Format.indexOf(';');\n\n  if (endIndex < 0) {\n    endIndex = rfc3966Format.length;\n  } // The country-code will have a '-' following it.\n\n\n  var startIndex = rfc3966Format.indexOf('-') + 1;\n  return rfc3966Format.slice(startIndex, endIndex).split('-');\n}\n\nfunction allNumberGroupsAreExactlyPresent(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN); // Set this to the last group, skipping it if the number has an extension.\n\n  var candidateNumberGroupIndex = number.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1; // First we check if the national significant number is formatted as a block.\n  // We use contains and not equals, since the national significant number may be present with\n  // a prefix such as a national number prefix, or the country code itself.\n\n  if (candidateGroups.length == 1 || candidateGroups[candidateNumberGroupIndex].contains(util.getNationalSignificantNumber(number))) {\n    return true;\n  } // Starting from the end, go through in reverse, excluding the first group, and check the\n  // candidate and number groups are the same.\n\n\n  var formattedNumberGroupIndex = formattedNumberGroups.length - 1;\n\n  while (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0) {\n    if (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex]) {\n      return false;\n    }\n\n    formattedNumberGroupIndex--;\n    candidateNumberGroupIndex--;\n  } // Now check the first group. There may be a national prefix at the start, so we only check\n  // that the candidate group ends with the formatted number group.\n\n\n  return candidateNumberGroupIndex >= 0 && endsWith(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]);\n}\n\nfunction allNumberGroupsRemainGrouped(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var fromIndex = 0;\n\n  if (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY) {\n    // First skip the country code if the normalized candidate contained it.\n    var countryCode = String(number.getCountryCode());\n    fromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length();\n  } // Check each group of consecutive digits are not broken into separate groupings in the\n  // {@code normalizedCandidate} string.\n\n\n  for (var i = 0; i < formattedNumberGroups.length; i++) {\n    // Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}\n    // doesn't contain the consecutive digits in formattedNumberGroups[i].\n    fromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex);\n\n    if (fromIndex < 0) {\n      return false;\n    } // Moves {@code fromIndex} forward.\n\n\n    fromIndex += formattedNumberGroups[i].length();\n\n    if (i == 0 && fromIndex < normalizedCandidate.length()) {\n      // We are at the position right after the NDC. We get the region used for formatting\n      // information based on the country code in the phone number, rather than the number itself,\n      // as we do not need to distinguish between different countries with the same country\n      // calling code and this is faster.\n      var region = util.getRegionCodeForCountryCode(number.getCountryCode());\n\n      if (util.getNddPrefixForRegion(region, true) != null && Character.isDigit(normalizedCandidate.charAt(fromIndex))) {\n        // This means there is no formatting symbol after the NDC. In this case, we only\n        // accept the number if there is no formatting symbol at all in the number, except\n        // for extensions. This is only important for countries with national prefixes.\n        var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n        return startsWith(normalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length), nationalSignificantNumber);\n      }\n    }\n  } // The check here makes sure that we haven't mistakenly already used the extension to\n  // match the last group of the subscriber number. Note the extension cannot have\n  // formatting in-between digits.\n\n\n  return normalizedCandidate.slice(fromIndex).contains(number.getExtension());\n}\n//# sourceMappingURL=Leniency.js.map","// Matches strings that look like dates using \"/\" as a separator.\n// Examples: 3/10/2011, 31/10/96 or 08/31/95.\nvar SLASH_SEPARATED_DATES = /(?:(?:[0-3]?\\d\\/[01]?\\d)|(?:[01]?\\d\\/[0-3]?\\d))\\/(?:[12]\\d)?\\d{2}/; // Matches timestamps.\n// Examples: \"2012-01-02 08:00\".\n// Note that the reg-ex does not include the\n// trailing \":\\d\\d\" -- that is covered by TIME_STAMPS_SUFFIX.\n\nvar TIME_STAMPS = /[12]\\d{3}[-/]?[01]\\d[-/]?[0-3]\\d +[0-2]\\d$/;\nvar TIME_STAMPS_SUFFIX_LEADING = /^:[0-5]\\d/;\nexport default function isValidPreCandidate(candidate, offset, text) {\n  // Skip a match that is more likely to be a date.\n  if (SLASH_SEPARATED_DATES.test(candidate)) {\n    return false;\n  } // Skip potential time-stamps.\n\n\n  if (TIME_STAMPS.test(candidate)) {\n    var followingText = text.slice(offset + candidate.length);\n\n    if (TIME_STAMPS_SUFFIX_LEADING.test(followingText)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n//# sourceMappingURL=isValidPreCandidate.js.map","// Copy-pasted from `PhoneNumberMatcher.js`.\nimport { PLUS_CHARS } from '../constants.js';\nimport { limit } from './util.js';\nimport { isLatinLetter, isInvalidPunctuationSymbol } from './utf-8.js';\nvar OPENING_PARENS = \"(\\\\[\\uFF08\\uFF3B\";\nvar CLOSING_PARENS = \")\\\\]\\uFF09\\uFF3D\";\nvar NON_PARENS = \"[^\".concat(OPENING_PARENS).concat(CLOSING_PARENS, \"]\");\nexport var LEAD_CLASS = \"[\".concat(OPENING_PARENS).concat(PLUS_CHARS, \"]\"); // Punctuation that may be at the start of a phone number - brackets and plus signs.\n\nvar LEAD_CLASS_LEADING = new RegExp('^' + LEAD_CLASS); // Limit on the number of pairs of brackets in a phone number.\n\nvar BRACKET_PAIR_LIMIT = limit(0, 3);\n/**\r\n * Pattern to check that brackets match. Opening brackets should be closed within a phone number.\r\n * This also checks that there is something inside the brackets. Having no brackets at all is also\r\n * fine.\r\n *\r\n * An opening bracket at the beginning may not be closed, but subsequent ones should be.  It's\r\n * also possible that the leading bracket was dropped, so we shouldn't be surprised if we see a\r\n * closing bracket first. We limit the sets of brackets in a phone number to four.\r\n */\n\nvar MATCHING_BRACKETS_ENTIRE = new RegExp('^' + \"(?:[\" + OPENING_PARENS + \"])?\" + \"(?:\" + NON_PARENS + \"+\" + \"[\" + CLOSING_PARENS + \"])?\" + NON_PARENS + \"+\" + \"(?:[\" + OPENING_PARENS + \"]\" + NON_PARENS + \"+[\" + CLOSING_PARENS + \"])\" + BRACKET_PAIR_LIMIT + NON_PARENS + \"*\" + '$');\n/**\r\n * Matches strings that look like publication pages. Example:\r\n * <pre>Computing Complete Answers to Queries in the Presence of Limited Access Patterns.\r\n * Chen Li. VLDB J. 12(3): 211-227 (2003).</pre>\r\n *\r\n * The string \"211-227 (2003)\" is not a telephone number.\r\n */\n\nvar PUB_PAGES = /\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}/;\nexport default function isValidCandidate(candidate, offset, text, leniency) {\n  // Check the candidate doesn't contain any formatting\n  // which would indicate that it really isn't a phone number.\n  if (!MATCHING_BRACKETS_ENTIRE.test(candidate) || PUB_PAGES.test(candidate)) {\n    return;\n  } // If leniency is set to VALID or stricter, we also want to skip numbers that are surrounded\n  // by Latin alphabetic characters, to skip cases like abc8005001234 or 8005001234def.\n\n\n  if (leniency !== 'POSSIBLE') {\n    // If the candidate is not at the start of the text,\n    // and does not start with phone-number punctuation,\n    // check the previous character.\n    if (offset > 0 && !LEAD_CLASS_LEADING.test(candidate)) {\n      var previousChar = text[offset - 1]; // We return null if it is a latin letter or an invalid punctuation symbol.\n\n      if (isInvalidPunctuationSymbol(previousChar) || isLatinLetter(previousChar)) {\n        return false;\n      }\n    }\n\n    var lastCharIndex = offset + candidate.length;\n\n    if (lastCharIndex < text.length) {\n      var nextChar = text[lastCharIndex];\n\n      if (isInvalidPunctuationSymbol(nextChar) || isLatinLetter(nextChar)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n//# sourceMappingURL=isValidCandidate.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// Should be the same as `DIGIT_PLACEHOLDER` in `libphonenumber-metadata-generator`.\nexport var DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\n\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER); // Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\n\nexport function countOccurences(symbol, string) {\n  var count = 0; // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for counting brackets it is safe.\n  // for (const character of string)\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n} // Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\n\nexport function repeat(string, times) {\n  if (times < 1) {\n    return '';\n  }\n\n  var result = '';\n\n  while (times > 1) {\n    if (times & 1) {\n      result += string;\n    }\n\n    times >>= 1;\n    string += string;\n  }\n\n  return result + string;\n}\nexport function cutAndStripNonPairedParens(string, cutBeforeIndex) {\n  if (string[cutBeforeIndex] === ')') {\n    cutBeforeIndex++;\n  }\n\n  return stripNonPairedParens(string.slice(0, cutBeforeIndex));\n}\nexport function closeNonPairedParens(template, cut_before) {\n  var retained_template = template.slice(0, cut_before);\n  var opening_braces = countOccurences('(', retained_template);\n  var closing_braces = countOccurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n\n  while (dangling_braces > 0 && cut_before < template.length) {\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n\n    cut_before++;\n  }\n\n  return template.slice(0, cut_before);\n}\nexport function stripNonPairedParens(string) {\n  var dangling_braces = [];\n  var i = 0;\n\n  while (i < string.length) {\n    if (string[i] === '(') {\n      dangling_braces.push(i);\n    } else if (string[i] === ')') {\n      dangling_braces.pop();\n    }\n\n    i++;\n  }\n\n  var start = 0;\n  var cleared_string = '';\n  dangling_braces.push(string.length);\n\n  for (var _i = 0, _dangling_braces = dangling_braces; _i < _dangling_braces.length; _i++) {\n    var index = _dangling_braces[_i];\n    cleared_string += string.slice(start, index);\n    start = index + 1;\n  }\n\n  return cleared_string;\n}\nexport function populateTemplateWithDigits(template, position, digits) {\n  // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for `digits` it is safe.\n  // for (const digit of digits)\n  for (var _iterator2 = _createForOfIteratorHelperLoose(digits.split('')), _step2; !(_step2 = _iterator2()).done;) {\n    var digit = _step2.value;\n\n    // If there is room for more digits in current `template`,\n    // then set the next digit in the `template`,\n    // and return the formatted digits so far.\n    // If more digits are entered than the current format could handle.\n    if (template.slice(position + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {\n      return;\n    }\n\n    position = template.search(DIGIT_PLACEHOLDER_MATCHER);\n    template = template.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n  }\n\n  return [template, position];\n}\n//# sourceMappingURL=AsYouTypeFormatter.util.js.map","import checkNumberLength from './helpers/checkNumberLength.js';\nimport parseDigits from './helpers/parseDigits.js';\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js';\nexport default function formatCompleteNumber(state, format, _ref) {\n  var metadata = _ref.metadata,\n      shouldTryNationalPrefixFormattingRule = _ref.shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix = _ref.getSeparatorAfterNationalPrefix;\n  var matcher = new RegExp(\"^(?:\".concat(format.pattern(), \")$\"));\n\n  if (matcher.test(state.nationalSignificantNumber)) {\n    return formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, {\n      metadata: metadata,\n      shouldTryNationalPrefixFormattingRule: shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix\n    });\n  }\n}\nexport function canFormatCompleteNumber(nationalSignificantNumber, metadata) {\n  return checkNumberLength(nationalSignificantNumber, metadata) === 'IS_POSSIBLE';\n}\n\nfunction formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, _ref2) {\n  var metadata = _ref2.metadata,\n      shouldTryNationalPrefixFormattingRule = _ref2.shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix = _ref2.getSeparatorAfterNationalPrefix;\n  // `format` has already been checked for `nationalPrefix` requirement.\n  var nationalSignificantNumber = state.nationalSignificantNumber,\n      international = state.international,\n      nationalPrefix = state.nationalPrefix,\n      carrierCode = state.carrierCode; // Format the number with using `national_prefix_formatting_rule`.\n  // If the resulting formatted number is a valid formatted number, then return it.\n  //\n  // Google's AsYouType formatter is different in a way that it doesn't try\n  // to format using the \"national prefix formatting rule\", and instead it\n  // simply prepends a national prefix followed by a \" \" character.\n  // This code does that too, but as a fallback.\n  // The reason is that \"national prefix formatting rule\" may use parentheses,\n  // which wouldn't be included has it used the simpler Google's way.\n  //\n\n  if (shouldTryNationalPrefixFormattingRule(format)) {\n    var formattedNumber = formatNationalNumber(state, format, {\n      useNationalPrefixFormattingRule: true,\n      getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix,\n      metadata: metadata\n    });\n\n    if (formattedNumber) {\n      return formattedNumber;\n    }\n  } // Format the number without using `national_prefix_formatting_rule`.\n\n\n  return formatNationalNumber(state, format, {\n    useNationalPrefixFormattingRule: false,\n    getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix,\n    metadata: metadata\n  });\n}\n\nfunction formatNationalNumber(state, format, _ref3) {\n  var metadata = _ref3.metadata,\n      useNationalPrefixFormattingRule = _ref3.useNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix = _ref3.getSeparatorAfterNationalPrefix;\n  var formattedNationalNumber = formatNationalNumberUsingFormat(state.nationalSignificantNumber, format, {\n    carrierCode: state.carrierCode,\n    useInternationalFormat: state.international,\n    withNationalPrefix: useNationalPrefixFormattingRule,\n    metadata: metadata\n  });\n\n  if (!useNationalPrefixFormattingRule) {\n    if (state.nationalPrefix) {\n      // If a national prefix was extracted, then just prepend it,\n      // followed by a \" \" character.\n      formattedNationalNumber = state.nationalPrefix + getSeparatorAfterNationalPrefix(format) + formattedNationalNumber;\n    } else if (state.complexPrefixBeforeNationalSignificantNumber) {\n      formattedNationalNumber = state.complexPrefixBeforeNationalSignificantNumber + ' ' + formattedNationalNumber;\n    }\n  }\n\n  if (isValidFormattedNationalNumber(formattedNationalNumber, state)) {\n    return formattedNationalNumber;\n  }\n} // Check that the formatted phone number contains exactly\n// the same digits that have been input by the user.\n// For example, when \"0111523456789\" is input for `AR` country,\n// the extracted `this.nationalSignificantNumber` is \"91123456789\",\n// which means that the national part of `this.digits` isn't simply equal to\n// `this.nationalPrefix` + `this.nationalSignificantNumber`.\n//\n// Also, a `format` can add extra digits to the `this.nationalSignificantNumber`\n// being formatted via `metadata[country].national_prefix_transform_rule`.\n// For example, for `VI` country, it prepends `340` to the national number,\n// and if this check hasn't been implemented, then there would be a bug\n// when `340` \"area coude\" is \"duplicated\" during input for `VI` country:\n// https://github.com/catamphetamine/libphonenumber-js/issues/318\n//\n// So, all these \"gotchas\" are filtered out.\n//\n// In the original Google's code, the comments say:\n// \"Check that we didn't remove nor add any extra digits when we matched\n// this formatting pattern. This usually happens after we entered the last\n// digit during AYTF. Eg: In case of MX, we swallow mobile token (1) when\n// formatted but AYTF should retain all the number entered and not change\n// in order to match a format (of same leading digits and length) display\n// in that way.\"\n// \"If it's the same (i.e entered number and format is same), then it's\n// safe to return this in formatted number as nothing is lost / added.\"\n// Otherwise, don't use this format.\n// https://github.com/google/libphonenumber/commit/3e7c1f04f5e7200f87fb131e6f85c6e99d60f510#diff-9149457fa9f5d608a11bb975c6ef4bc5\n// https://github.com/google/libphonenumber/commit/3ac88c7106e7dcb553bcc794b15f19185928a1c6#diff-2dcb77e833422ee304da348b905cde0b\n//\n\n\nfunction isValidFormattedNationalNumber(formattedNationalNumber, state) {\n  return parseDigits(formattedNationalNumber) === state.getNationalDigits();\n}\n//# sourceMappingURL=AsYouTypeFormatter.complete.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar PatternMatcher = /*#__PURE__*/function () {\n  function PatternMatcher(pattern) {\n    _classCallCheck(this, PatternMatcher);\n\n    this.matchTree = new PatternParser().parse(pattern);\n  }\n\n  _createClass(PatternMatcher, [{\n    key: \"match\",\n    value: function match(string) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          allowOverflow = _ref.allowOverflow;\n\n      if (!string) {\n        throw new Error('String is required');\n      }\n\n      var result = _match(string.split(''), this.matchTree, true);\n\n      if (result && result.match) {\n        delete result.matchedChars;\n      }\n\n      if (result && result.overflow) {\n        if (!allowOverflow) {\n          return;\n        }\n      }\n\n      return result;\n    }\n  }]);\n\n  return PatternMatcher;\n}();\n\nexport { PatternMatcher as default };\n\nfunction _match(characters, tree, last) {\n  if (typeof tree === 'string') {\n    if (last) {\n      // `tree` is always a single character.\n      if (characters.length > tree.length) {\n        return {\n          overflow: true\n        };\n      }\n    }\n\n    var characterString = characters.join('');\n\n    if (tree.indexOf(characterString) === 0) {\n      // `tree` is always a single character.\n      // If `tree.indexOf(characterString) === 0`\n      // then `characters.length === tree.length`.\n\n      /* istanbul ignore else */\n      if (characters.length === tree.length) {\n        return {\n          match: true,\n          matchedChars: characters\n        };\n      } // `tree` is always a single character.\n      // If `tree.indexOf(characterString) === 0`\n      // then `characters.length === tree.length`.\n\n      /* istanbul ignore next */\n\n\n      return {\n        partialMatch: true // matchedChars: characters\n\n      };\n    }\n\n    if (characterString.indexOf(tree) === 0) {\n      return {\n        match: true,\n        matchedChars: characters.slice(0, tree.length)\n      };\n    }\n\n    return;\n  }\n\n  if (Array.isArray(tree)) {\n    var restCharacters = characters.slice();\n    var i = 0;\n\n    while (i < tree.length) {\n      var subtree = tree[i];\n\n      var result = _match(restCharacters, subtree, last && i === tree.length - 1);\n\n      if (!result) {\n        return;\n      } else if (result.overflow) {\n        return result;\n      } else if (result.match) {\n        // Continue with the next subtree with the rest of the characters.\n        restCharacters = restCharacters.slice(result.matchedChars.length);\n\n        if (restCharacters.length === 0) {\n          if (i === tree.length - 1) {\n            return {\n              match: true,\n              matchedChars: characters\n            };\n          } else {\n            return {\n              partialMatch: true // matchedChars: characters\n\n            };\n          }\n        }\n      } else {\n        /* istanbul ignore else */\n        if (result.partialMatch) {\n          return {\n            partialMatch: true // matchedChars: characters\n\n          };\n        } else {\n          throw new Error(\"Unsupported match result:\\n\".concat(JSON.stringify(result, null, 2)));\n        }\n      }\n\n      i++;\n    } // If `last` then overflow has already been checked\n    // by the last element of the `tree` array.\n\n    /* istanbul ignore if */\n\n\n    if (last) {\n      return {\n        overflow: true\n      };\n    }\n\n    return {\n      match: true,\n      matchedChars: characters.slice(0, characters.length - restCharacters.length)\n    };\n  }\n\n  switch (tree.op) {\n    case '|':\n      var partialMatch;\n\n      for (var _iterator = _createForOfIteratorHelperLoose(tree.args), _step; !(_step = _iterator()).done;) {\n        var branch = _step.value;\n\n        var _result = _match(characters, branch, last);\n\n        if (_result) {\n          if (_result.overflow) {\n            return _result;\n          } else if (_result.match) {\n            return {\n              match: true,\n              matchedChars: _result.matchedChars\n            };\n          } else {\n            /* istanbul ignore else */\n            if (_result.partialMatch) {\n              partialMatch = true;\n            } else {\n              throw new Error(\"Unsupported match result:\\n\".concat(JSON.stringify(_result, null, 2)));\n            }\n          }\n        }\n      }\n\n      if (partialMatch) {\n        return {\n          partialMatch: true // matchedChars: ...\n\n        };\n      } // Not even a partial match.\n\n\n      return;\n\n    case '[]':\n      for (var _iterator2 = _createForOfIteratorHelperLoose(tree.args), _step2; !(_step2 = _iterator2()).done;) {\n        var _char = _step2.value;\n\n        if (characters[0] === _char) {\n          if (characters.length === 1) {\n            return {\n              match: true,\n              matchedChars: characters\n            };\n          }\n\n          if (last) {\n            return {\n              overflow: true\n            };\n          }\n\n          return {\n            match: true,\n            matchedChars: [_char]\n          };\n        }\n      } // No character matches.\n\n\n      return;\n\n    /* istanbul ignore next */\n\n    default:\n      throw new Error(\"Unsupported instruction tree: \".concat(tree));\n  }\n}\n\nvar OPERATOR = new RegExp( // any of:\n'(' + // or operator\n'\\\\|' + // or\n'|' + // or group start\n'\\\\(\\\\?\\\\:' + // or\n'|' + // or group end\n'\\\\)' + // or\n'|' + // one-of set start\n'\\\\[' + // or\n'|' + // one-of set end\n'\\\\]' + ')');\nvar ILLEGAL_CHARACTER_REGEXP = /[\\(\\)\\[\\]\\?\\:\\|]/;\n\nvar PatternParser = /*#__PURE__*/function () {\n  function PatternParser() {\n    _classCallCheck(this, PatternParser);\n  }\n\n  _createClass(PatternParser, [{\n    key: \"parse\",\n    value: function parse(pattern) {\n      this.context = [{\n        or: true,\n        instructions: []\n      }];\n      this.parsePattern(pattern);\n\n      if (this.context.length !== 1) {\n        throw new Error('Non-finalized contexts left when pattern parse ended');\n      }\n\n      var _this$context$ = this.context[0],\n          branches = _this$context$.branches,\n          instructions = _this$context$.instructions;\n\n      if (branches) {\n        return [{\n          op: '|',\n          args: branches.concat([instructions])\n        }];\n      }\n      /* istanbul ignore if */\n\n\n      if (instructions.length === 0) {\n        throw new Error('Pattern is required');\n      }\n\n      return instructions;\n    }\n  }, {\n    key: \"startContext\",\n    value: function startContext(context) {\n      this.context.push(context);\n    }\n  }, {\n    key: \"endContext\",\n    value: function endContext() {\n      this.context.pop();\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      return this.context[this.context.length - 1];\n    }\n  }, {\n    key: \"parsePattern\",\n    value: function parsePattern(pattern) {\n      if (!pattern) {\n        throw new Error('Pattern is required');\n      }\n\n      var match = pattern.match(OPERATOR);\n\n      if (!match) {\n        if (ILLEGAL_CHARACTER_REGEXP.test(pattern)) {\n          throw new Error(\"Illegal characters found in a pattern: \".concat(pattern));\n        }\n\n        this.getContext().instructions = this.getContext().instructions.concat(pattern.split(''));\n        return;\n      }\n\n      var operator = match[1];\n      var before = pattern.slice(0, match.index);\n      var rightPart = pattern.slice(match.index + operator.length);\n\n      switch (operator) {\n        case '(?:':\n          if (before) {\n            this.parsePattern(before);\n          }\n\n          this.startContext({\n            or: true,\n            instructions: [],\n            branches: []\n          });\n          break;\n\n        case ')':\n          if (!this.getContext().or) {\n            throw new Error('\")\" operator must be preceded by \"(?:\" operator');\n          }\n\n          if (before) {\n            this.parsePattern(before);\n          }\n\n          if (this.getContext().instructions.length === 0) {\n            throw new Error('No instructions found after \"|\" operator in an \"or\" group');\n          }\n\n          var _this$getContext = this.getContext(),\n              branches = _this$getContext.branches;\n\n          branches.push(this.getContext().instructions);\n          this.endContext();\n          this.getContext().instructions.push({\n            op: '|',\n            args: branches\n          });\n          break;\n\n        case '|':\n          if (!this.getContext().or) {\n            throw new Error('\"|\" operator can only be used inside \"or\" groups');\n          }\n\n          if (before) {\n            this.parsePattern(before);\n          } // The top-level is an implicit \"or\" group, if required.\n\n\n          if (!this.getContext().branches) {\n            // `branches` are not defined only for the root implicit \"or\" operator.\n\n            /* istanbul ignore else */\n            if (this.context.length === 1) {\n              this.getContext().branches = [];\n            } else {\n              throw new Error('\"branches\" not found in an \"or\" group context');\n            }\n          }\n\n          this.getContext().branches.push(this.getContext().instructions);\n          this.getContext().instructions = [];\n          break;\n\n        case '[':\n          if (before) {\n            this.parsePattern(before);\n          }\n\n          this.startContext({\n            oneOfSet: true\n          });\n          break;\n\n        case ']':\n          if (!this.getContext().oneOfSet) {\n            throw new Error('\"]\" operator must be preceded by \"[\" operator');\n          }\n\n          this.endContext();\n          this.getContext().instructions.push({\n            op: '[]',\n            args: parseOneOfSet(before)\n          });\n          break;\n\n        /* istanbul ignore next */\n\n        default:\n          throw new Error(\"Unknown operator: \".concat(operator));\n      }\n\n      if (rightPart) {\n        this.parsePattern(rightPart);\n      }\n    }\n  }]);\n\n  return PatternParser;\n}();\n\nfunction parseOneOfSet(pattern) {\n  var values = [];\n  var i = 0;\n\n  while (i < pattern.length) {\n    if (pattern[i] === '-') {\n      if (i === 0 || i === pattern.length - 1) {\n        throw new Error(\"Couldn't parse a one-of set pattern: \".concat(pattern));\n      }\n\n      var prevValue = pattern[i - 1].charCodeAt(0) + 1;\n      var nextValue = pattern[i + 1].charCodeAt(0) - 1;\n      var value = prevValue;\n\n      while (value <= nextValue) {\n        values.push(String.fromCharCode(value));\n        value++;\n      }\n    } else {\n      values.push(pattern[i]);\n    }\n\n    i++;\n  }\n\n  return values;\n}\n//# sourceMappingURL=AsYouTypeFormatter.PatternMatcher.js.map","import { withMetadata } from '../metadata.js'\r\nimport { isValidPhoneNumber as _isValidPhoneNumber } from '../../core/index.js'\r\n\r\nexport function isValidPhoneNumber() {\r\n\treturn withMetadata(_isValidPhoneNumber, arguments)\r\n}","import metadata from '../metadata.js'\r\nimport { PhoneNumberMatcher as _PhoneNumberMatcher } from '../../core/index.js'\r\n\r\nexport function PhoneNumberMatcher(text, options) {\r\n\treturn _PhoneNumberMatcher.call(this, text, options, metadata)\r\n}\r\nPhoneNumberMatcher.prototype = Object.create(_PhoneNumberMatcher.prototype, {})\r\nPhoneNumberMatcher.prototype.constructor = PhoneNumberMatcher\r\n","import metadata from '../metadata.js'\r\nimport { AsYouType as _AsYouType } from '../../core/index.js'\r\n\r\nexport function AsYouType(country) {\r\n\treturn _AsYouType.call(this, country, metadata)\r\n}\r\n\r\nAsYouType.prototype = Object.create(_AsYouType.prototype, {})\r\nAsYouType.prototype.constructor = AsYouType","import metadata from '../metadata.js'\r\nimport { Metadata as _Metadata } from '../../core/index.js'\r\n\r\nexport function Metadata() {\r\n\treturn _Metadata.call(this, metadata)\r\n}\r\n\r\nMetadata.prototype = Object.create(_Metadata.prototype, {})\r\nMetadata.prototype.constructor = Metadata","import metadata from '../min/metadata.js'\r\n\r\nimport { PhoneNumberSearch as _PhoneNumberSearch } from '../es6/findPhoneNumbers_.js'\r\n\r\nexport function PhoneNumberSearch(text, options) {\r\n\t_PhoneNumberSearch.call(this, text, options, metadata)\r\n}\r\n\r\n// Deprecated.\r\nPhoneNumberSearch.prototype = Object.create(_PhoneNumberSearch.prototype, {})\r\nPhoneNumberSearch.prototype.constructor = PhoneNumberSearch\r\n","// This file is a workaround for a bug in web browsers' \"native\"\n// ES6 importing system which is uncapable of importing \"*.json\" files.\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\nexport default {\"version\":4,\"country_calling_codes\":{\"1\":[\"US\",\"AG\",\"AI\",\"AS\",\"BB\",\"BM\",\"BS\",\"CA\",\"DM\",\"DO\",\"GD\",\"GU\",\"JM\",\"KN\",\"KY\",\"LC\",\"MP\",\"MS\",\"PR\",\"SX\",\"TC\",\"TT\",\"VC\",\"VG\",\"VI\"],\"7\":[\"RU\",\"KZ\"],\"20\":[\"EG\"],\"27\":[\"ZA\"],\"30\":[\"GR\"],\"31\":[\"NL\"],\"32\":[\"BE\"],\"33\":[\"FR\"],\"34\":[\"ES\"],\"36\":[\"HU\"],\"39\":[\"IT\",\"VA\"],\"40\":[\"RO\"],\"41\":[\"CH\"],\"43\":[\"AT\"],\"44\":[\"GB\",\"GG\",\"IM\",\"JE\"],\"45\":[\"DK\"],\"46\":[\"SE\"],\"47\":[\"NO\",\"SJ\"],\"48\":[\"PL\"],\"49\":[\"DE\"],\"51\":[\"PE\"],\"52\":[\"MX\"],\"53\":[\"CU\"],\"54\":[\"AR\"],\"55\":[\"BR\"],\"56\":[\"CL\"],\"57\":[\"CO\"],\"58\":[\"VE\"],\"60\":[\"MY\"],\"61\":[\"AU\",\"CC\",\"CX\"],\"62\":[\"ID\"],\"63\":[\"PH\"],\"64\":[\"NZ\"],\"65\":[\"SG\"],\"66\":[\"TH\"],\"81\":[\"JP\"],\"82\":[\"KR\"],\"84\":[\"VN\"],\"86\":[\"CN\"],\"90\":[\"TR\"],\"91\":[\"IN\"],\"92\":[\"PK\"],\"93\":[\"AF\"],\"94\":[\"LK\"],\"95\":[\"MM\"],\"98\":[\"IR\"],\"211\":[\"SS\"],\"212\":[\"MA\",\"EH\"],\"213\":[\"DZ\"],\"216\":[\"TN\"],\"218\":[\"LY\"],\"220\":[\"GM\"],\"221\":[\"SN\"],\"222\":[\"MR\"],\"223\":[\"ML\"],\"224\":[\"GN\"],\"225\":[\"CI\"],\"226\":[\"BF\"],\"227\":[\"NE\"],\"228\":[\"TG\"],\"229\":[\"BJ\"],\"230\":[\"MU\"],\"231\":[\"LR\"],\"232\":[\"SL\"],\"233\":[\"GH\"],\"234\":[\"NG\"],\"235\":[\"TD\"],\"236\":[\"CF\"],\"237\":[\"CM\"],\"238\":[\"CV\"],\"239\":[\"ST\"],\"240\":[\"GQ\"],\"241\":[\"GA\"],\"242\":[\"CG\"],\"243\":[\"CD\"],\"244\":[\"AO\"],\"245\":[\"GW\"],\"246\":[\"IO\"],\"247\":[\"AC\"],\"248\":[\"SC\"],\"249\":[\"SD\"],\"250\":[\"RW\"],\"251\":[\"ET\"],\"252\":[\"SO\"],\"253\":[\"DJ\"],\"254\":[\"KE\"],\"255\":[\"TZ\"],\"256\":[\"UG\"],\"257\":[\"BI\"],\"258\":[\"MZ\"],\"260\":[\"ZM\"],\"261\":[\"MG\"],\"262\":[\"RE\",\"YT\"],\"263\":[\"ZW\"],\"264\":[\"NA\"],\"265\":[\"MW\"],\"266\":[\"LS\"],\"267\":[\"BW\"],\"268\":[\"SZ\"],\"269\":[\"KM\"],\"290\":[\"SH\",\"TA\"],\"291\":[\"ER\"],\"297\":[\"AW\"],\"298\":[\"FO\"],\"299\":[\"GL\"],\"350\":[\"GI\"],\"351\":[\"PT\"],\"352\":[\"LU\"],\"353\":[\"IE\"],\"354\":[\"IS\"],\"355\":[\"AL\"],\"356\":[\"MT\"],\"357\":[\"CY\"],\"358\":[\"FI\",\"AX\"],\"359\":[\"BG\"],\"370\":[\"LT\"],\"371\":[\"LV\"],\"372\":[\"EE\"],\"373\":[\"MD\"],\"374\":[\"AM\"],\"375\":[\"BY\"],\"376\":[\"AD\"],\"377\":[\"MC\"],\"378\":[\"SM\"],\"380\":[\"UA\"],\"381\":[\"RS\"],\"382\":[\"ME\"],\"383\":[\"XK\"],\"385\":[\"HR\"],\"386\":[\"SI\"],\"387\":[\"BA\"],\"389\":[\"MK\"],\"420\":[\"CZ\"],\"421\":[\"SK\"],\"423\":[\"LI\"],\"500\":[\"FK\"],\"501\":[\"BZ\"],\"502\":[\"GT\"],\"503\":[\"SV\"],\"504\":[\"HN\"],\"505\":[\"NI\"],\"506\":[\"CR\"],\"507\":[\"PA\"],\"508\":[\"PM\"],\"509\":[\"HT\"],\"590\":[\"GP\",\"BL\",\"MF\"],\"591\":[\"BO\"],\"592\":[\"GY\"],\"593\":[\"EC\"],\"594\":[\"GF\"],\"595\":[\"PY\"],\"596\":[\"MQ\"],\"597\":[\"SR\"],\"598\":[\"UY\"],\"599\":[\"CW\",\"BQ\"],\"670\":[\"TL\"],\"672\":[\"NF\"],\"673\":[\"BN\"],\"674\":[\"NR\"],\"675\":[\"PG\"],\"676\":[\"TO\"],\"677\":[\"SB\"],\"678\":[\"VU\"],\"679\":[\"FJ\"],\"680\":[\"PW\"],\"681\":[\"WF\"],\"682\":[\"CK\"],\"683\":[\"NU\"],\"685\":[\"WS\"],\"686\":[\"KI\"],\"687\":[\"NC\"],\"688\":[\"TV\"],\"689\":[\"PF\"],\"690\":[\"TK\"],\"691\":[\"FM\"],\"692\":[\"MH\"],\"850\":[\"KP\"],\"852\":[\"HK\"],\"853\":[\"MO\"],\"855\":[\"KH\"],\"856\":[\"LA\"],\"880\":[\"BD\"],\"886\":[\"TW\"],\"960\":[\"MV\"],\"961\":[\"LB\"],\"962\":[\"JO\"],\"963\":[\"SY\"],\"964\":[\"IQ\"],\"965\":[\"KW\"],\"966\":[\"SA\"],\"967\":[\"YE\"],\"968\":[\"OM\"],\"970\":[\"PS\"],\"971\":[\"AE\"],\"972\":[\"IL\"],\"973\":[\"BH\"],\"974\":[\"QA\"],\"975\":[\"BT\"],\"976\":[\"MN\"],\"977\":[\"NP\"],\"992\":[\"TJ\"],\"993\":[\"TM\"],\"994\":[\"AZ\"],\"995\":[\"GE\"],\"996\":[\"KG\"],\"998\":[\"UZ\"]},\"countries\":{\"AC\":[\"247\",\"00\",\"(?:[01589]\\\\d|[46])\\\\d{4}\",[5,6]],\"AD\":[\"376\",\"00\",\"(?:1|6\\\\d)\\\\d{7}|[135-9]\\\\d{5}\",[6,8,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"[135-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]]],\"AE\":[\"971\",\"00\",\"(?:[4-7]\\\\d|9[0-689])\\\\d{7}|800\\\\d{2,9}|[2-4679]\\\\d{7}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{2,9})\",\"$1 $2\",[\"60|8\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[236]|[479][2-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{5})\",\"$1 $2 $3\",[\"[479]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AF\":[\"93\",\"00\",\"[2-7]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"]],\"0\"],\"AG\":[\"1\",\"011\",\"(?:268|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([457]\\\\d{6})$\",\"268$1\",0,\"268\"],\"AI\":[\"1\",\"011\",\"(?:264|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2457]\\\\d{6})$\",\"264$1\",0,\"264\"],\"AL\":[\"355\",\"00\",\"(?:700\\\\d\\\\d|900)\\\\d{3}|8\\\\d{5,7}|(?:[2-5]|6\\\\d)\\\\d{7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"80|9\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2358][2-5]|4\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[23578]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"]],\"0\"],\"AM\":[\"374\",\"00\",\"(?:[1-489]\\\\d|55|60|77)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0 $1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2|3[12]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"1|47\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[3-9]\"],\"0$1\"]],\"0\"],\"AO\":[\"244\",\"00\",\"[29]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[29]\"]]]],\"AR\":[\"54\",\"00\",\"(?:11|[89]\\\\d\\\\d)\\\\d{8}|[2368]\\\\d{9}\",[10,11],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2-$3\",[\"2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])\",\"2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"1\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[23]\"],\"0$1\",1],[\"(\\\\d)(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9(?:2[2-469]|3[3-578])\",\"9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))\",\"9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 15-$3-$4\",[\"91\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9\"],\"0$1\",0,\"$1 $2 $3-$4\"]],\"0\",0,\"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?\",\"9$1\"],\"AS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|684|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([267]\\\\d{6})$\",\"684$1\",0,\"684\"],\"AT\":[\"43\",\"00\",\"1\\\\d{3,12}|2\\\\d{6,12}|43(?:(?:0\\\\d|5[02-9])\\\\d{3,9}|2\\\\d{4,5}|[3467]\\\\d{4}|8\\\\d{4,6}|9\\\\d{4,7})|5\\\\d{4,12}|8\\\\d{7,12}|9\\\\d{8,12}|(?:[367]\\\\d|4[0-24-9])\\\\d{4,11}\",[4,5,6,7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3,12})\",\"$1 $2\",[\"1(?:11|[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})\",\"$1 $2\",[\"517\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"5[079]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,10})\",\"$1 $2\",[\"(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,9})\",\"$1 $2\",[\"[2-467]|5[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,7})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AU\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{7}(?:\\\\d(?:\\\\d{2})?)?|8[0-24-9]\\\\d{7})|[2-478]\\\\d{8}|1\\\\d{4,7}\",[5,6,7,8,9,10,12],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"16\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"16\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"14|4\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[2378]\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:30|[89])\"]]],\"0\",0,\"0|(183[12])\",0,0,0,[[\"(?:(?:2(?:[0-26-9]\\\\d|3[0-8]|4[02-9]|5[0135-9])|3(?:[0-3589]\\\\d|4[0-578]|6[1-9]|7[0-35-9])|7(?:[013-57-9]\\\\d|2[0-8]))\\\\d{3}|8(?:51(?:0(?:0[03-9]|[12479]\\\\d|3[2-9]|5[0-8]|6[1-9]|8[0-7])|1(?:[0235689]\\\\d|1[0-69]|4[0-589]|7[0-47-9])|2(?:0[0-79]|[18][13579]|2[14-9]|3[0-46-9]|[4-6]\\\\d|7[89]|9[0-4]))|(?:6[0-8]|[78]\\\\d)\\\\d{3}|9(?:[02-9]\\\\d{3}|1(?:(?:[0-58]\\\\d|6[0135-9])\\\\d|7(?:0[0-24-9]|[1-9]\\\\d)|9(?:[0-46-9]\\\\d|5[0-79])))))\\\\d{3}\",[9]],[\"4(?:83[0-38]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,[\"163\\\\d{2,6}\",[5,6,7,8,9]],[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"AW\":[\"297\",\"00\",\"(?:[25-79]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[25-9]\"]]]],\"AX\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"2\\\\d{4,9}|35\\\\d{4,5}|(?:60\\\\d\\\\d|800)\\\\d{4,6}|7\\\\d{5,11}|(?:[14]\\\\d|3[0-46-9]|50)\\\\d{4,8}\",[5,6,7,8,9,10,11,12],0,\"0\",0,0,0,0,\"18\",0,\"00\"],\"AZ\":[\"994\",\"00\",\"365\\\\d{6}|(?:[124579]\\\\d|60|88)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[28]|2|365|46\",\"1[28]|2|365[45]|46\",\"1[28]|2|365(?:4|5[02])|46\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[13-9]\"],\"0$1\"]],\"0\"],\"BA\":[\"387\",\"00\",\"6\\\\d{8}|(?:[35689]\\\\d|49|70)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[1-3]|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2-$3\",[\"[3-5]|6[56]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\"]],\"0\"],\"BB\":[\"1\",\"011\",\"(?:246|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"246$1\",0,\"246\"],\"BD\":[\"880\",\"00\",\"[1-469]\\\\d{9}|8[0-79]\\\\d{7,8}|[2-79]\\\\d{8}|[2-9]\\\\d{7}|[3-9]\\\\d{6}|[57-9]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1-$2\",[\"31[5-8]|[459]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1-$2\",[\"3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,6})\",\"$1-$2\",[\"[13-9]|22\"],\"0$1\"],[\"(\\\\d)(\\\\d{7,8})\",\"$1-$2\",[\"2\"],\"0$1\"]],\"0\"],\"BE\":[\"32\",\"00\",\"4\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:80|9)0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[239]|4[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[15-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4\"],\"0$1\"]],\"0\"],\"BF\":[\"226\",\"00\",\"[025-7]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[025-7]\"]]]],\"BG\":[\"359\",\"00\",\"[2-7]\\\\d{6,7}|[89]\\\\d{6,8}|2\\\\d{5}\",[6,7,8,9],[[\"(\\\\d)(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"43[1-6]|70[1-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:70|8)0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"43[1-7]|7\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[48]|9[08]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"BH\":[\"973\",\"00\",\"[136-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[13679]|8[047]\"]]]],\"BI\":[\"257\",\"00\",\"(?:[267]\\\\d|31)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2367]\"]]]],\"BJ\":[\"229\",\"00\",\"(?:[25689]\\\\d|40)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-689]\"]]]],\"BL\":[\"590\",\"00\",\"(?:590|(?:69|80)\\\\d|976)\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:2[7-9]|5[12]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"976[01]\\\\d{5}\"]]],\"BM\":[\"1\",\"011\",\"(?:441|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-8]\\\\d{6})$\",\"441$1\",0,\"441\"],\"BN\":[\"673\",\"00\",\"[2-578]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-578]\"]]]],\"BO\":[\"591\",\"00(?:1\\\\d)?\",\"(?:[2-467]\\\\d\\\\d|8001)\\\\d{5}\",[8,9],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[23]|4[46]\"]],[\"(\\\\d{8})\",\"$1\",[\"[67]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,\"0(1\\\\d)?\"],\"BQ\":[\"599\",\"00\",\"(?:[34]1|7\\\\d)\\\\d{5}\",[7],0,0,0,0,0,0,\"[347]\"],\"BR\":[\"55\",\"00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)\",\"(?:[1-46-9]\\\\d\\\\d|5(?:[0-46-9]\\\\d|5[0-24679]))\\\\d{8}|[1-9]\\\\d{9}|[3589]\\\\d{8}|[34]\\\\d{7}\",[8,9,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"300|4(?:0[02]|37)\",\"4(?:02|37)0|[34]00\"]],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:[358]|90)0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1 $2-$3\",[\"[16][1-9]|[2-57-9]\"],\"($1)\"]],\"0\",0,\"(?:0|90)(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\\\d{10,11}))?\",\"$2\"],\"BS\":[\"1\",\"011\",\"(?:242|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([3-8]\\\\d{6})$\",\"242$1\",0,\"242\"],\"BT\":[\"975\",\"00\",\"[17]\\\\d{7}|[2-8]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-68]|7[246]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[67]|7\"]]]],\"BW\":[\"267\",\"00\",\"(?:0800|(?:[37]|800)\\\\d)\\\\d{6}|(?:[2-6]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[24-6]|3[15-79]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"BY\":[\"375\",\"810\",\"(?:[12]\\\\d|33|44|902)\\\\d{7}|8(?:0[0-79]\\\\d{5,7}|[1-7]\\\\d{9})|8(?:1[0-489]|[5-79]\\\\d)\\\\d{7}|8[1-79]\\\\d{6,7}|8[0-79]\\\\d{5}|8\\\\d{5}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"800\"],\"8 $1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,4})\",\"$1 $2 $3\",[\"800\"],\"8 $1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{3})\",\"$1 $2-$3\",[\"1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])\",\"1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"1(?:[56]|7[467])|2[1-3]\"],\"8 0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-4]\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"8 $1\"]],\"8\",0,\"0|80?\",0,0,0,0,\"8~10\"],\"BZ\":[\"501\",\"00\",\"(?:0800\\\\d|[2-8])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-8]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"0\"]]]],\"CA\":[\"1\",\"011\",\"(?:[2-8]\\\\d|90)\\\\d{8}\",[10],0,\"1\",0,0,0,0,0,[[\"(?:2(?:04|[23]6|[48]9|50|63)|3(?:06|43|6[578])|4(?:03|1[68]|3[178]|50|68|74)|5(?:06|1[49]|48|79|8[147])|6(?:04|13|39|47|72)|7(?:0[59]|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|(?:5(?:00|2[125-7]|33|44|66|77|88)|622)[2-9]\\\\d{6}\"],0,0,0,[\"600[2-9]\\\\d{6}\"]]],\"CC\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"0|([59]\\\\d{7})$\",\"8$1\",0,0,[[\"8(?:51(?:0(?:02|31|60|89)|1(?:18|76)|223)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\\\d|70[23]|959))\\\\d{3}\",[9]],[\"4(?:83[0-38]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CD\":[\"243\",\"00\",\"[189]\\\\d{8}|[1-68]\\\\d{6}\",[7,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[1-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"CF\":[\"236\",\"00\",\"(?:[27]\\\\d{3}|8776)\\\\d{4}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[278]\"]]]],\"CG\":[\"242\",\"00\",\"222\\\\d{6}|(?:0\\\\d|80)\\\\d{7}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[02]\"]]]],\"CH\":[\"41\",\"00\",\"8\\\\d{11}|[2-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8[047]|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]|81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"8\"],\"0$1\"]],\"0\"],\"CI\":[\"225\",\"00\",\"[02]\\\\d{9}\",[10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d)(\\\\d{5})\",\"$1 $2 $3 $4\",[\"2\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"0\"]]]],\"CK\":[\"682\",\"00\",\"[2-578]\\\\d{4}\",[5],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"[2-578]\"]]]],\"CL\":[\"56\",\"(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0\",\"12300\\\\d{6}|6\\\\d{9,10}|[2-9]\\\\d{8}\",[9,10,11],[[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"219\",\"2196\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[1-36]\"],\"($1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"9[2-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"60|8\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"60\"]]]],\"CM\":[\"237\",\"00\",\"[26]\\\\d{8}|88\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"88\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[26]|88\"]]]],\"CN\":[\"86\",\"00|1(?:[12]\\\\d|79)\\\\d\\\\d00\",\"1[127]\\\\d{8,9}|2\\\\d{9}(?:\\\\d{2})?|[12]\\\\d{6,7}|86\\\\d{6}|(?:1[03-689]\\\\d|6)\\\\d{7,9}|(?:[3-579]\\\\d|8[0-57-9])\\\\d{6,9}\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5,6})\",\"$1 $2\",[\"(?:10|2[0-57-9])[19]\",\"(?:10|2[0-57-9])(?:10|9[56])\",\"(?:10|2[0-57-9])(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]\",\"(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))[19]\",\"85[23](?:10|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:10|9[56])\",\"85[23](?:100|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:4|80)0\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|2(?:[02-57-9]|1[1-9])\",\"10|2(?:[02-57-9]|1[1-9])\",\"10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-578]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"1[3-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"[12]\"],\"0$1\",1]],\"0\",0,\"0|(1(?:[12]\\\\d|79)\\\\d\\\\d)\",0,0,0,0,\"00\"],\"CO\":[\"57\",\"00(?:4(?:[14]4|56)|[579])\",\"(?:(?:1\\\\d|[36])\\\\d{3}|9101)\\\\d{6}|[124-8]\\\\d{7}\",[8,10,11],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[146][2-9]|[2578]\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"6\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"[39]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{7})\",\"$1-$2-$3\",[\"1\"],\"0$1\",0,\"$1 $2 $3\"]],\"0\",0,\"0([3579]|4(?:[14]4|56))?\"],\"CR\":[\"506\",\"00\",\"(?:8\\\\d|90)\\\\d{8}|(?:[24-8]\\\\d{3}|3005)\\\\d{4}\",[8,10],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[3-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[89]\"]]],0,0,\"(19(?:0[0-2468]|1[09]|20|66|77|99))\"],\"CU\":[\"53\",\"119\",\"[27]\\\\d{6,7}|[34]\\\\d{5,7}|(?:5|8\\\\d\\\\d)\\\\d{7}\",[6,7,8,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"2[1-4]|[34]\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{6,7})\",\"$1 $2\",[\"7\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"8\"],\"0$1\"]],\"0\"],\"CV\":[\"238\",\"0\",\"(?:[2-59]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2-589]\"]]]],\"CW\":[\"599\",\"00\",\"(?:[34]1|60|(?:7|9\\\\d)\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[3467]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9[4-8]\"]]],0,0,0,0,0,\"[69]\"],\"CX\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"0|([59]\\\\d{7})$\",\"8$1\",0,0,[[\"8(?:51(?:0(?:01|30|59|88)|1(?:17|46|75)|2(?:22|35))|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\\\d|7(?:0[01]|1[0-2])|958))\\\\d{3}\",[9]],[\"4(?:83[0-38]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CY\":[\"357\",\"00\",\"(?:[279]\\\\d|[58]0)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[257-9]\"]]]],\"CZ\":[\"420\",\"00\",\"(?:[2-578]\\\\d|60)\\\\d{7}|9\\\\d{8,11}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]|9[015-7]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"96\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]]],\"DE\":[\"49\",\"00\",\"[2579]\\\\d{5,14}|49(?:[34]0|69|8\\\\d)\\\\d\\\\d?|49(?:37|49|60|7[089]|9\\\\d)\\\\d{1,3}|49(?:1\\\\d|2[02-9]|3[2-689]|7[1-7])\\\\d{1,8}|(?:1|[368]\\\\d|4[0-8])\\\\d{3,13}|49(?:[05]\\\\d|[23]1|[46][1-8])\\\\d{1,9}\",[4,5,6,7,8,9,10,11,12,13,14,15],[[\"(\\\\d{2})(\\\\d{3,13})\",\"$1 $2\",[\"3[02]|40|[68]9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,12})\",\"$1 $2\",[\"2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\",\"2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2,11})\",\"$1 $2\",[\"[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]\",\"[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"138\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{2,10})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,11})\",\"$1 $2\",[\"181\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{4,10})\",\"$1 $2 $3\",[\"1(?:3|80)|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"1[67]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,12})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"185\",\"1850\",\"18500\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"18[68]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"15[0568]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"15[1279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{8})\",\"$1 $2\",[\"18\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{7,8})\",\"$1 $2 $3\",[\"1(?:6[023]|7)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{7})\",\"$1 $2 $3\",[\"15[279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{8})\",\"$1 $2 $3\",[\"15\"],\"0$1\"]],\"0\"],\"DJ\":[\"253\",\"00\",\"(?:2\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[27]\"]]]],\"DK\":[\"45\",\"00\",\"[2-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-9]\"]]]],\"DM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|767|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"767$1\",0,\"767\"],\"DO\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"8001|8[024]9\"],\"DZ\":[\"213\",\"00\",\"(?:[1-4]|[5-79]\\\\d|80)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-8]\"],\"0$1\"]],\"0\"],\"EC\":[\"593\",\"00\",\"1\\\\d{9,10}|(?:[2-7]|9\\\\d)\\\\d{7}\",[8,9,10,11],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[2-7]\"],\"(0$1)\",0,\"$1-$2-$3\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"EE\":[\"372\",\"00\",\"8\\\\d{9}|[4578]\\\\d{7}|(?:[3-8]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88\",\"[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88\"]],[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[45]|8(?:00|[1-49])\",\"[45]|8(?:00[1-9]|[1-49])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"EG\":[\"20\",\"00\",\"[189]\\\\d{8,9}|[24-6]\\\\d{8}|[135]\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{7,8})\",\"$1 $2\",[\"[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,7})\",\"$1 $2\",[\"1[35]|[4-6]|8[2468]|9[235-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[189]\"],\"0$1\"]],\"0\"],\"EH\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],0,\"0\",0,0,0,0,\"528[89]\"],\"ER\":[\"291\",\"00\",\"[178]\\\\d{6}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[178]\"],\"0$1\"]],\"0\"],\"ES\":[\"34\",\"00\",\"[5-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]00\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-9]\"]]]],\"ET\":[\"251\",\"00\",\"(?:11|[2-59]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-59]\"],\"0$1\"]],\"0\"],\"FI\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"[1-35689]\\\\d{4}|7\\\\d{10,11}|(?:[124-7]\\\\d|3[0-46-9])\\\\d{8}|[1-9]\\\\d{5,8}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d)(\\\\d{4,9})\",\"$1 $2\",[\"[2568][1-8]|3(?:0[1-9]|[1-9])|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[12]00|[368]|70[07-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,8})\",\"$1 $2\",[\"[1245]|7[135]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,10})\",\"$1 $2\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,\"1[03-79]|[2-9]\",0,\"00\"],\"FJ\":[\"679\",\"0(?:0|52)\",\"45\\\\d{5}|(?:0800\\\\d|[235-9])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[235-9]|45\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]]],0,0,0,0,0,0,0,\"00\"],\"FK\":[\"500\",\"00\",\"[2-7]\\\\d{4}\",[5]],\"FM\":[\"691\",\"00\",\"(?:[39]\\\\d\\\\d|820)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[389]\"]]]],\"FO\":[\"298\",\"00\",\"[2-9]\\\\d{5}\",[6],[[\"(\\\\d{6})\",\"$1\",[\"[2-9]\"]]],0,0,\"(10(?:01|[12]0|88))\"],\"FR\":[\"33\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0 $1\"],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[1-79]\"],\"0$1\"]],\"0\"],\"GA\":[\"241\",\"00\",\"(?:[067]\\\\d|11)\\\\d{6}|[2-7]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"11|[67]\"],\"0$1\"]],0,0,\"0(11\\\\d{6}|60\\\\d{6}|61\\\\d{6}|6[256]\\\\d{6}|7[467]\\\\d{6})\",\"$1\"],\"GB\":[\"44\",\"00\",\"[1-357-9]\\\\d{9}|[18]\\\\d{8}|8\\\\d{6}\",[7,9,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"800\",\"8001\",\"80011\",\"800111\",\"8001111\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"845\",\"8454\",\"84546\",\"845464\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"1(?:38|5[23]|69|76|94)\",\"1(?:(?:38|69)7|5(?:24|39)|768|946)\",\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"1(?:[2-69][02-9]|[78])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[25]|7(?:0|6[02-9])\",\"[25]|7(?:0|6(?:[03-9]|2[356]))\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1389]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:1(?:3(?:[0-58]\\\\d\\\\d|73[0235])|4(?:[0-5]\\\\d\\\\d|69[7-9]|70[0359])|(?:5[0-26-9]|[78][0-49])\\\\d\\\\d|6(?:[0-4]\\\\d\\\\d|50[0-24-69]))|2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\\\d)\\\\d\\\\d|1(?:[0-7]\\\\d\\\\d|8(?:[02]\\\\d|1[0-27-9])))|(?:3(?:0\\\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\\\d\\\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\\\d{3})\\\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\\\d)|76\\\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\\\d|7[4-79])|295[5-7]|35[34]\\\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\\\d{3}\",[9,10]],[\"7(?:457[0-57-9]|700[01]|911[028])\\\\d{5}|7(?:[1-3]\\\\d\\\\d|4(?:[0-46-9]\\\\d|5[0-689])|5(?:0[0-8]|[13-9]\\\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\\\d|8[02-9]|9[0-689])|8(?:[014-9]\\\\d|[23][0-8])|9(?:[024-9]\\\\d|1[02-9]|3[0-689]))\\\\d{6}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[2-49]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-2]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]],0,\" x\"],\"GD\":[\"1\",\"011\",\"(?:473|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"473$1\",0,\"473\"],\"GE\":[\"995\",\"00\",\"(?:[3-57]\\\\d\\\\d|800)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"32\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[57]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[348]\"],\"0$1\"]],\"0\"],\"GF\":[\"594\",\"00\",\"(?:[56]94|80\\\\d|976)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"GG\":[\"44\",\"00\",\"(?:1481|[357-9]\\\\d{3})\\\\d{6}|8\\\\d{6}(?:\\\\d{2})?\",[7,9,10],0,\"0\",0,\"0|([25-9]\\\\d{5})$\",\"1481$1\",0,0,[[\"1481[25-9]\\\\d{5}\",[10]],[\"7(?:(?:781|839)\\\\d|911[17])\\\\d{5}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[0-3]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-2]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]]],\"GH\":[\"233\",\"00\",\"(?:[235]\\\\d{3}|800)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[235]\"],\"0$1\"]],\"0\"],\"GI\":[\"350\",\"00\",\"(?:[25]\\\\d\\\\d|606)\\\\d{5}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2\"]]]],\"GL\":[\"299\",\"00\",\"(?:19|[2-689]\\\\d|70)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"19|[2-9]\"]]]],\"GM\":[\"220\",\"00\",\"[2-9]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"GN\":[\"224\",\"00\",\"722\\\\d{6}|(?:3|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"3\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[67]\"]]]],\"GP\":[\"590\",\"00\",\"(?:590|(?:69|80)\\\\d|976)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"590(?:0[1-68]|[14][0-24-9]|2[0-68]|3[1289]|5[3-579]|6[0189]|7[08]|8[0-689]|9\\\\d)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"976[01]\\\\d{5}\"]]],\"GQ\":[\"240\",\"00\",\"222\\\\d{6}|(?:3\\\\d|55|[89]0)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235]\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[89]\"]]]],\"GR\":[\"30\",\"00\",\"5005000\\\\d{3}|8\\\\d{9,11}|(?:[269]\\\\d|70)\\\\d{8}\",[10,11,12],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"21|7\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2689]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{5})\",\"$1 $2 $3\",[\"8\"]]]],\"GT\":[\"502\",\"00\",\"(?:1\\\\d{3}|[2-7])\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"GU\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|671|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([3-9]\\\\d{6})$\",\"671$1\",0,\"671\"],\"GW\":[\"245\",\"00\",\"[49]\\\\d{8}|4\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"40\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"]]]],\"GY\":[\"592\",\"001\",\"9008\\\\d{3}|(?:[2-467]\\\\d\\\\d|862)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46-9]\"]]]],\"HK\":[\"852\",\"00(?:30|5[09]|[126-9]?)\",\"8[0-46-9]\\\\d{6,7}|9\\\\d{4,7}|(?:[2-7]|9\\\\d{3})\\\\d{7}\",[5,6,7,8,9,11],[[\"(\\\\d{3})(\\\\d{2,5})\",\"$1 $2\",[\"900\",\"9003\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[1-4]|9(?:0[1-9]|[1-8])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,0,\"00\"],\"HN\":[\"504\",\"00\",\"8\\\\d{10}|[237-9]\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[237-9]\"]]]],\"HR\":[\"385\",\"00\",\"(?:[24-69]\\\\d|3[0-79])\\\\d{7}|80\\\\d{5,7}|[1-79]\\\\d{7}|6\\\\d{5,6}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"6[01]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-5]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"HT\":[\"509\",\"00\",\"[2-489]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-489]\"]]]],\"HU\":[\"36\",\"00\",\"[235-7]\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"06 $1\"]],\"06\"],\"ID\":[\"62\",\"00[89]\",\"(?:(?:00[1-9]|8\\\\d)\\\\d{4}|[1-36])\\\\d{6}|00\\\\d{10}|[1-9]\\\\d{8,10}|[2-9]\\\\d{7}\",[7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"15\"]],[\"(\\\\d{2})(\\\\d{5,9})\",\"$1 $2\",[\"2[124]|[36]1\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,7})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,8})\",\"$1 $2\",[\"[2-79]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{3})\",\"$1-$2-$3\",[\"8[1-35-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6,8})\",\"$1 $2\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"804\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"80\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"]],\"0\"],\"IE\":[\"353\",\"00\",\"(?:1\\\\d|[2569])\\\\d{6,8}|4\\\\d{6,9}|7\\\\d{8}|8\\\\d{8,9}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"2[24-9]|47|58|6[237-9]|9[35-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[45]0\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2569]|4[1-69]|7[14]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"81\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"IL\":[\"972\",\"0(?:0|1[2-9])\",\"1\\\\d{6}(?:\\\\d{3,5})?|[57]\\\\d{8}|[1-489]\\\\d{7}\",[7,8,9,10,11,12],[[\"(\\\\d{4})(\\\\d{3})\",\"$1-$2\",[\"125\"]],[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"121\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[2-489]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"12\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1-$2\",[\"159\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"1[7-9]\"]],[\"(\\\\d{3})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3-$4\",[\"15\"]]],\"0\"],\"IM\":[\"44\",\"00\",\"1624\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"0|([25-8]\\\\d{5})$\",\"1624$1\",0,\"74576|(?:16|7[56])24\"],\"IN\":[\"91\",\"00\",\"(?:000800|[2-9]\\\\d\\\\d)\\\\d{7}|1\\\\d{7,12}\",[8,9,10,11,12,13],[[\"(\\\\d{8})\",\"$1\",[\"5(?:0|2[23]|3[03]|[67]1|88)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)\"],0,1],[\"(\\\\d{4})(\\\\d{4,5})\",\"$1 $2\",[\"180\",\"1800\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"140\"],0,1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"11|2[02]|33|4[04]|79[1-7]|80[2-46]\",\"11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])\",\"11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807\",\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]\",\"1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\\\d|7(?:1(?:[013-8]\\\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]))[2-7]\"],\"0$1\",1],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"[6-9]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{2,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:6|8[06])\",\"1(?:6|8[06]0)\"],0,1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"18\"],0,1]],\"0\"],\"IO\":[\"246\",\"00\",\"3\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"3\"]]]],\"IQ\":[\"964\",\"00\",\"(?:1|7\\\\d\\\\d)\\\\d{7}|[2-6]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"IR\":[\"98\",\"00\",\"[1-9]\\\\d{9}|(?:[1-8]\\\\d\\\\d|9)\\\\d{3,4}\",[4,5,6,7,10],[[\"(\\\\d{4,5})\",\"$1\",[\"96\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,5})\",\"$1 $2\",[\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-8]\"],\"0$1\"]],\"0\"],\"IS\":[\"354\",\"00|1(?:0(?:01|[12]0)|100)\",\"(?:38\\\\d|[4-9])\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,0,\"00\"],\"IT\":[\"39\",\"00\",\"0\\\\d{5,10}|1\\\\d{8,10}|3(?:[0-8]\\\\d{7,10}|9\\\\d{7,8})|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?\",[6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"0[26]\"]],[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"0[13-57-9][0159]|8(?:03|4[17]|9[2-5])\",\"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|3[04]|[45][0-4]))\"]],[\"(\\\\d{4})(\\\\d{2,6})\",\"$1 $2\",[\"0(?:[13-579][2-46-8]|8[236-8])\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"894\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[26]|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1(?:44|[679])|[38]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[13-57-9][0159]|14\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{5})\",\"$1 $2 $3\",[\"0[26]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,[[\"0669[0-79]\\\\d{1,6}|0(?:1(?:[0159]\\\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\\\d\\\\d|3(?:[0159]\\\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\\\d|6[0-8])|7(?:[0159]\\\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\\\d{2,7}\"],[\"3[1-9]\\\\d{8}|3[2-9]\\\\d{7}\",[9,10]],[\"80(?:0\\\\d{3}|3)\\\\d{3}\",[6,9]],[\"(?:0878\\\\d{3}|89(?:2\\\\d|3[04]|4(?:[0-4]|[5-9]\\\\d\\\\d)|5[0-4]))\\\\d\\\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],0,0,0,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\",[6,9]]]],\"JE\":[\"44\",\"00\",\"1534\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"0|([0-24-8]\\\\d{5})$\",\"1534$1\",0,0,[[\"1534[0-24-8]\\\\d{5}\"],[\"7(?:(?:(?:50|82)9|937)\\\\d|7(?:00[378]|97[7-9]))\\\\d{5}\"],[\"80(?:07(?:35|81)|8901)\\\\d{4}\"],[\"(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\\\d{4}\"],[\"701511\\\\d{4}\"],0,[\"(?:3(?:0(?:07(?:35|81)|8901)|3\\\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\\\d{4})\\\\d{4}\"],[\"76(?:464|652)\\\\d{5}|76(?:0[0-2]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\"],[\"56\\\\d{8}\"]]],\"JM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|658|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"658|876\"],\"JO\":[\"962\",\"00\",\"(?:(?:[2689]|7\\\\d)\\\\d|32|53)\\\\d{6}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2356]|87\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"70\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"JP\":[\"81\",\"010\",\"00[1-9]\\\\d{6,14}|[257-9]\\\\d{9}|(?:00|[1-9]\\\\d\\\\d)\\\\d{6}\",[8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"(?:12|57|99)0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:49|80|9[16])\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9]|636)|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9]|636[457-9])|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[36]|4(?:2[09]|7[01])\",\"[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[27-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|51|6(?:[0-24]|36|5[0-3589]|72|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3\",[\"[14]|[289][2-9]|5[3-9]|7[2-4679]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"800\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[257-9]\"],\"0$1\"]],\"0\"],\"KE\":[\"254\",\"000\",\"(?:[17]\\\\d\\\\d|900)\\\\d{6}|(?:2|80)0\\\\d{6,7}|[4-6]\\\\d{6,8}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"[24-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[17]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"KG\":[\"996\",\"00\",\"8\\\\d{9}|(?:[235-8]\\\\d|99)\\\\d{7}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3(?:1[346]|[24-79])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235-79]|88\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d)(\\\\d{2,3})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"KH\":[\"855\",\"00[14-9]\",\"1\\\\d{9}|[1-9]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"KI\":[\"686\",\"00\",\"(?:[37]\\\\d|6[0-79])\\\\d{6}|(?:[2-48]\\\\d|50)\\\\d{3}\",[5,8],0,\"0\"],\"KM\":[\"269\",\"00\",\"[3478]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[3478]\"]]]],\"KN\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"869$1\",0,\"869\"],\"KP\":[\"850\",\"00|99\",\"85\\\\d{6}|(?:19\\\\d|[2-7])\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"KR\":[\"82\",\"00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))\",\"00[1-9]\\\\d{8,11}|(?:[12]|5\\\\d{3})\\\\d{7}|[13-6]\\\\d{9}|(?:[1-6]\\\\d|80)\\\\d{7}|[3-6]\\\\d{4,5}|(?:00|7)0\\\\d{8}\",[5,6,8,9,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1-$2\",[\"(?:3[1-3]|[46][1-4]|5[1-5])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"1\"]],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"[1346]|5[1-5]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1-$2-$3\",[\"5\"],\"0$1\"]],\"0\",0,\"0(8(?:[1-46-8]|5\\\\d\\\\d))?\"],\"KW\":[\"965\",\"00\",\"18\\\\d{5}|(?:[2569]\\\\d|41)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[169]|2(?:[235]|4[1-35-9])|52\"]],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[245]\"]]]],\"KY\":[\"1\",\"011\",\"(?:345|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"345$1\",0,\"345\"],\"KZ\":[\"7\",\"810\",\"(?:33622|8\\\\d{8})\\\\d{5}|[78]\\\\d{9}\",[10,14],0,\"8\",0,0,0,0,\"33|7\",0,\"8~10\"],\"LA\":[\"856\",\"00\",\"[23]\\\\d{9}|3\\\\d{8}|(?:[235-8]\\\\d|41)\\\\d{6}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2[13]|3[14]|[4-8]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"30[013-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\"],\"LB\":[\"961\",\"00\",\"[27-9]\\\\d{7}|[13-9]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27-9]\"]]],\"0\"],\"LC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|758|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-8]\\\\d{6})$\",\"758$1\",0,\"758\"],\"LI\":[\"423\",\"00\",\"[68]\\\\d{8}|(?:[2378]\\\\d|90)\\\\d{5}\",[7,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2379]|8(?:0[09]|7)\",\"[2379]|8(?:0(?:02|9)|7)\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"69\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],\"0\",0,\"0|(1001)\"],\"LK\":[\"94\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[1-689]\"],\"0$1\"]],\"0\"],\"LR\":[\"231\",\"00\",\"(?:2|33|5\\\\d|77|88)\\\\d{7}|[4-6]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[4-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\"]],\"0\"],\"LS\":[\"266\",\"00\",\"(?:[256]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2568]\"]]]],\"LT\":[\"370\",\"00\",\"(?:[3469]\\\\d|52|[78]0)\\\\d{6}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"52[0-7]\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"8 $1\",1],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"37|4(?:[15]|6[1-8])\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"(8-$1)\",1]],\"8\",0,\"[08]\"],\"LU\":[\"352\",\"00\",\"35[013-9]\\\\d{4,8}|6\\\\d{8}|35\\\\d{2,4}|(?:[2457-9]\\\\d|3[0-46-9])\\\\d{2,9}\",[4,5,6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"20[2-689]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"80[01]|90[015]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"20\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4 $5\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,5})\",\"$1 $2 $3 $4\",[\"[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]\"]]],0,0,\"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\\\d)\"],\"LV\":[\"371\",\"00\",\"(?:[268]\\\\d|90)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[269]|8[01]\"]]]],\"LY\":[\"218\",\"00\",\"[2-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MA\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],[[\"(\\\\d{5})(\\\\d{4})\",\"$1-$2\",[\"5(?:29|38)\",\"5(?:29|38)[89]\",\"5(?:29|38)[89]0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5[45]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1-$2\",[\"5(?:2[2-489]|3[5-9]|9)|892\",\"5(?:2(?:[2-49]|8[235-9])|3[5-9]|9)|892\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"8\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1-$2\",[\"[5-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"5(?:29(?:[189][05]|2[29]|3[01])|38(?:8[057]|9[05]))\\\\d{4}|5(?:2(?:[0-25-7]\\\\d|3[1-578]|4[02-46-8]|8[0235-7]|90)|3(?:[0-47]\\\\d|5[02-9]|6[02-8]|80|9[3-9])|(?:4[067]|5[03])\\\\d)\\\\d{5}\"],[\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:[017]\\\\d|6[0-367]))\\\\d{6}\"],[\"80\\\\d{7}\"],[\"89\\\\d{7}\"],0,0,0,0,[\"592(?:4[0-2]|93)\\\\d{4}\"]]],\"MC\":[\"377\",\"00\",\"(?:[3489]|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[389]\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"6\"],\"0$1\"]],\"0\"],\"MD\":[\"373\",\"00\",\"(?:[235-7]\\\\d|[89]0)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"22|3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[25-7]\"],\"0$1\"]],\"0\"],\"ME\":[\"382\",\"00\",\"(?:20|[3-79]\\\\d)\\\\d{6}|80\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MF\":[\"590\",\"00\",\"(?:590|(?:69|80)\\\\d|976)\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"976[01]\\\\d{5}\"]]],\"MG\":[\"261\",\"00\",\"[23]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\",0,\"0|([24-9]\\\\d{6})$\",\"20$1\"],\"MH\":[\"692\",\"011\",\"329\\\\d{4}|(?:[256]\\\\d|45)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-6]\"]]],\"1\"],\"MK\":[\"389\",\"00\",\"[2-578]\\\\d{7}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2|34[47]|4(?:[37]7|5[47]|64)\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[347]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[58]\"],\"0$1\"]],\"0\"],\"ML\":[\"223\",\"00\",\"[24-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-9]\"]]]],\"MM\":[\"95\",\"00\",\"1\\\\d{5,7}|95\\\\d{6}|(?:[4-7]|9[0-46-9])\\\\d{6,8}|(?:2|8\\\\d)\\\\d{5,8}\",[6,7,8,9,10],[[\"(\\\\d)(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"16|2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[4-7]|8[1-35]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4,6})\",\"$1 $2 $3\",[\"9(?:2[0-4]|[35-9]|4[137-9])\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"92\"],\"0$1\"],[\"(\\\\d)(\\\\d{5})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"MN\":[\"976\",\"001\",\"[12]\\\\d{7,9}|[57-9]\\\\d{7}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[12]1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[57-9]\"]],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[12]2[1-3]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])\",\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"[12]\"],\"0$1\"]],\"0\"],\"MO\":[\"853\",\"00\",\"0800\\\\d{3}|(?:28|[68]\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[268]\"]]]],\"MP\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:67|90)0\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"670$1\",0,\"670\"],\"MQ\":[\"596\",\"00\",\"(?:69|80)\\\\d{7}|(?:59|97)6\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"MR\":[\"222\",\"00\",\"(?:[2-4]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-48]\"]]]],\"MS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|664|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([34]\\\\d{6})$\",\"664$1\",0,\"664\"],\"MT\":[\"356\",\"00\",\"3550\\\\d{4}|(?:[2579]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2357-9]\"]]]],\"MU\":[\"230\",\"0(?:0|[24-7]0|3[03])\",\"(?:5|8\\\\d\\\\d)\\\\d{7}|[2-468]\\\\d{6}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46]|8[013]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"5\"]],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"8\"]]],0,0,0,0,0,0,0,\"020\"],\"MV\":[\"960\",\"0(?:0|19)\",\"(?:800|9[0-57-9]\\\\d)\\\\d{7}|[34679]\\\\d{6}\",[7,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[3467]|9[13-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,0,\"00\"],\"MW\":[\"265\",\"00\",\"(?:[129]\\\\d|31|77|88)\\\\d{7}|1\\\\d{6}\",[7,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[137-9]\"],\"0$1\"]],\"0\"],\"MX\":[\"52\",\"0[09]\",\"1(?:(?:44|99)[1-9]|65[0-689])\\\\d{7}|(?:1(?:[017]\\\\d|[235][1-9]|4[0-35-9]|6[0-46-9]|8[1-79]|9[1-8])|[2-9]\\\\d)\\\\d{8}\",[10,11],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"33|5[56]|81\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-9]\"],0,1],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 $3 $4\",[\"1(?:33|5[56]|81)\"],0,1],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 $3 $4\",[\"1\"],0,1]],\"01\",0,\"0(?:[12]|4[45])|1\",0,0,0,0,\"00\"],\"MY\":[\"60\",\"00\",\"1\\\\d{8,9}|(?:3\\\\d|[4-9])\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"[4-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1-$2 $3\",[\"1(?:[02469]|[378][1-9])|8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"3\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3-$4\",[\"1[36-8]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"15\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"MZ\":[\"258\",\"00\",\"(?:2|8\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2|8[2-79]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"NA\":[\"264\",\"00\",\"[68]\\\\d{7,8}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"87\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"NC\":[\"687\",\"00\",\"(?:050|[2-57-9]\\\\d\\\\d)\\\\d{3}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1.$2.$3\",[\"[02-57-9]\"]]]],\"NE\":[\"227\",\"00\",\"[027-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"08\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[089]|2[013]|7[04]\"]]]],\"NF\":[\"672\",\"00\",\"[13]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"1[0-3]\"]],[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"[13]\"]]],0,0,\"([0-258]\\\\d{4})$\",\"3$1\"],\"NG\":[\"234\",\"009\",\"(?:[124-7]|9\\\\d{3})\\\\d{6}|[1-9]\\\\d{7}|[78]\\\\d{9,13}\",[7,8,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"78\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]|9(?:0[3-9]|[1-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-7]|8[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})(\\\\d{5,6})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"]],\"0\"],\"NI\":[\"505\",\"00\",\"(?:1800|[25-8]\\\\d{3})\\\\d{4}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[125-8]\"]]]],\"NL\":[\"31\",\"00\",\"(?:[124-7]\\\\d\\\\d|3(?:[02-9]\\\\d|1[0-8]))\\\\d{6}|8\\\\d{6,9}|9\\\\d{6,10}|1\\\\d{4,5}\",[5,6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{4,7})\",\"$1 $2\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"66\"],\"0$1\"],[\"(\\\\d)(\\\\d{8})\",\"$1 $2\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[16-8]|2[259]|3[124]|4[17-9]|5[124679]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-578]|91\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"NO\":[\"47\",\"00\",\"(?:0|[2-9]\\\\d{3})\\\\d{4}\",[5,8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[489]|59\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[235-7]\"]]],0,0,0,0,0,\"[02-689]|7[0-8]\"],\"NP\":[\"977\",\"00\",\"(?:1\\\\d|9)\\\\d{9}|[1-9]\\\\d{7}\",[8,10,11],[[\"(\\\\d)(\\\\d{7})\",\"$1-$2\",[\"1[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1-$2\",[\"1[01]|[2-8]|9(?:[1-579]|6[2-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"9\"]]],\"0\"],\"NR\":[\"674\",\"00\",\"(?:444|(?:55|8\\\\d)\\\\d|666)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-68]\"]]]],\"NU\":[\"683\",\"00\",\"(?:[47]|888\\\\d)\\\\d{3}\",[4,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8\"]]]],\"NZ\":[\"64\",\"0(?:0|161)\",\"[29]\\\\d{7,9}|50\\\\d{5}(?:\\\\d{2,3})?|6[0-35-9]\\\\d{6}|7\\\\d{7,8}|8\\\\d{4,9}|(?:11\\\\d|[34])\\\\d{7}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,8})\",\"$1 $2\",[\"8[1-579]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"50[036-8]|[89]0\",\"50(?:[0367]|88)|[89]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"24|[346]|7[2-57-9]|9[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:10|74)|[59]|80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1|2[028]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,5})\",\"$1 $2 $3\",[\"2(?:[169]|7[0-35-9])|7|86\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"00\"],\"OM\":[\"968\",\"00\",\"(?:1505|[279]\\\\d{3}|500)\\\\d{4}|800\\\\d{5,6}\",[7,8,9],[[\"(\\\\d{3})(\\\\d{4,6})\",\"$1 $2\",[\"[58]\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[179]\"]]]],\"PA\":[\"507\",\"00\",\"(?:00800|8\\\\d{3})\\\\d{6}|[68]\\\\d{7}|[1-57-9]\\\\d{6}\",[7,8,10,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[1-57-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[68]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]]],\"PE\":[\"51\",\"19(?:1[124]|77|90)00\",\"(?:[14-8]|9\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[4-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"]]],\"0\",0,0,0,0,0,0,0,\" Anexo \"],\"PF\":[\"689\",\"00\",\"4\\\\d{5}(?:\\\\d{2})?|8\\\\d{7,8}\",[6,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4|8[7-9]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]]],\"PG\":[\"675\",\"00|140[1-3]\",\"(?:180|[78]\\\\d{3})\\\\d{4}|(?:[2-589]\\\\d|64)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"18|[2-69]|85\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[78]\"]]],0,0,0,0,0,0,0,\"00\"],\"PH\":[\"63\",\"00\",\"(?:[2-7]|9\\\\d)\\\\d{8}|2\\\\d{5}|(?:1800|8)\\\\d{7,9}\",[6,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"2\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2\",\"3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"346|4(?:27|9[35])|883\",\"3469|4(?:279|9(?:30|56))|8834\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|8[2-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{4})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"1\"]]],\"0\"],\"PK\":[\"92\",\"00\",\"122\\\\d{6}|[24-8]\\\\d{10,11}|9(?:[013-9]\\\\d{8,10}|2(?:[01]\\\\d\\\\d|2(?:[06-8]\\\\d|1[01]))\\\\d{7})|(?:[2-8]\\\\d{3}|92(?:[0-7]\\\\d|8[1-9]))\\\\d{6}|[24-9]\\\\d{8}|[89]\\\\d{7}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,7})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{6,7})\",\"$1 $2\",[\"2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])\",\"9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{7,8})\",\"$1 $2\",[\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"58\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[24-9]\"],\"(0$1)\"]],\"0\"],\"PL\":[\"48\",\"00\",\"6\\\\d{5}(?:\\\\d{2})?|8\\\\d{9}|[1-9]\\\\d{6}(?:\\\\d{2})?\",[6,7,8,9,10],[[\"(\\\\d{5})\",\"$1\",[\"19\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"11|64\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1\",\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"64\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"21|39|45|5[0137]|6[0469]|7[02389]|8(?:0[14]|8)\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[2-8]|[2-7]|8[1-79]|9[145]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"8\"]]]],\"PM\":[\"508\",\"00\",\"(?:[45]|80\\\\d\\\\d)\\\\d{5}\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"PR\":[\"1\",\"011\",\"(?:[589]\\\\d\\\\d|787)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"787|939\"],\"PS\":[\"970\",\"00\",\"[2489]2\\\\d{6}|(?:1\\\\d|5)\\\\d{8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2489]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"PT\":[\"351\",\"00\",\"1693\\\\d{5}|(?:[26-9]\\\\d|30)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2[12]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"16|[236-9]\"]]]],\"PW\":[\"680\",\"01[12]\",\"(?:[24-8]\\\\d\\\\d|345|900)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"PY\":[\"595\",\"00\",\"59\\\\d{4,6}|9\\\\d{5,10}|(?:[2-46-8]\\\\d|5[0-8])\\\\d{4,7}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"[2-9]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{4,5})\",\"$1 $2\",[\"2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"87\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"9(?:[5-79]|8[1-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"]]],\"0\"],\"QA\":[\"974\",\"00\",\"[2-7]\\\\d{7}|800\\\\d{4}(?:\\\\d{2})?|2\\\\d{6}\",[7,8,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"2[126]|8\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]]]],\"RE\":[\"262\",\"00\",\"9769\\\\d{5}|(?:26|[68]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2689]\"],\"0$1\"]],\"0\",0,0,0,0,\"26[23]|69|[89]\"],\"RO\":[\"40\",\"00\",\"(?:[2378]\\\\d|90)\\\\d{7}|[23]\\\\d{5}\",[6,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"2[3-6]\",\"2[3-6]\\\\d9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"219|31\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[237-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\" int \"],\"RS\":[\"381\",\"00\",\"38[02-9]\\\\d{6,9}|6\\\\d{7,9}|90\\\\d{4,8}|38\\\\d{5,6}|(?:7\\\\d\\\\d|800)\\\\d{3,9}|(?:[12]\\\\d|3[0-79])\\\\d{5,10}\",[6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3,9})\",\"$1 $2\",[\"(?:2[389]|39)0|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5,10})\",\"$1 $2\",[\"[1-36]\"],\"0$1\"]],\"0\"],\"RU\":[\"7\",\"810\",\"8\\\\d{13}|[347-9]\\\\d{9}\",[10,14],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-8]|2[1-9])\",\"7(?:1(?:[0-6]2|7|8[27])|2(?:1[23]|[2-9]2))\",\"7(?:1(?:[0-6]2|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2\"],\"8 ($1)\",1],[\"(\\\\d{5})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-68]|2[1-9])\",\"7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))\",\"7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[349]|8(?:[02-7]|1[1-8])\"],\"8 ($1)\",1],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"8\"],\"8 ($1)\"]],\"8\",0,0,0,0,\"3[04-689]|[489]\",0,\"8~10\"],\"RW\":[\"250\",\"00\",\"(?:06|[27]\\\\d\\\\d|[89]00)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"]]],\"0\"],\"SA\":[\"966\",\"00\",\"92\\\\d{7}|(?:[15]|8\\\\d)\\\\d{8}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\"],\"SB\":[\"677\",\"0[01]\",\"(?:[1-6]|[7-9]\\\\d\\\\d)\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7|8[4-9]|9(?:[1-8]|9[0-8])\"]]]],\"SC\":[\"248\",\"010|0[0-2]\",\"800\\\\d{4}|(?:[249]\\\\d|64)\\\\d{5}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[246]|9[57]\"]]],0,0,0,0,0,0,0,\"00\"],\"SD\":[\"249\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"SE\":[\"46\",\"00\",\"(?:[26]\\\\d\\\\d|9)\\\\d{9}|[1-9]\\\\d{8}|[1-689]\\\\d{7}|[1-4689]\\\\d{6}|2\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"20\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"9(?:00|39|44|9)\"],\"0$1\",0,\"$1 $2\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3\",[\"[12][136]|3[356]|4[0246]|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d)(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{3})\",\"$1-$2 $3\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"10|7\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1-$2 $3 $4\",[\"9\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4 $5\",[\"[26]\"],\"0$1\",0,\"$1 $2 $3 $4 $5\"]],\"0\"],\"SG\":[\"65\",\"0[0-3]\\\\d\",\"(?:(?:1\\\\d|8)\\\\d\\\\d|7000)\\\\d{7}|[3689]\\\\d{7}\",[8,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[369]|8(?:0[1-5]|[1-9])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"SH\":[\"290\",\"00\",\"(?:[256]\\\\d|8)\\\\d{3}\",[4,5],0,0,0,0,0,0,\"[256]\"],\"SI\":[\"386\",\"00|10(?:22|66|88|99)\",\"[1-7]\\\\d{7}|8\\\\d{4,7}|90\\\\d{4,6}\",[5,6,7,8],[[\"(\\\\d{2})(\\\\d{3,6})\",\"$1 $2\",[\"8[09]|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"59|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37][01]|4[0139]|51|6\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-57]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,0,\"00\"],\"SJ\":[\"47\",\"00\",\"0\\\\d{4}|(?:[489]\\\\d|[57]9)\\\\d{6}\",[5,8],0,0,0,0,0,0,\"79\"],\"SK\":[\"421\",\"00\",\"[2-689]\\\\d{8}|[2-59]\\\\d{6}|[2-5]\\\\d{5}\",[6,7,9],[[\"(\\\\d)(\\\\d{2})(\\\\d{3,4})\",\"$1 $2 $3\",[\"21\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-5][1-8]1\",\"[3-5][1-8]1[67]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[689]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"[3-5]\"],\"0$1\"]],\"0\"],\"SL\":[\"232\",\"00\",\"(?:[237-9]\\\\d|66)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[236-9]\"],\"(0$1)\"]],\"0\"],\"SM\":[\"378\",\"00\",\"(?:0549|[5-7]\\\\d)\\\\d{6}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"0\"]]],0,0,\"([89]\\\\d{5})$\",\"0549$1\"],\"SN\":[\"221\",\"00\",\"(?:[378]\\\\d|93)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[379]\"]]]],\"SO\":[\"252\",\"00\",\"[346-9]\\\\d{8}|[12679]\\\\d{7}|[1-5]\\\\d{6}|[1348]\\\\d{5}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"8[125]\"]],[\"(\\\\d{6})\",\"$1\",[\"[134]\"]],[\"(\\\\d)(\\\\d{6})\",\"$1 $2\",[\"[15]|2[0-79]|3[0-46-8]|4[0-7]\"]],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"24|[67]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[3478]|64|90\"]],[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"1|28|6(?:0[5-7]|[1-35-9])|9[2-9]\"]]],\"0\"],\"SR\":[\"597\",\"00\",\"(?:[2-5]|68|[78]\\\\d)\\\\d{5}\",[6,7],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"56\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1-$2\",[\"[2-5]\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[6-8]\"]]]],\"SS\":[\"211\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"ST\":[\"239\",\"00\",\"(?:22|9\\\\d)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[29]\"]]]],\"SV\":[\"503\",\"00\",\"[267]\\\\d{7}|[89]00\\\\d{4}(?:\\\\d{4})?\",[7,8,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[89]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[267]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]]],\"SX\":[\"1\",\"011\",\"7215\\\\d{6}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|(5\\\\d{6})$\",\"721$1\",0,\"721\"],\"SY\":[\"963\",\"00\",\"[1-39]\\\\d{8}|[1-5]\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-5]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\",1]],\"0\"],\"SZ\":[\"268\",\"00\",\"0800\\\\d{4}|(?:[237]\\\\d|900)\\\\d{6}\",[8,9],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[0237]\"]],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"9\"]]]],\"TA\":[\"290\",\"00\",\"8\\\\d{3}\",[4],0,0,0,0,0,0,\"8\"],\"TC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|649|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-479]\\\\d{6})$\",\"649$1\",0,\"649\"],\"TD\":[\"235\",\"00|16\",\"(?:22|[69]\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2679]\"]]],0,0,0,0,0,0,0,\"00\"],\"TG\":[\"228\",\"00\",\"[279]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[279]\"]]]],\"TH\":[\"66\",\"00[1-9]\",\"(?:001800|[2-57]|[689]\\\\d)\\\\d{7}|1\\\\d{7,9}\",[8,9,10,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[13-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"TJ\":[\"992\",\"810\",\"(?:00|[1-57-9]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{6})(\\\\d)(\\\\d{2})\",\"$1 $2 $3\",[\"331\",\"3317\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[34]7|91[78]\"]],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"3[1-5]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[0-57-9]\"]]],0,0,0,0,0,0,0,\"8~10\"],\"TK\":[\"690\",\"00\",\"[2-47]\\\\d{3,6}\",[4,5,6,7]],\"TL\":[\"670\",\"00\",\"7\\\\d{7}|(?:[2-47]\\\\d|[89]0)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-489]|70\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"7\"]]]],\"TM\":[\"993\",\"810\",\"[1-6]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"12\"],\"(8 $1)\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-5]\"],\"(8 $1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"6\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"TN\":[\"216\",\"00\",\"[2-57-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-57-9]\"]]]],\"TO\":[\"676\",\"00\",\"(?:0800|(?:[5-8]\\\\d\\\\d|999)\\\\d)\\\\d{3}|[2-8]\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1-$2\",[\"[2-4]|50|6[09]|7[0-24-69]|8[05]\"]],[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]]]],\"TR\":[\"90\",\"00\",\"4\\\\d{6}|8\\\\d{11,12}|(?:[2-58]\\\\d\\\\d|900)\\\\d{7}\",[7,10,12,13],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"512|8[01589]|90\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5(?:[0-59]|61)\",\"5(?:[0-59]|616)\",\"5(?:[0-59]|6161)\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24][1-8]|3[1-9]\"],\"(0$1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{6,7})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1]],\"0\"],\"TT\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-46-8]\\\\d{6})$\",\"868$1\",0,\"868\"],\"TV\":[\"688\",\"00\",\"(?:2|7\\\\d\\\\d|90)\\\\d{4}\",[5,6,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"TW\":[\"886\",\"0(?:0[25-79]|19)\",\"[2-689]\\\\d{8}|7\\\\d{9,10}|[2-8]\\\\d{7}|2\\\\d{6}\",[7,8,9,10,11],[[\"(\\\\d{2})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"202\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[258]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]\",\"[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\"#\"],\"TZ\":[\"255\",\"00[056]\",\"(?:[26-8]\\\\d|41|90)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[24]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"]],\"0\"],\"UA\":[\"380\",\"00\",\"[89]\\\\d{9}|[3-9]\\\\d{8}\",[9,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]\",\"6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[45][0-5]|5(?:0|6[37])|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]\",\"4[45][0-5]|5(?:0|6(?:3[14-7]|7))|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"0~0\"],\"UG\":[\"256\",\"00[057]\",\"800\\\\d{6}|(?:[29]0|[347]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"202\",\"2024\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[27-9]|4(?:6[45]|[7-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[34]\"],\"0$1\"]],\"0\"],\"US\":[\"1\",\"011\",\"[2-9]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",[\"[2-9]\"],0,1,\"$1-$2-$3\"]],\"1\",0,0,0,0,0,[[\"5(?:05(?:[2-57-9]\\\\d\\\\d|6(?:[0-35-9]\\\\d|44))|82(?:2(?:0[0-3]|[268]2)|3(?:0[02]|22|33)|4(?:00|4[24]|65|82)|5(?:00|29|58|83)|6(?:00|66|82)|7(?:58|77)|8(?:00|42|88)|9(?:00|9[89])))\\\\d{4}|(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[01356]|3[0-24679]|4[167]|5[12]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[023578]|58|6[349]|7[0589]|8[04])|5(?:0[1-47-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[0-5]|8[056])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[01679]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[0-59]|8[156])|8(?:0[1-68]|1[02-8]|2[08]|3[0-289]|4[03578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[0157-9]|5[12469]|7[0-389]|8[04-69]))[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-7]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"UY\":[\"598\",\"0(?:0|1[3-9]\\\\d)\",\"4\\\\d{9}|[1249]\\\\d{7}|(?:[49]\\\\d|80)\\\\d{5}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"405|8|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[124]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"00\",\" int. \"],\"UZ\":[\"998\",\"810\",\"(?:33|55|[679]\\\\d|88)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[35-9]\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"VA\":[\"39\",\"00\",\"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11],0,0,0,0,0,0,\"06698\"],\"VC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|784|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"784$1\",0,\"784\"],\"VE\":[\"58\",\"00\",\"[68]00\\\\d{7}|(?:[24]\\\\d|[59]0)\\\\d{8}\",[10],[[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"[24-689]\"],\"0$1\"]],\"0\"],\"VG\":[\"1\",\"011\",\"(?:284|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-578]\\\\d{6})$\",\"284$1\",0,\"284\"],\"VI\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:34|90)0\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"340$1\",0,\"340\"],\"VN\":[\"84\",\"00\",\"[12]\\\\d{9}|[135-9]\\\\d{8}|[16]\\\\d{7}|[16-8]\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"1\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[69]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[48]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\",1]],\"0\"],\"VU\":[\"678\",\"00\",\"[57-9]\\\\d{6}|(?:[238]\\\\d|48)\\\\d{3}\",[5,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[57-9]\"]]]],\"WF\":[\"681\",\"00\",\"(?:40|72)\\\\d{4}|8\\\\d{5}(?:\\\\d{3})?\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[478]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]]],\"WS\":[\"685\",\"0\",\"(?:[2-6]|8\\\\d{5})\\\\d{4}|[78]\\\\d{6}|[68]\\\\d{5}\",[5,6,7,10],[[\"(\\\\d{5})\",\"$1\",[\"[2-5]|6[1-9]\"]],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[68]\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"XK\":[\"383\",\"00\",\"[23]\\\\d{7,8}|(?:4\\\\d\\\\d|[89]00)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[23]\"],\"0$1\"]],\"0\"],\"YE\":[\"967\",\"00\",\"(?:1|7\\\\d)\\\\d{7}|[1-7]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-6]|7[24-68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"YT\":[\"262\",\"00\",\"80\\\\d{7}|(?:26|63)9\\\\d{6}\",[9],0,\"0\",0,0,0,0,\"269|63\"],\"ZA\":[\"27\",\"00\",\"[1-79]\\\\d{8}|8\\\\d{4,9}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"860\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"ZM\":[\"260\",\"00\",\"800\\\\d{6}|(?:21|63|[79]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[28]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[79]\"],\"0$1\"]],\"0\"],\"ZW\":[\"263\",\"00\",\"2(?:[0-57-9]\\\\d{6,8}|6[0-24-9]\\\\d{6,7})|[38]\\\\d{9}|[35-8]\\\\d{8}|[3-6]\\\\d{7}|[1-689]\\\\d{6}|[1-3569]\\\\d{5}|[1356]\\\\d{4}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{3,5})\",\"$1 $2\",[\"2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2\",\"2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)\",\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"29[013-9]|39|54\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,5})\",\"$1 $2\",[\"(?:25|54)8\",\"258|5483\"],\"0$1\"]],\"0\"]},\"nonGeographic\":{\"800\":[\"800\",0,\"(?:005|[1-9]\\\\d\\\\d)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"\\\\d\"]]],0,0,0,0,0,0,[0,0,[\"(?:005|[1-9]\\\\d\\\\d)\\\\d{5}\"]]],\"808\":[\"808\",0,\"[1-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[1-9]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,0,[\"[1-9]\\\\d{7}\"]]],\"870\":[\"870\",0,\"7\\\\d{11}|[35-7]\\\\d{8}\",[9,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[35-7]\"]]],0,0,0,0,0,0,[0,[\"(?:[356]|774[45])\\\\d{8}|7[6-8]\\\\d{7}\"]]],\"878\":[\"878\",0,\"10\\\\d{10}\",[12],[[\"(\\\\d{2})(\\\\d{5})(\\\\d{5})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"10\\\\d{10}\"]]],\"881\":[\"881\",0,\"[0-36-9]\\\\d{8}\",[9],[[\"(\\\\d)(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"[0-36-9]\"]]],0,0,0,0,0,0,[0,[\"[0-36-9]\\\\d{8}\"]]],\"882\":[\"882\",0,\"[13]\\\\d{6}(?:\\\\d{2,5})?|285\\\\d{9}|(?:[19]\\\\d|49)\\\\d{6}\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"16|342\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"4\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"3[23]\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"34[57]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"34\"]],[\"(\\\\d{2})(\\\\d{4,5})(\\\\d{5})\",\"$1 $2 $3\",[\"[1-3]\"]]],0,0,0,0,0,0,[0,[\"342\\\\d{4}|(?:337|49)\\\\d{6}|3(?:2|47|7\\\\d{3})\\\\d{7}\",[7,8,9,10,12]],0,0,0,0,0,0,[\"1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\\\d{4}|6\\\\d{5,10})|(?:(?:285\\\\d\\\\d|3(?:45|[69]\\\\d{3}))\\\\d|9[89])\\\\d{6}\"]]],\"883\":[\"883\",0,\"(?:210|370\\\\d\\\\d)\\\\d{7}|51\\\\d{7}(?:\\\\d{3})?\",[9,10,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"510\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"51[13]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[35]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"(?:210|(?:370[1-9]|51[013]0)\\\\d)\\\\d{7}|5100\\\\d{5}\"]]],\"888\":[\"888\",0,\"\\\\d{11}\",[11],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\"]],0,0,0,0,0,0,[0,0,0,0,0,0,[\"\\\\d{11}\"]]],\"979\":[\"979\",0,\"[1359]\\\\d{8}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1359]\"]]],0,0,0,0,0,0,[0,0,0,[\"[1359]\\\\d{8}\"]]]}}","function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n// https://stackoverflow.com/a/46971044/970769\n// \"Breaking changes in Typescript 2.1\"\n// \"Extending built-ins like Error, Array, and Map may no longer work.\"\n// \"As a recommendation, you can manually adjust the prototype immediately after any super(...) calls.\"\n// https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\nvar ParseError = /*#__PURE__*/function (_Error) {\n  _inherits(ParseError, _Error);\n\n  var _super = _createSuper(ParseError);\n\n  function ParseError(code) {\n    var _this;\n\n    _classCallCheck(this, ParseError);\n\n    _this = _super.call(this, code); // Set the prototype explicitly.\n    // Any subclass of FooError will have to manually set the prototype as well.\n\n    Object.setPrototypeOf(_assertThisInitialized(_this), ParseError.prototype);\n    _this.name = _this.constructor.name;\n    return _this;\n  }\n\n  return _createClass(ParseError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nexport { ParseError as default };\n//# sourceMappingURL=ParseError.js.map","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport Metadata from './metadata.js';\nimport isPossibleNumber from './isPossibleNumber_.js';\nimport isValidNumber from './validate_.js';\nimport isValidNumberForRegion from './isValidNumberForRegion_.js';\nimport getNumberType from './helpers/getNumberType.js';\nimport formatNumber from './format_.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar PhoneNumber = /*#__PURE__*/function () {\n  function PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n    _classCallCheck(this, PhoneNumber);\n\n    if (!countryCallingCode) {\n      throw new TypeError('`country` or `countryCallingCode` not passed');\n    }\n\n    if (!nationalNumber) {\n      throw new TypeError('`nationalNumber` not passed');\n    }\n\n    if (!metadata) {\n      throw new TypeError('`metadata` not passed');\n    }\n\n    var _metadata = new Metadata(metadata); // If country code is passed then derive `countryCallingCode` from it.\n    // Also store the country code as `.country`.\n\n\n    if (isCountryCode(countryCallingCode)) {\n      this.country = countryCallingCode;\n\n      _metadata.country(countryCallingCode);\n\n      countryCallingCode = _metadata.countryCallingCode();\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (_metadata.isNonGeographicCallingCode(countryCallingCode)) {\n          this.country = '001';\n        }\n      }\n    }\n\n    this.countryCallingCode = countryCallingCode;\n    this.nationalNumber = nationalNumber;\n    this.number = '+' + this.countryCallingCode + this.nationalNumber;\n    this.metadata = metadata;\n  }\n\n  _createClass(PhoneNumber, [{\n    key: \"setExt\",\n    value: function setExt(ext) {\n      this.ext = ext;\n    }\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      return isPossibleNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return isValidNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isNonGeographic\",\n    value: function isNonGeographic() {\n      var metadata = new Metadata(this.metadata);\n      return metadata.isNonGeographicCallingCode(this.countryCallingCode);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(phoneNumber) {\n      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;\n    } // // Is just an alias for `this.isValid() && this.country === country`.\n    // // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n    // isValidForRegion(country) {\n    // \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n    // }\n\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return getNumberType(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"format\",\n    value: function format(_format, options) {\n      return formatNumber(this, _format, options ? _objectSpread(_objectSpread({}, options), {}, {\n        v2: true\n      }) : {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"formatNational\",\n    value: function formatNational(options) {\n      return this.format('NATIONAL', options);\n    }\n  }, {\n    key: \"formatInternational\",\n    value: function formatInternational(options) {\n      return this.format('INTERNATIONAL', options);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI(options) {\n      return this.format('RFC3966', options);\n    }\n  }]);\n\n  return PhoneNumber;\n}();\n\nexport { PhoneNumber as default };\n\nvar isCountryCode = function isCountryCode(value) {\n  return /^[A-Z]{2}$/.test(value);\n};\n//# sourceMappingURL=PhoneNumber.js.map","function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// https://medium.com/dsinjs/implementing-lru-cache-in-javascript-94ba6755cda9\nvar Node = /*#__PURE__*/_createClass(function Node(key, value) {\n  var next = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var prev = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  _classCallCheck(this, Node);\n\n  this.key = key;\n  this.value = value;\n  this.next = next;\n  this.prev = prev;\n});\n\nvar LRUCache = /*#__PURE__*/function () {\n  //set default limit of 10 if limit is not passed.\n  function LRUCache() {\n    var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n\n    _classCallCheck(this, LRUCache);\n\n    this.size = 0;\n    this.limit = limit;\n    this.head = null;\n    this.tail = null;\n    this.cache = {};\n  } // Write Node to head of LinkedList\n  // update cache with Node key and Node reference\n\n\n  _createClass(LRUCache, [{\n    key: \"put\",\n    value: function put(key, value) {\n      this.ensureLimit();\n\n      if (!this.head) {\n        this.head = this.tail = new Node(key, value);\n      } else {\n        var node = new Node(key, value, this.head);\n        this.head.prev = node;\n        this.head = node;\n      } //Update the cache map\n\n\n      this.cache[key] = this.head;\n      this.size++;\n    } // Read from cache map and make that node as new Head of LinkedList\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      if (this.cache[key]) {\n        var value = this.cache[key].value; // node removed from it's position and cache\n\n        this.remove(key); // write node again to the head of LinkedList to make it most recently used\n\n        this.put(key, value);\n        return value;\n      }\n\n      console.log(\"Item not available in cache for key \".concat(key));\n    }\n  }, {\n    key: \"ensureLimit\",\n    value: function ensureLimit() {\n      if (this.size === this.limit) {\n        this.remove(this.tail.key);\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(key) {\n      var node = this.cache[key];\n\n      if (node.prev !== null) {\n        node.prev.next = node.next;\n      } else {\n        this.head = node.next;\n      }\n\n      if (node.next !== null) {\n        node.next.prev = node.prev;\n      } else {\n        this.tail = node.prev;\n      }\n\n      delete this.cache[key];\n      this.size--;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.head = null;\n      this.tail = null;\n      this.size = 0;\n      this.cache = {};\n    } // // Invokes the callback function with every node of the chain and the index of the node.\n    // forEach(fn) {\n    //   let node = this.head;\n    //   let counter = 0;\n    //   while (node) {\n    //     fn(node, counter);\n    //     node = node.next;\n    //     counter++;\n    //   }\n    // }\n    // // To iterate over LRU with a 'for...of' loop\n    // *[Symbol.iterator]() {\n    //   let node = this.head;\n    //   while (node) {\n    //     yield node;\n    //     node = node.next;\n    //   }\n    // }\n\n  }]);\n\n  return LRUCache;\n}();\n\nexport { LRUCache as default };\n//# sourceMappingURL=LRUCache.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport LRUCache from './LRUCache.js'; // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\n// countries being used for the same doc with ~10 patterns for each country. Some pages will have\n// a lot more countries in use, but typically fewer numbers for each so expanding the cache for\n// that use-case won't have a lot of benefit.\n\nvar RegExpCache = /*#__PURE__*/function () {\n  function RegExpCache(size) {\n    _classCallCheck(this, RegExpCache);\n\n    this.cache = new LRUCache(size);\n  }\n\n  _createClass(RegExpCache, [{\n    key: \"getPatternForRegExp\",\n    value: function getPatternForRegExp(pattern) {\n      var regExp = this.cache.get(pattern);\n\n      if (!regExp) {\n        regExp = new RegExp('^' + pattern);\n        this.cache.put(pattern, regExp);\n      }\n\n      return regExp;\n    }\n  }]);\n\n  return RegExpCache;\n}();\n\nexport { RegExpCache as default };\n//# sourceMappingURL=RegExpCache.js.map","import { trimAfterFirstMatch } from './util.js'; // Regular expression of characters typically used to start a second phone number for the purposes\n// of parsing. This allows us to strip off parts of the number that are actually the start of\n// another number, such as for: (530) 583-6985 x302/x2303 -> the second extension here makes this\n// actually two phone numbers, (530) 583-6985 x302 and (530) 583-6985 x2303. We remove the second\n// extension so that the first number is parsed correctly.\n//\n// Matches a slash (\\ or /) followed by a space followed by an `x`.\n//\n\nvar SECOND_NUMBER_START_PATTERN = /[\\\\/] *x/;\nexport default function parsePreCandidate(candidate) {\n  // Check for extra numbers at the end.\n  // TODO: This is the place to start when trying to support extraction of multiple phone number\n  // from split notations (+41 79 123 45 67 / 68).\n  return trimAfterFirstMatch(SECOND_NUMBER_START_PATTERN, candidate);\n}\n//# sourceMappingURL=parsePreCandidate.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n/**\r\n * A port of Google's `PhoneNumberMatcher.java`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberMatcher.java\r\n * Date: 08.03.2018.\r\n */\nimport PhoneNumber from './PhoneNumber.js';\nimport { MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE, VALID_PUNCTUATION } from './constants.js';\nimport createExtensionPattern from './helpers/extension/createExtensionPattern.js';\nimport RegExpCache from './findNumbers/RegExpCache.js';\nimport { limit, trimAfterFirstMatch } from './findNumbers/util.js';\nimport { _pL, _pN, pZ, PZ, pNd } from './findNumbers/utf-8.js';\nimport Leniency from './findNumbers/Leniency.js';\nimport parsePreCandidate from './findNumbers/parsePreCandidate.js';\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate.js';\nimport isValidCandidate, { LEAD_CLASS } from './findNumbers/isValidCandidate.js';\nimport { isSupportedCountry } from './metadata.js';\nimport parseNumber from './parse_.js';\nvar EXTN_PATTERNS_FOR_MATCHING = createExtensionPattern('matching');\n/**\r\n * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are\r\n * ordered according to specificity. For example, white-space is last since that is frequently\r\n * used in numbers, not just to separate two numbers. We have separate patterns since we don't\r\n * want to break up the phone-number-like text on more than one different kind of symbol at one\r\n * time, although symbols of the same type (e.g. space) can be safely grouped together.\r\n *\r\n * Note that if there is a match, we will always check any text found up to the first match as\r\n * well.\r\n */\n\nvar INNER_MATCHES = [// Breaks on the slash - e.g. \"651-234-2345/332-445-1234\"\n'\\\\/+(.*)/', // Note that the bracket here is inside the capturing group, since we consider it part of the\n// phone number. Will match a pattern like \"(650) 223 3345 (754) 223 3321\".\n'(\\\\([^(]*)', // Breaks on a hyphen - e.g. \"12345 - 332-445-1234 is my number.\"\n// We require a space on either side of the hyphen for it to be considered a separator.\n\"(?:\".concat(pZ, \"-|-\").concat(pZ, \")\").concat(pZ, \"*(.+)\"), // Various types of wide hyphens. Note we have decided not to enforce a space here, since it's\n// possible that it's supposed to be used to break two numbers without spaces, and we haven't\n// seen many instances of it used within a number.\n\"[\\u2012-\\u2015\\uFF0D]\".concat(pZ, \"*(.+)\"), // Breaks on a full stop - e.g. \"12345. 332-445-1234 is my number.\"\n\"\\\\.+\".concat(pZ, \"*([^.]+)\"), // Breaks on space - e.g. \"3324451234 8002341234\"\n\"\".concat(pZ, \"+(\").concat(PZ, \"+)\")]; // Limit on the number of leading (plus) characters.\n\nvar leadLimit = limit(0, 2); // Limit on the number of consecutive punctuation characters.\n\nvar punctuationLimit = limit(0, 4);\n/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a\r\n * single block, set high enough to accommodate the entire national number and the international\r\n * country code. */\n\nvar digitBlockLimit = MAX_LENGTH_FOR_NSN + MAX_LENGTH_COUNTRY_CODE; // Limit on the number of blocks separated by punctuation.\n// Uses digitBlockLimit since some formats use spaces to separate each digit.\n\nvar blockLimit = limit(0, digitBlockLimit);\n/* A punctuation sequence allowing white space. */\n\nvar punctuation = \"[\".concat(VALID_PUNCTUATION, \"]\") + punctuationLimit; // A digits block without punctuation.\n\nvar digitSequence = pNd + limit(1, digitBlockLimit);\n/**\r\n * Phone number pattern allowing optional punctuation.\r\n * The phone number pattern used by `find()`, similar to\r\n * VALID_PHONE_NUMBER, but with the following differences:\r\n * <ul>\r\n *   <li>All captures are limited in order to place an upper bound to the text matched by the\r\n *       pattern.\r\n * <ul>\r\n *   <li>Leading punctuation / plus signs are limited.\r\n *   <li>Consecutive occurrences of punctuation are limited.\r\n *   <li>Number of digits is limited.\r\n * </ul>\r\n *   <li>No whitespace is allowed at the start or end.\r\n *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.\r\n * </ul>\r\n */\n\nvar PATTERN = '(?:' + LEAD_CLASS + punctuation + ')' + leadLimit + digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit + '(?:' + EXTN_PATTERNS_FOR_MATCHING + ')?'; // Regular expression of trailing characters that we want to remove.\n// We remove all characters that are not alpha or numerical characters.\n// The hash character is retained here, as it may signify\n// the previous block was an extension.\n//\n// // Don't know what does '&&' mean here.\n// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\\\P{N}&&\\\\P{L}]&&[^#]]+$`)\n//\n\nvar UNWANTED_END_CHAR_PATTERN = new RegExp(\"[^\".concat(_pN).concat(_pL, \"#]+$\"));\nvar NON_DIGITS_PATTERN = /(\\D+)/;\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n/**\r\n * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.\r\n * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in\r\n * {@link PhoneNumberUtil}.\r\n *\r\n * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are\r\n * not found.\r\n *\r\n * <p>This class is not thread-safe.\r\n */\n\nvar PhoneNumberMatcher = /*#__PURE__*/function () {\n  /**\r\n   * Creates a new instance. See the factory methods in {@link PhoneNumberUtil} on how to obtain a\r\n   * new instance.\r\n   *\r\n   * @param util  the phone number util to use\r\n   * @param text  the character sequence that we will search, null for no text\r\n   * @param country  the country to assume for phone numbers not written in international format\r\n   *     (with a leading plus, or with the international dialing prefix of the specified region).\r\n   *     May be null or \"ZZ\" if only numbers with a leading plus should be\r\n   *     considered.\r\n   * @param leniency  the leniency to use when evaluating candidate phone numbers\r\n   * @param maxTries  the maximum number of invalid numbers to try before giving up on the text.\r\n   *     This is to cover degenerate cases where the text has a lot of false positives in it. Must\r\n   *     be {@code >= 0}.\r\n   */\n  function PhoneNumberMatcher() {\n    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var metadata = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, PhoneNumberMatcher);\n\n    options = _objectSpread(_objectSpread({}, options), {}, {\n      defaultCallingCode: options.defaultCallingCode,\n      defaultCountry: options.defaultCountry && isSupportedCountry(options.defaultCountry, metadata) ? options.defaultCountry : undefined,\n      leniency: options.leniency || options.extended ? 'POSSIBLE' : 'VALID',\n      maxTries: options.maxTries || MAX_SAFE_INTEGER\n    });\n\n    if (!options.leniency) {\n      throw new TypeError('`Leniency` not supplied');\n    }\n\n    if (options.maxTries < 0) {\n      throw new TypeError('`maxTries` not supplied');\n    }\n\n    this.text = text;\n    this.options = options;\n    this.metadata = metadata;\n    /** The degree of validation requested. */\n\n    this.leniency = Leniency[options.leniency];\n\n    if (!this.leniency) {\n      throw new TypeError(\"Unknown leniency: \".concat(options.leniency, \".\"));\n    }\n    /** The maximum number of retries after matching an invalid number. */\n\n\n    this.maxTries = options.maxTries;\n    this.PATTERN = new RegExp(PATTERN, 'ig');\n    /** The iteration tristate. */\n\n    this.state = 'NOT_READY';\n    /** The next index to start searching at. Undefined in {@link State#DONE}. */\n\n    this.searchIndex = 0; // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\n    // countries being used for the same doc with ~10 patterns for each country. Some pages will have\n    // a lot more countries in use, but typically fewer numbers for each so expanding the cache for\n    // that use-case won't have a lot of benefit.\n\n    this.regExpCache = new RegExpCache(32);\n  }\n  /**\r\n   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}\r\n   * that represents a phone number. Returns the next match, null if none was found.\r\n   *\r\n   * @param index  the search index to start searching at\r\n   * @return  the phone number match found, null if none can be found\r\n   */\n\n\n  _createClass(PhoneNumberMatcher, [{\n    key: \"find\",\n    value: function find() {\n      // // Reset the regular expression.\n      // this.PATTERN.lastIndex = index\n      var matches;\n\n      while (this.maxTries > 0 && (matches = this.PATTERN.exec(this.text)) !== null) {\n        var candidate = matches[0];\n        var offset = matches.index;\n        candidate = parsePreCandidate(candidate);\n\n        if (isValidPreCandidate(candidate, offset, this.text)) {\n          var match = // Try to come up with a valid match given the entire candidate.\n          this.parseAndVerify(candidate, offset, this.text) // If that failed, try to find an \"inner match\" -\n          // there might be a phone number within this candidate.\n          || this.extractInnerMatch(candidate, offset, this.text);\n\n          if (match) {\n            if (this.options.v2) {\n              var phoneNumber = new PhoneNumber(match.country || match.countryCallingCode, match.phone, this.metadata);\n\n              if (match.ext) {\n                phoneNumber.ext = match.ext;\n              }\n\n              return {\n                startsAt: match.startsAt,\n                endsAt: match.endsAt,\n                number: phoneNumber\n              };\n            }\n\n            return match;\n          }\n        }\n\n        this.maxTries--;\n      }\n    }\n    /**\r\n     * Attempts to extract a match from `substring`\r\n     * if the substring itself does not qualify as a match.\r\n     */\n\n  }, {\n    key: \"extractInnerMatch\",\n    value: function extractInnerMatch(substring, offset, text) {\n      for (var _iterator = _createForOfIteratorHelperLoose(INNER_MATCHES), _step; !(_step = _iterator()).done;) {\n        var innerMatchPattern = _step.value;\n        var isFirstMatch = true;\n        var candidateMatch = void 0;\n        var innerMatchRegExp = new RegExp(innerMatchPattern, 'g');\n\n        while (this.maxTries > 0 && (candidateMatch = innerMatchRegExp.exec(substring)) !== null) {\n          if (isFirstMatch) {\n            // We should handle any group before this one too.\n            var _candidate = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, substring.slice(0, candidateMatch.index));\n\n            var _match = this.parseAndVerify(_candidate, offset, text);\n\n            if (_match) {\n              return _match;\n            }\n\n            this.maxTries--;\n            isFirstMatch = false;\n          }\n\n          var candidate = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, candidateMatch[1]); // Java code does `groupMatcher.start(1)` here,\n          // but there's no way in javascript to get a `candidate` start index,\n          // therefore resort to using this kind of an approximation.\n          // (`groupMatcher` is called `candidateInSubstringMatch` in this javascript port)\n          // https://stackoverflow.com/questions/15934353/get-index-of-each-capture-in-a-javascript-regex\n\n          var candidateIndexGuess = substring.indexOf(candidate, candidateMatch.index);\n          var match = this.parseAndVerify(candidate, offset + candidateIndexGuess, text);\n\n          if (match) {\n            return match;\n          }\n\n          this.maxTries--;\n        }\n      }\n    }\n    /**\r\n     * Parses a phone number from the `candidate` using `parseNumber` and\r\n     * verifies it matches the requested `leniency`. If parsing and verification succeed,\r\n     * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.\r\n     *\r\n     * @param candidate  the candidate match\r\n     * @param offset  the offset of {@code candidate} within {@link #text}\r\n     * @return  the parsed and validated phone number match, or null\r\n     */\n\n  }, {\n    key: \"parseAndVerify\",\n    value: function parseAndVerify(candidate, offset, text) {\n      if (!isValidCandidate(candidate, offset, text, this.options.leniency)) {\n        return;\n      }\n\n      var number = parseNumber(candidate, {\n        extended: true,\n        defaultCountry: this.options.defaultCountry,\n        defaultCallingCode: this.options.defaultCallingCode\n      }, this.metadata);\n\n      if (!number.possible) {\n        return;\n      }\n\n      if (this.leniency(number, candidate, this.metadata, this.regExpCache)) {\n        // // We used parseAndKeepRawInput to create this number,\n        // // but for now we don't return the extra values parsed.\n        // // TODO: stop clearing all values here and switch all users over\n        // // to using rawInput() rather than the rawString() of PhoneNumberMatch.\n        // number.clearCountryCodeSource()\n        // number.clearRawInput()\n        // number.clearPreferredDomesticCarrierCode()\n        var result = {\n          startsAt: offset,\n          endsAt: offset + candidate.length,\n          phone: number.phone\n        };\n\n        if (number.country && number.country !== '001') {\n          result.country = number.country;\n        } else {\n          result.countryCallingCode = number.countryCallingCode;\n        }\n\n        if (number.ext) {\n          result.ext = number.ext;\n        }\n\n        return result;\n      }\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      if (this.state === 'NOT_READY') {\n        this.lastMatch = this.find(); // (this.searchIndex)\n\n        if (this.lastMatch) {\n          // this.searchIndex = this.lastMatch.endsAt\n          this.state = 'READY';\n        } else {\n          this.state = 'DONE';\n        }\n      }\n\n      return this.state === 'READY';\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      // Check the state and find the next match as a side-effect if necessary.\n      if (!this.hasNext()) {\n        throw new Error('No next element');\n      } // Don't retain that memory any longer than necessary.\n\n\n      var result = this.lastMatch;\n      this.lastMatch = null;\n      this.state = 'NOT_READY';\n      return result;\n    }\n  }]);\n\n  return PhoneNumberMatcher;\n}();\n\nexport { PhoneNumberMatcher as default };\n//# sourceMappingURL=PhoneNumberMatcher.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nvar AsYouTypeState = /*#__PURE__*/function () {\n  function AsYouTypeState(_ref) {\n    var onCountryChange = _ref.onCountryChange,\n        onCallingCodeChange = _ref.onCallingCodeChange;\n\n    _classCallCheck(this, AsYouTypeState);\n\n    this.onCountryChange = onCountryChange;\n    this.onCallingCodeChange = onCallingCodeChange;\n  }\n\n  _createClass(AsYouTypeState, [{\n    key: \"reset\",\n    value: function reset(defaultCountry, defaultCallingCode) {\n      this.international = false;\n      this.IDDPrefix = undefined;\n      this.missingPlus = undefined;\n      this.callingCode = undefined;\n      this.digits = '';\n      this.resetNationalSignificantNumber();\n      this.initCountryAndCallingCode(defaultCountry, defaultCallingCode);\n    }\n  }, {\n    key: \"resetNationalSignificantNumber\",\n    value: function resetNationalSignificantNumber() {\n      this.nationalSignificantNumber = this.getNationalDigits();\n      this.nationalSignificantNumberMatchesInput = true;\n      this.nationalPrefix = undefined;\n      this.carrierCode = undefined;\n      this.complexPrefixBeforeNationalSignificantNumber = undefined;\n    }\n  }, {\n    key: \"update\",\n    value: function update(properties) {\n      for (var _i = 0, _Object$keys = Object.keys(properties); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        this[key] = properties[key];\n      }\n    }\n  }, {\n    key: \"initCountryAndCallingCode\",\n    value: function initCountryAndCallingCode(country, callingCode) {\n      this.setCountry(country);\n      this.setCallingCode(callingCode);\n    }\n  }, {\n    key: \"setCountry\",\n    value: function setCountry(country) {\n      this.country = country;\n      this.onCountryChange(country);\n    }\n  }, {\n    key: \"setCallingCode\",\n    value: function setCallingCode(callingCode) {\n      this.callingCode = callingCode;\n      return this.onCallingCodeChange(this.country, callingCode);\n    }\n  }, {\n    key: \"startInternationalNumber\",\n    value: function startInternationalNumber() {\n      // Prepend the `+` to parsed input.\n      this.international = true; // If a default country was set then reset it\n      // because an explicitly international phone\n      // number is being entered.\n\n      this.initCountryAndCallingCode();\n    }\n  }, {\n    key: \"appendDigits\",\n    value: function appendDigits(nextDigits) {\n      this.digits += nextDigits;\n    }\n  }, {\n    key: \"appendNationalSignificantNumberDigits\",\n    value: function appendNationalSignificantNumberDigits(nextDigits) {\n      this.nationalSignificantNumber += nextDigits;\n    }\n    /**\r\n     * Returns the part of `this.digits` that corresponds to the national number.\r\n     * Basically, all digits that have been input by the user, except for the\r\n     * international prefix and the country calling code part\r\n     * (if the number is an international one).\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getNationalDigits\",\n    value: function getNationalDigits() {\n      if (this.international) {\n        return this.digits.slice((this.IDDPrefix ? this.IDDPrefix.length : 0) + (this.callingCode ? this.callingCode.length : 0));\n      }\n\n      return this.digits;\n    }\n  }, {\n    key: \"getDigitsWithoutInternationalPrefix\",\n    value: function getDigitsWithoutInternationalPrefix() {\n      if (this.international) {\n        if (this.IDDPrefix) {\n          return this.digits.slice(this.IDDPrefix.length);\n        }\n      }\n\n      return this.digits;\n    }\n  }]);\n\n  return AsYouTypeState;\n}();\n\nexport { AsYouTypeState as default };\n//# sourceMappingURL=AsYouTypeState.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport { DIGIT_PLACEHOLDER, countOccurences, repeat, cutAndStripNonPairedParens, closeNonPairedParens, stripNonPairedParens, populateTemplateWithDigits } from './AsYouTypeFormatter.util.js';\nimport formatCompleteNumber, { canFormatCompleteNumber } from './AsYouTypeFormatter.complete.js';\nimport PatternMatcher from './AsYouTypeFormatter.PatternMatcher.js';\nimport parseDigits from './helpers/parseDigits.js';\nexport { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter.util.js';\nimport { FIRST_GROUP_PATTERN } from './helpers/formatNationalNumberUsingFormat.js';\nimport { VALID_PUNCTUATION } from './constants.js';\nimport applyInternationalSeparatorStyle from './helpers/applyInternationalSeparatorStyle.js'; // Used in phone number format template creation.\n// Could be any digit, I guess.\n\nvar DUMMY_DIGIT = '9'; // I don't know why is it exactly `15`\n\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15; // Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\n\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH); // A set of characters that, if found in a national prefix formatting rules, are an indicator to\n// us that we should separate the national prefix from the number when formatting.\n\nvar NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/; // Deprecated: Google has removed some formatting pattern related code from their repo.\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\n// Because this library supports generating custom metadata\n// some users may still be using old metadata so the relevant\n// code seems to stay until some next major version update.\n\nvar SUPPORT_LEGACY_FORMATTING_PATTERNS = true; // A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\n\nvar CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\[([^\\[\\]])*\\]/g;\n}; // Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\n\n\nvar CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\d(?=[^,}][^,}])/g;\n}; // A regular expression that is used to determine if a `format` is\n// suitable to be used in the \"as you type formatter\".\n// A `format` is suitable when the resulting formatted number has\n// the same digits as the user has entered.\n//\n// In the simplest case, that would mean that the format\n// doesn't add any additional digits when formatting a number.\n// Google says that it also shouldn't add \"star\" (`*`) characters,\n// like it does in some Israeli formats.\n// Such basic format would only contain \"valid punctuation\"\n// and \"captured group\" identifiers ($1, $2, etc).\n//\n// An example of a format that adds additional digits:\n//\n// Country: `AR` (Argentina).\n// Format:\n// {\n//    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\n//    \"leading_digits_patterns\": [\"91\"],\n//    \"national_prefix_formatting_rule\": \"0$1\",\n//    \"format\": \"$2 15-$3-$4\",\n//    \"international_format\": \"$1 $2 $3-$4\"\n// }\n//\n// In the format above, the `format` adds `15` to the digits when formatting a number.\n// A sidenote: this format actually is suitable because `national_prefix_for_parsing`\n// has previously removed `15` from a national number, so re-adding `15` in `format`\n// doesn't actually result in any extra digits added to user's input.\n// But verifying that would be a complex procedure, so the code chooses a simpler path:\n// it simply filters out all `format`s that contain anything but \"captured group\" ids.\n//\n// This regular expression is called `ELIGIBLE_FORMAT_PATTERN` in Google's\n// `libphonenumber` code.\n//\n\n\nvar NON_ALTERING_FORMAT_REG_EXP = new RegExp('[' + VALID_PUNCTUATION + ']*' + // Google developers say:\n// \"We require that the first matching group is present in the\n//  output pattern to ensure no data is lost while formatting.\"\n'\\\\$1' + '[' + VALID_PUNCTUATION + ']*' + '(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)*' + '$'); // This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\n\nvar MIN_LEADING_DIGITS_LENGTH = 3;\n\nvar AsYouTypeFormatter = /*#__PURE__*/function () {\n  function AsYouTypeFormatter(_ref) {\n    var state = _ref.state,\n        metadata = _ref.metadata;\n\n    _classCallCheck(this, AsYouTypeFormatter);\n\n    this.metadata = metadata;\n    this.resetFormat();\n  }\n\n  _createClass(AsYouTypeFormatter, [{\n    key: \"resetFormat\",\n    value: function resetFormat() {\n      this.chosenFormat = undefined;\n      this.template = undefined;\n      this.nationalNumberTemplate = undefined;\n      this.populatedNationalNumberTemplate = undefined;\n      this.populatedNationalNumberTemplatePosition = -1;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(numberingPlan, state) {\n      this.resetFormat();\n\n      if (numberingPlan) {\n        this.isNANP = numberingPlan.callingCode() === '1';\n        this.matchingFormats = numberingPlan.formats();\n\n        if (state.nationalSignificantNumber) {\n          this.narrowDownMatchingFormats(state);\n        }\n      } else {\n        this.isNANP = undefined;\n        this.matchingFormats = [];\n      }\n    }\n    /**\r\n     * Formats an updated phone number.\r\n     * @param  {string} nextDigits — Additional phone number digits.\r\n     * @param  {object} state — `AsYouType` state.\r\n     * @return {[string]} Returns undefined if the updated phone number can't be formatted using any of the available formats.\r\n     */\n\n  }, {\n    key: \"format\",\n    value: function format(nextDigits, state) {\n      var _this = this;\n\n      // See if the phone number digits can be formatted as a complete phone number.\n      // If not, use the results from `formatNationalNumberWithNextDigits()`,\n      // which formats based on the chosen formatting pattern.\n      //\n      // Attempting to format complete phone number first is how it's done\n      // in Google's `libphonenumber`, so this library just follows it.\n      // Google's `libphonenumber` code doesn't explain in detail why does it\n      // attempt to format digits as a complete phone number\n      // instead of just going with a previoulsy (or newly) chosen `format`:\n      //\n      // \"Checks to see if there is an exact pattern match for these digits.\n      //  If so, we should use this instead of any other formatting template\n      //  whose leadingDigitsPattern also matches the input.\"\n      //\n      if (canFormatCompleteNumber(state.nationalSignificantNumber, this.metadata)) {\n        for (var _iterator = _createForOfIteratorHelperLoose(this.matchingFormats), _step; !(_step = _iterator()).done;) {\n          var format = _step.value;\n          var formattedCompleteNumber = formatCompleteNumber(state, format, {\n            metadata: this.metadata,\n            shouldTryNationalPrefixFormattingRule: function shouldTryNationalPrefixFormattingRule(format) {\n              return _this.shouldTryNationalPrefixFormattingRule(format, {\n                international: state.international,\n                nationalPrefix: state.nationalPrefix\n              });\n            },\n            getSeparatorAfterNationalPrefix: function getSeparatorAfterNationalPrefix(format) {\n              return _this.getSeparatorAfterNationalPrefix(format);\n            }\n          });\n\n          if (formattedCompleteNumber) {\n            this.resetFormat();\n            this.chosenFormat = format;\n            this.setNationalNumberTemplate(formattedCompleteNumber.replace(/\\d/g, DIGIT_PLACEHOLDER), state);\n            this.populatedNationalNumberTemplate = formattedCompleteNumber; // With a new formatting template, the matched position\n            // using the old template needs to be reset.\n\n            this.populatedNationalNumberTemplatePosition = this.template.lastIndexOf(DIGIT_PLACEHOLDER);\n            return formattedCompleteNumber;\n          }\n        }\n      } // Format the digits as a partial (incomplete) phone number\n      // using the previously chosen formatting pattern (or a newly chosen one).\n\n\n      return this.formatNationalNumberWithNextDigits(nextDigits, state);\n    } // Formats the next phone number digits.\n\n  }, {\n    key: \"formatNationalNumberWithNextDigits\",\n    value: function formatNationalNumberWithNextDigits(nextDigits, state) {\n      var previouslyChosenFormat = this.chosenFormat; // Choose a format from the list of matching ones.\n\n      var newlyChosenFormat = this.chooseFormat(state);\n\n      if (newlyChosenFormat) {\n        if (newlyChosenFormat === previouslyChosenFormat) {\n          // If it can format the next (current) digits\n          // using the previously chosen phone number format\n          // then return the updated formatted number.\n          return this.formatNextNationalNumberDigits(nextDigits);\n        } else {\n          // If a more appropriate phone number format\n          // has been chosen for these \"leading digits\",\n          // then re-format the national phone number part\n          // using the newly selected format.\n          return this.formatNextNationalNumberDigits(state.getNationalDigits());\n        }\n      }\n    }\n  }, {\n    key: \"narrowDownMatchingFormats\",\n    value: function narrowDownMatchingFormats(_ref2) {\n      var _this2 = this;\n\n      var nationalSignificantNumber = _ref2.nationalSignificantNumber,\n          nationalPrefix = _ref2.nationalPrefix,\n          international = _ref2.international;\n      var leadingDigits = nationalSignificantNumber; // \"leading digits\" pattern list starts with a\n      // \"leading digits\" pattern fitting a maximum of 3 leading digits.\n      // So, after a user inputs 3 digits of a national (significant) phone number\n      // this national (significant) number can already be formatted.\n      // The next \"leading digits\" pattern is for 4 leading digits max,\n      // and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n      // This implementation is different from Google's\n      // in that it searches for a fitting format\n      // even if the user has entered less than\n      // `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n      // Because some leading digit patterns already match for a single first digit.\n\n      var leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH;\n\n      if (leadingDigitsPatternIndex < 0) {\n        leadingDigitsPatternIndex = 0;\n      }\n\n      this.matchingFormats = this.matchingFormats.filter(function (format) {\n        return _this2.formatSuits(format, international, nationalPrefix) && _this2.formatMatches(format, leadingDigits, leadingDigitsPatternIndex);\n      }); // If there was a phone number format chosen\n      // and it no longer holds given the new leading digits then reset it.\n      // The test for this `if` condition is marked as:\n      // \"Reset a chosen format when it no longer holds given the new leading digits\".\n      // To construct a valid test case for this one can find a country\n      // in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n      // and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\n      if (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {\n        this.resetFormat();\n      }\n    }\n  }, {\n    key: \"formatSuits\",\n    value: function formatSuits(format, international, nationalPrefix) {\n      // When a prefix before a national (significant) number is\n      // simply a national prefix, then it's parsed as `this.nationalPrefix`.\n      // In more complex cases, a prefix before national (significant) number\n      // could include a national prefix as well as some \"capturing groups\",\n      // and in that case there's no info whether a national prefix has been parsed.\n      // If national prefix is not used when formatting a phone number\n      // using this format, but a national prefix has been entered by the user,\n      // and was extracted, then discard such phone number format.\n      // In Google's \"AsYouType\" formatter code, the equivalent would be this part:\n      // https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L175-L184\n      if (nationalPrefix && !format.usesNationalPrefix() && // !format.domesticCarrierCodeFormattingRule() &&\n      !format.nationalPrefixIsOptionalWhenFormattingInNationalFormat()) {\n        return false;\n      } // If national prefix is mandatory for this phone number format\n      // and there're no guarantees that a national prefix is present in user input\n      // then discard this phone number format as not suitable.\n      // In Google's \"AsYouType\" formatter code, the equivalent would be this part:\n      // https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L185-L193\n\n\n      if (!international && !nationalPrefix && format.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"formatMatches\",\n    value: function formatMatches(format, leadingDigits, leadingDigitsPatternIndex) {\n      var leadingDigitsPatternsCount = format.leadingDigitsPatterns().length; // If this format is not restricted to a certain\n      // leading digits pattern then it fits.\n      // The test case could be found by searching for \"leadingDigitsPatternsCount === 0\".\n\n      if (leadingDigitsPatternsCount === 0) {\n        return true;\n      } // Start narrowing down the list of possible formats based on the leading digits.\n      // (only previously matched formats take part in the narrowing down process)\n      // `leading_digits_patterns` start with 3 digits min\n      // and then go up from there one digit at a time.\n\n\n      leadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1);\n      var leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex]; // Google imposes a requirement on the leading digits\n      // to be minimum 3 digits long in order to be eligible\n      // for checking those with a leading digits pattern.\n      //\n      // Since `leading_digits_patterns` start with 3 digits min,\n      // Google's original `libphonenumber` library only starts\n      // excluding any non-matching formats only when the\n      // national number entered so far is at least 3 digits long,\n      // otherwise format matching would give false negatives.\n      //\n      // For example, when the digits entered so far are `2`\n      // and the leading digits pattern is `21` –\n      // it's quite obvious in this case that the format could be the one\n      // but due to the absence of further digits it would give false negative.\n      //\n      // Also, `leading_digits_patterns` doesn't always correspond to a single\n      // digits count. For example, `60|8` pattern would already match `8`\n      // but the `60` part would require having at least two leading digits,\n      // so the whole pattern would require inputting two digits first in order to\n      // decide on whether it matches the input, even when the input is \"80\".\n      //\n      // This library — `libphonenumber-js` — allows filtering by `leading_digits_patterns`\n      // even when there's only 1 or 2 digits of the national (significant) number.\n      // To do that, it uses a non-strict pattern matcher written specifically for that.\n      //\n\n      if (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {\n        // Before leading digits < 3 matching was implemented:\n        // return true\n        //\n        // After leading digits < 3 matching was implemented:\n        try {\n          return new PatternMatcher(leadingDigitsPattern).match(leadingDigits, {\n            allowOverflow: true\n          }) !== undefined;\n        } catch (error)\n        /* istanbul ignore next */\n        {\n          // There's a slight possibility that there could be some undiscovered bug\n          // in the pattern matcher code. Since the \"leading digits < 3 matching\"\n          // feature is not \"essential\" for operation, it can fall back to the old way\n          // in case of any issues rather than halting the application's execution.\n          console.error(error);\n          return true;\n        }\n      } // If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are\n      // available then use the usual regular expression matching.\n      //\n      // The whole pattern is wrapped in round brackets (`()`) because\n      // the pattern can use \"or\" operator (`|`) at the top level of the pattern.\n      //\n\n\n      return new RegExp(\"^(\".concat(leadingDigitsPattern, \")\")).test(leadingDigits);\n    }\n  }, {\n    key: \"getFormatFormat\",\n    value: function getFormatFormat(format, international) {\n      return international ? format.internationalFormat() : format.format();\n    }\n  }, {\n    key: \"chooseFormat\",\n    value: function chooseFormat(state) {\n      var _this3 = this;\n\n      var _loop = function _loop() {\n        var format = _step2.value;\n\n        // If this format is currently being used\n        // and is still suitable, then stick to it.\n        if (_this3.chosenFormat === format) {\n          return \"break\";\n        } // Sometimes, a formatting rule inserts additional digits in a phone number,\n        // and \"as you type\" formatter can't do that: it should only use the digits\n        // that the user has input.\n        //\n        // For example, in Argentina, there's a format for mobile phone numbers:\n        //\n        // {\n        //    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\n        //    \"leading_digits_patterns\": [\"91\"],\n        //    \"national_prefix_formatting_rule\": \"0$1\",\n        //    \"format\": \"$2 15-$3-$4\",\n        //    \"international_format\": \"$1 $2 $3-$4\"\n        // }\n        //\n        // In that format, `international_format` is used instead of `format`\n        // because `format` inserts `15` in the formatted number,\n        // and `AsYouType` formatter should only use the digits\n        // the user has actually input, without adding any extra digits.\n        // In this case, it wouldn't make a difference, because the `15`\n        // is first stripped when applying `national_prefix_for_parsing`\n        // and then re-added when using `format`, so in reality it doesn't\n        // add any new digits to the number, but to detect that, the code\n        // would have to be more complex: it would have to try formatting\n        // the digits using the format and then see if any digits have\n        // actually been added or removed, and then, every time a new digit\n        // is input, it should re-check whether the chosen format doesn't\n        // alter the digits.\n        //\n        // Google's code doesn't go that far, and so does this library:\n        // it simply requires that a `format` doesn't add any additonal\n        // digits to user's input.\n        //\n        // Also, people in general should move from inputting phone numbers\n        // in national format (possibly with national prefixes)\n        // and use international phone number format instead:\n        // it's a logical thing in the modern age of mobile phones,\n        // globalization and the internet.\n        //\n\n        /* istanbul ignore if */\n\n\n        if (!NON_ALTERING_FORMAT_REG_EXP.test(_this3.getFormatFormat(format, state.international))) {\n          return \"continue\";\n        }\n\n        if (!_this3.createTemplateForFormat(format, state)) {\n          // Remove the format if it can't generate a template.\n          _this3.matchingFormats = _this3.matchingFormats.filter(function (_) {\n            return _ !== format;\n          });\n          return \"continue\";\n        }\n\n        _this3.chosenFormat = format;\n        return \"break\";\n      };\n\n      // When there are multiple available formats, the formatter uses the first\n      // format where a formatting template could be created.\n      //\n      // For some weird reason, `istanbul` says \"else path not taken\"\n      // for the `for of` line below. Supposedly that means that\n      // the loop doesn't ever go over the last element in the list.\n      // That's true because there always is `this.chosenFormat`\n      // when `this.matchingFormats` is non-empty.\n      // And, for some weird reason, it doesn't think that the case\n      // with empty `this.matchingFormats` qualifies for a valid \"else\" path.\n      // So simply muting this `istanbul` warning.\n      // It doesn't skip the contents of the `for of` loop,\n      // it just skips the `for of` line.\n      //\n\n      /* istanbul ignore next */\n      for (var _iterator2 = _createForOfIteratorHelperLoose(this.matchingFormats.slice()), _step2; !(_step2 = _iterator2()).done;) {\n        var _ret = _loop();\n\n        if (_ret === \"break\") break;\n        if (_ret === \"continue\") continue;\n      }\n\n      if (!this.chosenFormat) {\n        // No format matches the national (significant) phone number.\n        this.resetFormat();\n      }\n\n      return this.chosenFormat;\n    }\n  }, {\n    key: \"createTemplateForFormat\",\n    value: function createTemplateForFormat(format, state) {\n      // The formatter doesn't format numbers when numberPattern contains '|', e.g.\n      // (20|3)\\d{4}. In those cases we quickly return.\n      // (Though there's no such format in current metadata)\n\n      /* istanbul ignore if */\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\n        return;\n      } // Get formatting template for this phone number format\n\n\n      var template = this.getTemplateForFormat(format, state); // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (template) {\n        this.setNationalNumberTemplate(template, state);\n        return true;\n      }\n    }\n  }, {\n    key: \"getSeparatorAfterNationalPrefix\",\n    value: function getSeparatorAfterNationalPrefix(format) {\n      // `US` metadata doesn't have a `national_prefix_formatting_rule`,\n      // so the `if` condition below doesn't apply to `US`,\n      // but in reality there shoudl be a separator\n      // between a national prefix and a national (significant) number.\n      // So `US` national prefix separator is a \"special\" \"hardcoded\" case.\n      if (this.isNANP) {\n        return ' ';\n      } // If a `format` has a `national_prefix_formatting_rule`\n      // and that rule has a separator after a national prefix,\n      // then it means that there should be a separator\n      // between a national prefix and a national (significant) number.\n\n\n      if (format && format.nationalPrefixFormattingRule() && NATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {\n        return ' ';\n      } // At this point, there seems to be no clear evidence that\n      // there should be a separator between a national prefix\n      // and a national (significant) number. So don't insert one.\n\n\n      return '';\n    }\n  }, {\n    key: \"getInternationalPrefixBeforeCountryCallingCode\",\n    value: function getInternationalPrefixBeforeCountryCallingCode(_ref3, options) {\n      var IDDPrefix = _ref3.IDDPrefix,\n          missingPlus = _ref3.missingPlus;\n\n      if (IDDPrefix) {\n        return options && options.spacing === false ? IDDPrefix : IDDPrefix + ' ';\n      }\n\n      if (missingPlus) {\n        return '';\n      }\n\n      return '+';\n    }\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate(state) {\n      if (!this.template) {\n        return;\n      } // `this.template` holds the template for a \"complete\" phone number.\n      // The currently entered phone number is most likely not \"complete\",\n      // so trim all non-populated digits.\n\n\n      var index = -1;\n      var i = 0;\n      var internationalPrefix = state.international ? this.getInternationalPrefixBeforeCountryCallingCode(state, {\n        spacing: false\n      }) : '';\n\n      while (i < internationalPrefix.length + state.getDigitsWithoutInternationalPrefix().length) {\n        index = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);\n        i++;\n      }\n\n      return cutAndStripNonPairedParens(this.template, index + 1);\n    }\n  }, {\n    key: \"setNationalNumberTemplate\",\n    value: function setNationalNumberTemplate(template, state) {\n      this.nationalNumberTemplate = template;\n      this.populatedNationalNumberTemplate = template; // With a new formatting template, the matched position\n      // using the old template needs to be reset.\n\n      this.populatedNationalNumberTemplatePosition = -1; // For convenience, the public `.template` property\n      // contains the whole international number\n      // if the phone number being input is international:\n      // 'x' for the '+' sign, 'x'es for the country phone code,\n      // a spacebar and then the template for the formatted national number.\n\n      if (state.international) {\n        this.template = this.getInternationalPrefixBeforeCountryCallingCode(state).replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER) + repeat(DIGIT_PLACEHOLDER, state.callingCode.length) + ' ' + template;\n      } else {\n        this.template = template;\n      }\n    }\n    /**\r\n     * Generates formatting template for a national phone number,\r\n     * optionally containing a national prefix, for a format.\r\n     * @param  {Format} format\r\n     * @param  {string} nationalPrefix\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getTemplateForFormat\",\n    value: function getTemplateForFormat(format, _ref4) {\n      var nationalSignificantNumber = _ref4.nationalSignificantNumber,\n          international = _ref4.international,\n          nationalPrefix = _ref4.nationalPrefix,\n          complexPrefixBeforeNationalSignificantNumber = _ref4.complexPrefixBeforeNationalSignificantNumber;\n      var pattern = format.pattern();\n      /* istanbul ignore else */\n\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\n        pattern = pattern // Replace anything in the form of [..] with \\d\n        .replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d') // Replace any standalone digit (not the one in `{}`) with \\d\n        .replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d');\n      } // Generate a dummy national number (consisting of `9`s)\n      // that fits this format's `pattern`.\n      //\n      // This match will always succeed,\n      // because the \"longest dummy phone number\"\n      // has enough length to accomodate any possible\n      // national phone number format pattern.\n      //\n\n\n      var digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0]; // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (nationalSignificantNumber.length > digits.length) {\n        return;\n      } // Get a formatting template which can be used to efficiently format\n      // a partial number where digits are added one by one.\n      // Below `strictPattern` is used for the\n      // regular expression (with `^` and `$`).\n      // This wasn't originally in Google's `libphonenumber`\n      // and I guess they don't really need it\n      // because they're not using \"templates\" to format phone numbers\n      // but I added `strictPattern` after encountering\n      // South Korean phone number formatting bug.\n      //\n      // Non-strict regular expression bug demonstration:\n      //\n      // this.nationalSignificantNumber : `111111111` (9 digits)\n      //\n      // pattern : (\\d{2})(\\d{3,4})(\\d{4})\n      // format : `$1 $2 $3`\n      // digits : `9999999999` (10 digits)\n      //\n      // '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n      //\n      // template : xx xxxx xxxx\n      //\n      // But the correct template in this case is `xx xxx xxxx`.\n      // The template was generated incorrectly because of the\n      // `{3,4}` variability in the `pattern`.\n      //\n      // The fix is, if `this.nationalSignificantNumber` has already sufficient length\n      // to satisfy the `pattern` completely then `this.nationalSignificantNumber`\n      // is used instead of `digits`.\n\n\n      var strictPattern = new RegExp('^' + pattern + '$');\n      var nationalNumberDummyDigits = nationalSignificantNumber.replace(/\\d/g, DUMMY_DIGIT); // If `this.nationalSignificantNumber` has already sufficient length\n      // to satisfy the `pattern` completely then use it\n      // instead of `digits`.\n\n      if (strictPattern.test(nationalNumberDummyDigits)) {\n        digits = nationalNumberDummyDigits;\n      }\n\n      var numberFormat = this.getFormatFormat(format, international);\n      var nationalPrefixIncludedInTemplate; // If a user did input a national prefix (and that's guaranteed),\n      // and if a `format` does have a national prefix formatting rule,\n      // then see if that national prefix formatting rule\n      // prepends exactly the same national prefix the user has input.\n      // If that's the case, then use the `format` with the national prefix formatting rule.\n      // Otherwise, use  the `format` without the national prefix formatting rule,\n      // and prepend a national prefix manually to it.\n\n      if (this.shouldTryNationalPrefixFormattingRule(format, {\n        international: international,\n        nationalPrefix: nationalPrefix\n      })) {\n        var numberFormatWithNationalPrefix = numberFormat.replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()); // If `national_prefix_formatting_rule` of a `format` simply prepends\n        // national prefix at the start of a national (significant) number,\n        // then such formatting can be used with `AsYouType` formatter.\n        // There seems to be no `else` case: everywhere in metadata,\n        // national prefix formatting rule is national prefix + $1,\n        // or `($1)`, in which case such format isn't even considered\n        // when the user has input a national prefix.\n\n        /* istanbul ignore else */\n\n        if (parseDigits(format.nationalPrefixFormattingRule()) === (nationalPrefix || '') + parseDigits('$1')) {\n          numberFormat = numberFormatWithNationalPrefix;\n          nationalPrefixIncludedInTemplate = true; // Replace all digits of the national prefix in the formatting template\n          // with `DIGIT_PLACEHOLDER`s.\n\n          if (nationalPrefix) {\n            var i = nationalPrefix.length;\n\n            while (i > 0) {\n              numberFormat = numberFormat.replace(/\\d/, DIGIT_PLACEHOLDER);\n              i--;\n            }\n          }\n        }\n      } // Generate formatting template for this phone number format.\n\n\n      var template = digits // Format the dummy phone number according to the format.\n      .replace(new RegExp(pattern), numberFormat) // Replace each dummy digit with a DIGIT_PLACEHOLDER.\n      .replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER); // If a prefix of a national (significant) number is not as simple\n      // as just a basic national prefix, then just prepend such prefix\n      // before the national (significant) number, optionally spacing\n      // the two with a whitespace.\n\n      if (!nationalPrefixIncludedInTemplate) {\n        if (complexPrefixBeforeNationalSignificantNumber) {\n          // Prepend the prefix to the template manually.\n          template = repeat(DIGIT_PLACEHOLDER, complexPrefixBeforeNationalSignificantNumber.length) + ' ' + template;\n        } else if (nationalPrefix) {\n          // Prepend national prefix to the template manually.\n          template = repeat(DIGIT_PLACEHOLDER, nationalPrefix.length) + this.getSeparatorAfterNationalPrefix(format) + template;\n        }\n      }\n\n      if (international) {\n        template = applyInternationalSeparatorStyle(template);\n      }\n\n      return template;\n    }\n  }, {\n    key: \"formatNextNationalNumberDigits\",\n    value: function formatNextNationalNumberDigits(digits) {\n      var result = populateTemplateWithDigits(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition, digits);\n\n      if (!result) {\n        // Reset the format.\n        this.resetFormat();\n        return;\n      }\n\n      this.populatedNationalNumberTemplate = result[0];\n      this.populatedNationalNumberTemplatePosition = result[1]; // Return the formatted phone number so far.\n\n      return cutAndStripNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1); // The old way which was good for `input-format` but is not so good\n      // for `react-phone-number-input`'s default input (`InputBasic`).\n      // return closeNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\n      // \t.replace(new RegExp(DIGIT_PLACEHOLDER, 'g'), ' ')\n    }\n  }, {\n    key: \"shouldTryNationalPrefixFormattingRule\",\n    value: function shouldTryNationalPrefixFormattingRule(format, _ref5) {\n      var international = _ref5.international,\n          nationalPrefix = _ref5.nationalPrefix;\n\n      if (format.nationalPrefixFormattingRule()) {\n        // In some countries, `national_prefix_formatting_rule` is `($1)`,\n        // so it applies even if the user hasn't input a national prefix.\n        // `format.usesNationalPrefix()` detects such cases.\n        var usesNationalPrefix = format.usesNationalPrefix();\n\n        if (usesNationalPrefix && nationalPrefix || !usesNationalPrefix && !international) {\n          return true;\n        }\n      }\n    }\n  }]);\n\n  return AsYouTypeFormatter;\n}();\n\nexport { AsYouTypeFormatter as default };\n//# sourceMappingURL=AsYouTypeFormatter.js.map","function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport _extractCountryCallingCode from './helpers/extractCountryCallingCode.js';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js';\nimport extractNationalNumberFromPossiblyIncompleteNumber from './helpers/extractNationalNumberFromPossiblyIncompleteNumber.js';\nimport stripIddPrefix from './helpers/stripIddPrefix.js';\nimport parseDigits from './helpers/parseDigits.js';\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants.js';\nvar VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART = '[' + VALID_PUNCTUATION + VALID_DIGITS + ']+';\nvar VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART + '$', 'i');\nvar VALID_FORMATTED_PHONE_NUMBER_PART = '(?:' + '[' + PLUS_CHARS + ']' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*' + '|' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']+' + ')';\nvar AFTER_PHONE_NUMBER_DIGITS_END_PATTERN = new RegExp('[^' + VALID_PUNCTUATION + VALID_DIGITS + ']+' + '.*' + '$'); // Tests whether `national_prefix_for_parsing` could match\n// different national prefixes.\n// Matches anything that's not a digit or a square bracket.\n\nvar COMPLEX_NATIONAL_PREFIX = /[^\\d\\[\\]]/;\n\nvar AsYouTypeParser = /*#__PURE__*/function () {\n  function AsYouTypeParser(_ref) {\n    var defaultCountry = _ref.defaultCountry,\n        defaultCallingCode = _ref.defaultCallingCode,\n        metadata = _ref.metadata,\n        onNationalSignificantNumberChange = _ref.onNationalSignificantNumberChange;\n\n    _classCallCheck(this, AsYouTypeParser);\n\n    this.defaultCountry = defaultCountry;\n    this.defaultCallingCode = defaultCallingCode;\n    this.metadata = metadata;\n    this.onNationalSignificantNumberChange = onNationalSignificantNumberChange;\n  }\n\n  _createClass(AsYouTypeParser, [{\n    key: \"input\",\n    value: function input(text, state) {\n      var _extractFormattedDigi = extractFormattedDigitsAndPlus(text),\n          _extractFormattedDigi2 = _slicedToArray(_extractFormattedDigi, 2),\n          formattedDigits = _extractFormattedDigi2[0],\n          hasPlus = _extractFormattedDigi2[1];\n\n      var digits = parseDigits(formattedDigits); // Checks for a special case: just a leading `+` has been entered.\n\n      var justLeadingPlus;\n\n      if (hasPlus) {\n        if (!state.digits) {\n          state.startInternationalNumber();\n\n          if (!digits) {\n            justLeadingPlus = true;\n          }\n        }\n      }\n\n      if (digits) {\n        this.inputDigits(digits, state);\n      }\n\n      return {\n        digits: digits,\n        justLeadingPlus: justLeadingPlus\n      };\n    }\n    /**\r\n     * Inputs \"next\" phone number digits.\r\n     * @param  {string} digits\r\n     * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means \"don't format the national phone number at this stage\".\r\n     */\n\n  }, {\n    key: \"inputDigits\",\n    value: function inputDigits(nextDigits, state) {\n      var digits = state.digits;\n      var hasReceivedThreeLeadingDigits = digits.length < 3 && digits.length + nextDigits.length >= 3; // Append phone number digits.\n\n      state.appendDigits(nextDigits); // Attempt to extract IDD prefix:\n      // Some users input their phone number in international format,\n      // but in an \"out-of-country\" dialing format instead of using the leading `+`.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/185\n      // Detect such numbers as soon as there're at least 3 digits.\n      // Google's library attempts to extract IDD prefix at 3 digits,\n      // so this library just copies that behavior.\n      // I guess that's because the most commot IDD prefixes are\n      // `00` (Europe) and `011` (US).\n      // There exist really long IDD prefixes too:\n      // for example, in Australia the default IDD prefix is `0011`,\n      // and it could even be as long as `14880011`.\n      // An IDD prefix is extracted here, and then every time when\n      // there's a new digit and the number couldn't be formatted.\n\n      if (hasReceivedThreeLeadingDigits) {\n        this.extractIddPrefix(state);\n      }\n\n      if (this.isWaitingForCountryCallingCode(state)) {\n        if (!this.extractCountryCallingCode(state)) {\n          return;\n        }\n      } else {\n        state.appendNationalSignificantNumberDigits(nextDigits);\n      } // If a phone number is being input in international format,\n      // then it's not valid for it to have a national prefix.\n      // Still, some people incorrectly input such numbers with a national prefix.\n      // In such cases, only attempt to strip a national prefix if the number becomes too long.\n      // (but that is done later, not here)\n\n\n      if (!state.international) {\n        if (!this.hasExtractedNationalSignificantNumber) {\n          this.extractNationalSignificantNumber(state.getNationalDigits(), function (stateUpdate) {\n            return state.update(stateUpdate);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"isWaitingForCountryCallingCode\",\n    value: function isWaitingForCountryCallingCode(_ref2) {\n      var international = _ref2.international,\n          callingCode = _ref2.callingCode;\n      return international && !callingCode;\n    } // Extracts a country calling code from a number\n    // being entered in internatonal format.\n\n  }, {\n    key: \"extractCountryCallingCode\",\n    value: function extractCountryCallingCode(state) {\n      var _extractCountryCallin = _extractCountryCallingCode('+' + state.getDigitsWithoutInternationalPrefix(), this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),\n          countryCallingCode = _extractCountryCallin.countryCallingCode,\n          number = _extractCountryCallin.number;\n\n      if (countryCallingCode) {\n        state.setCallingCode(countryCallingCode);\n        state.update({\n          nationalSignificantNumber: number\n        });\n        return true;\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(numberingPlan) {\n      if (numberingPlan) {\n        this.hasSelectedNumberingPlan = true;\n\n        var nationalPrefixForParsing = numberingPlan._nationalPrefixForParsing();\n\n        this.couldPossiblyExtractAnotherNationalSignificantNumber = nationalPrefixForParsing && COMPLEX_NATIONAL_PREFIX.test(nationalPrefixForParsing);\n      } else {\n        this.hasSelectedNumberingPlan = undefined;\n        this.couldPossiblyExtractAnotherNationalSignificantNumber = undefined;\n      }\n    }\n    /**\r\n     * Extracts a national (significant) number from user input.\r\n     * Google's library is different in that it only applies `national_prefix_for_parsing`\r\n     * and doesn't apply `national_prefix_transform_rule` after that.\r\n     * https://github.com/google/libphonenumber/blob/a3d70b0487875475e6ad659af404943211d26456/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L539\r\n     * @return {boolean} [extracted]\r\n     */\n\n  }, {\n    key: \"extractNationalSignificantNumber\",\n    value: function extractNationalSignificantNumber(nationalDigits, setState) {\n      if (!this.hasSelectedNumberingPlan) {\n        return;\n      }\n\n      var _extractNationalNumbe = extractNationalNumberFromPossiblyIncompleteNumber(nationalDigits, this.metadata),\n          nationalPrefix = _extractNationalNumbe.nationalPrefix,\n          nationalNumber = _extractNationalNumbe.nationalNumber,\n          carrierCode = _extractNationalNumbe.carrierCode;\n\n      if (nationalNumber === nationalDigits) {\n        return;\n      }\n\n      this.onExtractedNationalNumber(nationalPrefix, carrierCode, nationalNumber, nationalDigits, setState);\n      return true;\n    }\n    /**\r\n     * In Google's code this function is called \"attempt to extract longer NDD\".\r\n     * \"Some national prefixes are a substring of others\", they say.\r\n     * @return {boolean} [result] — Returns `true` if extracting a national prefix produced different results from what they were.\r\n     */\n\n  }, {\n    key: \"extractAnotherNationalSignificantNumber\",\n    value: function extractAnotherNationalSignificantNumber(nationalDigits, prevNationalSignificantNumber, setState) {\n      if (!this.hasExtractedNationalSignificantNumber) {\n        return this.extractNationalSignificantNumber(nationalDigits, setState);\n      }\n\n      if (!this.couldPossiblyExtractAnotherNationalSignificantNumber) {\n        return;\n      }\n\n      var _extractNationalNumbe2 = extractNationalNumberFromPossiblyIncompleteNumber(nationalDigits, this.metadata),\n          nationalPrefix = _extractNationalNumbe2.nationalPrefix,\n          nationalNumber = _extractNationalNumbe2.nationalNumber,\n          carrierCode = _extractNationalNumbe2.carrierCode; // If a national prefix has been extracted previously,\n      // then it's always extracted as additional digits are added.\n      // That's assuming `extractNationalNumberFromPossiblyIncompleteNumber()`\n      // doesn't do anything different from what it currently does.\n      // So, just in case, here's this check, though it doesn't occur.\n\n      /* istanbul ignore if */\n\n\n      if (nationalNumber === prevNationalSignificantNumber) {\n        return;\n      }\n\n      this.onExtractedNationalNumber(nationalPrefix, carrierCode, nationalNumber, nationalDigits, setState);\n      return true;\n    }\n  }, {\n    key: \"onExtractedNationalNumber\",\n    value: function onExtractedNationalNumber(nationalPrefix, carrierCode, nationalSignificantNumber, nationalDigits, setState) {\n      var complexPrefixBeforeNationalSignificantNumber;\n      var nationalSignificantNumberMatchesInput; // This check also works with empty `this.nationalSignificantNumber`.\n\n      var nationalSignificantNumberIndex = nationalDigits.lastIndexOf(nationalSignificantNumber); // If the extracted national (significant) number is the\n      // last substring of the `digits`, then it means that it hasn't been altered:\n      // no digits have been removed from the national (significant) number\n      // while applying `national_prefix_transform_rule`.\n      // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\n\n      if (nationalSignificantNumberIndex >= 0 && nationalSignificantNumberIndex === nationalDigits.length - nationalSignificantNumber.length) {\n        nationalSignificantNumberMatchesInput = true; // If a prefix of a national (significant) number is not as simple\n        // as just a basic national prefix, then such prefix is stored in\n        // `this.complexPrefixBeforeNationalSignificantNumber` property and will be\n        // prepended \"as is\" to the national (significant) number to produce\n        // a formatted result.\n\n        var prefixBeforeNationalNumber = nationalDigits.slice(0, nationalSignificantNumberIndex); // `prefixBeforeNationalNumber` is always non-empty,\n        // because `onExtractedNationalNumber()` isn't called\n        // when a national (significant) number hasn't been actually \"extracted\":\n        // when a national (significant) number is equal to the national part of `digits`,\n        // then `onExtractedNationalNumber()` doesn't get called.\n\n        if (prefixBeforeNationalNumber !== nationalPrefix) {\n          complexPrefixBeforeNationalSignificantNumber = prefixBeforeNationalNumber;\n        }\n      }\n\n      setState({\n        nationalPrefix: nationalPrefix,\n        carrierCode: carrierCode,\n        nationalSignificantNumber: nationalSignificantNumber,\n        nationalSignificantNumberMatchesInput: nationalSignificantNumberMatchesInput,\n        complexPrefixBeforeNationalSignificantNumber: complexPrefixBeforeNationalSignificantNumber\n      }); // `onExtractedNationalNumber()` is only called when\n      // the national (significant) number actually did change.\n\n      this.hasExtractedNationalSignificantNumber = true;\n      this.onNationalSignificantNumberChange();\n    }\n  }, {\n    key: \"reExtractNationalSignificantNumber\",\n    value: function reExtractNationalSignificantNumber(state) {\n      // Attempt to extract a national prefix.\n      //\n      // Some people incorrectly input national prefix\n      // in an international phone number.\n      // For example, some people write British phone numbers as `+44(0)...`.\n      //\n      // Also, in some rare cases, it is valid for a national prefix\n      // to be a part of an international phone number.\n      // For example, mobile phone numbers in Mexico are supposed to be\n      // dialled internationally using a `1` national prefix,\n      // so the national prefix will be part of an international number.\n      //\n      // Quote from:\n      // https://www.mexperience.com/dialing-cell-phones-in-mexico/\n      //\n      // \"Dialing a Mexican cell phone from abroad\n      // When you are calling a cell phone number in Mexico from outside Mexico,\n      // it’s necessary to dial an additional “1” after Mexico’s country code\n      // (which is “52”) and before the area code.\n      // You also ignore the 045, and simply dial the area code and the\n      // cell phone’s number.\n      //\n      // If you don’t add the “1”, you’ll receive a recorded announcement\n      // asking you to redial using it.\n      //\n      // For example, if you are calling from the USA to a cell phone\n      // in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.\n      // (Note that this is different to calling a land line in Mexico City\n      // from abroad, where the number dialed would be +52 – 55 – 1234 5678)\".\n      //\n      // Google's demo output:\n      // https://libphonenumber.appspot.com/phonenumberparser?number=%2b5215512345678&country=MX\n      //\n      if (this.extractAnotherNationalSignificantNumber(state.getNationalDigits(), state.nationalSignificantNumber, function (stateUpdate) {\n        return state.update(stateUpdate);\n      })) {\n        return true;\n      } // If no format matches the phone number, then it could be\n      // \"a really long IDD\" (quote from a comment in Google's library).\n      // An IDD prefix is first extracted when the user has entered at least 3 digits,\n      // and then here — every time when there's a new digit and the number\n      // couldn't be formatted.\n      // For example, in Australia the default IDD prefix is `0011`,\n      // and it could even be as long as `14880011`.\n      //\n      // Could also check `!hasReceivedThreeLeadingDigits` here\n      // to filter out the case when this check duplicates the one\n      // already performed when there're 3 leading digits,\n      // but it's not a big deal, and in most cases there\n      // will be a suitable `format` when there're 3 leading digits.\n      //\n\n\n      if (this.extractIddPrefix(state)) {\n        this.extractCallingCodeAndNationalSignificantNumber(state);\n        return true;\n      } // Google's AsYouType formatter supports sort of an \"autocorrection\" feature\n      // when it \"autocorrects\" numbers that have been input for a country\n      // with that country's calling code.\n      // Such \"autocorrection\" feature looks weird, but different people have been requesting it:\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      // https://github.com/catamphetamine/libphonenumber-js/issues/375\n      // https://github.com/catamphetamine/libphonenumber-js/issues/316\n\n\n      if (this.fixMissingPlus(state)) {\n        this.extractCallingCodeAndNationalSignificantNumber(state);\n        return true;\n      }\n    }\n  }, {\n    key: \"extractIddPrefix\",\n    value: function extractIddPrefix(state) {\n      // An IDD prefix can't be present in a number written with a `+`.\n      // Also, don't re-extract an IDD prefix if has already been extracted.\n      var international = state.international,\n          IDDPrefix = state.IDDPrefix,\n          digits = state.digits,\n          nationalSignificantNumber = state.nationalSignificantNumber;\n\n      if (international || IDDPrefix) {\n        return;\n      } // Some users input their phone number in \"out-of-country\"\n      // dialing format instead of using the leading `+`.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/185\n      // Detect such numbers.\n\n\n      var numberWithoutIDD = stripIddPrefix(digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata);\n\n      if (numberWithoutIDD !== undefined && numberWithoutIDD !== digits) {\n        // If an IDD prefix was stripped then convert the IDD-prefixed number\n        // to international number for subsequent parsing.\n        state.update({\n          IDDPrefix: digits.slice(0, digits.length - numberWithoutIDD.length)\n        });\n        this.startInternationalNumber(state);\n        return true;\n      }\n    }\n  }, {\n    key: \"fixMissingPlus\",\n    value: function fixMissingPlus(state) {\n      if (!state.international) {\n        var _extractCountryCallin2 = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(state.digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),\n            newCallingCode = _extractCountryCallin2.countryCallingCode,\n            number = _extractCountryCallin2.number;\n\n        if (newCallingCode) {\n          state.update({\n            missingPlus: true\n          });\n          this.startInternationalNumber(state);\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"startInternationalNumber\",\n    value: function startInternationalNumber(state) {\n      state.startInternationalNumber(); // If a national (significant) number has been extracted before, reset it.\n\n      if (state.nationalSignificantNumber) {\n        state.resetNationalSignificantNumber();\n        this.onNationalSignificantNumberChange();\n        this.hasExtractedNationalSignificantNumber = undefined;\n      }\n    }\n  }, {\n    key: \"extractCallingCodeAndNationalSignificantNumber\",\n    value: function extractCallingCodeAndNationalSignificantNumber(state) {\n      if (this.extractCountryCallingCode(state)) {\n        // `this.extractCallingCode()` is currently called when the number\n        // couldn't be formatted during the standard procedure.\n        // Normally, the national prefix would be re-extracted\n        // for an international number if such number couldn't be formatted,\n        // but since it's already not able to be formatted,\n        // there won't be yet another retry, so also extract national prefix here.\n        this.extractNationalSignificantNumber(state.getNationalDigits(), function (stateUpdate) {\n          return state.update(stateUpdate);\n        });\n      }\n    }\n  }]);\n\n  return AsYouTypeParser;\n}();\n/**\r\n * Extracts formatted phone number from text (if there's any).\r\n * @param  {string} text\r\n * @return {string} [formattedPhoneNumber]\r\n */\n\n\nexport { AsYouTypeParser as default };\n\nfunction extractFormattedPhoneNumber(text) {\n  // Attempt to extract a possible number from the string passed in.\n  var startsAt = text.search(VALID_FORMATTED_PHONE_NUMBER_PART);\n\n  if (startsAt < 0) {\n    return;\n  } // Trim everything to the left of the phone number.\n\n\n  text = text.slice(startsAt); // Trim the `+`.\n\n  var hasPlus;\n\n  if (text[0] === '+') {\n    hasPlus = true;\n    text = text.slice('+'.length);\n  } // Trim everything to the right of the phone number.\n\n\n  text = text.replace(AFTER_PHONE_NUMBER_DIGITS_END_PATTERN, ''); // Re-add the previously trimmed `+`.\n\n  if (hasPlus) {\n    text = '+' + text;\n  }\n\n  return text;\n}\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\n\n\nfunction _extractFormattedDigitsAndPlus(text) {\n  // Extract a formatted phone number part from text.\n  var extractedNumber = extractFormattedPhoneNumber(text) || ''; // Trim a `+`.\n\n  if (extractedNumber[0] === '+') {\n    return [extractedNumber.slice('+'.length), true];\n  }\n\n  return [extractedNumber];\n}\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\n\n\nexport function extractFormattedDigitsAndPlus(text) {\n  var _extractFormattedDigi3 = _extractFormattedDigitsAndPlus(text),\n      _extractFormattedDigi4 = _slicedToArray(_extractFormattedDigi3, 2),\n      formattedDigits = _extractFormattedDigi4[0],\n      hasPlus = _extractFormattedDigi4[1]; // If the extracted phone number part\n  // can possibly be a part of some valid phone number\n  // then parse phone number characters from a formatted phone number.\n\n\n  if (!VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN.test(formattedDigits)) {\n    formattedDigits = '';\n  }\n\n  return [formattedDigits, hasPlus];\n}\n//# sourceMappingURL=AsYouTypeParser.js.map","function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport Metadata from './metadata.js';\nimport PhoneNumber from './PhoneNumber.js';\nimport AsYouTypeState from './AsYouTypeState.js';\nimport AsYouTypeFormatter, { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter.js';\nimport AsYouTypeParser, { extractFormattedDigitsAndPlus } from './AsYouTypeParser.js';\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar AsYouType = /*#__PURE__*/function () {\n  /**\r\n   * @param {(string|object)?} [optionsOrDefaultCountry] - The default country used for parsing non-international phone numbers. Can also be an `options` object.\r\n   * @param {Object} metadata\r\n   */\n  function AsYouType(optionsOrDefaultCountry, metadata) {\n    _classCallCheck(this, AsYouType);\n\n    this.metadata = new Metadata(metadata);\n\n    var _this$getCountryAndCa = this.getCountryAndCallingCode(optionsOrDefaultCountry),\n        _this$getCountryAndCa2 = _slicedToArray(_this$getCountryAndCa, 2),\n        defaultCountry = _this$getCountryAndCa2[0],\n        defaultCallingCode = _this$getCountryAndCa2[1];\n\n    this.defaultCountry = defaultCountry;\n    this.defaultCallingCode = defaultCallingCode;\n    this.reset();\n  }\n\n  _createClass(AsYouType, [{\n    key: \"getCountryAndCallingCode\",\n    value: function getCountryAndCallingCode(optionsOrDefaultCountry) {\n      // Set `defaultCountry` and `defaultCallingCode` options.\n      var defaultCountry;\n      var defaultCallingCode; // Turns out `null` also has type \"object\". Weird.\n\n      if (optionsOrDefaultCountry) {\n        if (_typeof(optionsOrDefaultCountry) === 'object') {\n          defaultCountry = optionsOrDefaultCountry.defaultCountry;\n          defaultCallingCode = optionsOrDefaultCountry.defaultCallingCode;\n        } else {\n          defaultCountry = optionsOrDefaultCountry;\n        }\n      }\n\n      if (defaultCountry && !this.metadata.hasCountry(defaultCountry)) {\n        defaultCountry = undefined;\n      }\n\n      if (defaultCallingCode) {\n        /* istanbul ignore if */\n        if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n          if (this.metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n            defaultCountry = '001';\n          }\n        }\n      }\n\n      return [defaultCountry, defaultCallingCode];\n    }\n    /**\r\n     * Inputs \"next\" phone number characters.\r\n     * @param  {string} text\r\n     * @return {string} Formatted phone number characters that have been input so far.\r\n     */\n\n  }, {\n    key: \"input\",\n    value: function input(text) {\n      var _this$parser$input = this.parser.input(text, this.state),\n          digits = _this$parser$input.digits,\n          justLeadingPlus = _this$parser$input.justLeadingPlus;\n\n      if (justLeadingPlus) {\n        this.formattedOutput = '+';\n      } else if (digits) {\n        this.determineTheCountryIfNeeded(); // Match the available formats by the currently available leading digits.\n\n        if (this.state.nationalSignificantNumber) {\n          this.formatter.narrowDownMatchingFormats(this.state);\n        }\n\n        var formattedNationalNumber;\n\n        if (this.metadata.hasSelectedNumberingPlan()) {\n          formattedNationalNumber = this.formatter.format(digits, this.state);\n        }\n\n        if (formattedNationalNumber === undefined) {\n          // See if another national (significant) number could be re-extracted.\n          if (this.parser.reExtractNationalSignificantNumber(this.state)) {\n            this.determineTheCountryIfNeeded(); // If it could, then re-try formatting the new national (significant) number.\n\n            var nationalDigits = this.state.getNationalDigits();\n\n            if (nationalDigits) {\n              formattedNationalNumber = this.formatter.format(nationalDigits, this.state);\n            }\n          }\n        }\n\n        this.formattedOutput = formattedNationalNumber ? this.getFullNumber(formattedNationalNumber) : this.getNonFormattedNumber();\n      }\n\n      return this.formattedOutput;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _this = this;\n\n      this.state = new AsYouTypeState({\n        onCountryChange: function onCountryChange(country) {\n          // Before version `1.6.0`, the official `AsYouType` formatter API\n          // included the `.country` property of an `AsYouType` instance.\n          // Since that property (along with the others) have been moved to\n          // `this.state`, `this.country` property is emulated for compatibility\n          // with the old versions.\n          _this.country = country;\n        },\n        onCallingCodeChange: function onCallingCodeChange(country, callingCode) {\n          _this.metadata.selectNumberingPlan(country, callingCode);\n\n          _this.formatter.reset(_this.metadata.numberingPlan, _this.state);\n\n          _this.parser.reset(_this.metadata.numberingPlan);\n        }\n      });\n      this.formatter = new AsYouTypeFormatter({\n        state: this.state,\n        metadata: this.metadata\n      });\n      this.parser = new AsYouTypeParser({\n        defaultCountry: this.defaultCountry,\n        defaultCallingCode: this.defaultCallingCode,\n        metadata: this.metadata,\n        state: this.state,\n        onNationalSignificantNumberChange: function onNationalSignificantNumberChange() {\n          _this.determineTheCountryIfNeeded();\n\n          _this.formatter.reset(_this.metadata.numberingPlan, _this.state);\n        }\n      });\n      this.state.reset(this.defaultCountry, this.defaultCallingCode);\n      this.formattedOutput = '';\n      return this;\n    }\n    /**\r\n     * Returns `true` if the phone number is being input in international format.\r\n     * In other words, returns `true` if and only if the parsed phone number starts with a `\"+\"`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isInternational\",\n    value: function isInternational() {\n      return this.state.international;\n    }\n    /**\r\n     * Returns the \"calling code\" part of the phone number when it's being input\r\n     * in an international format.\r\n     * If no valid calling code has been entered so far, returns `undefined`.\r\n     * @return {string} [callingCode]\r\n     */\n\n  }, {\n    key: \"getCallingCode\",\n    value: function getCallingCode() {\n      // If the number is being input in national format and some \"default calling code\"\n      // has been passed to `AsYouType` constructor, then `this.state.callingCode`\n      // is equal to that \"default calling code\".\n      //\n      // If the number is being input in national format and no \"default calling code\"\n      // has been passed to `AsYouType` constructor, then returns `undefined`,\n      // even if a \"default country\" has been passed to `AsYouType` constructor.\n      //\n      if (this.isInternational()) {\n        return this.state.callingCode;\n      }\n    } // A legacy alias.\n\n  }, {\n    key: \"getCountryCallingCode\",\n    value: function getCountryCallingCode() {\n      return this.getCallingCode();\n    }\n    /**\r\n     * Returns a two-letter country code of the phone number.\r\n     * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n     * Returns `undefined` if no phone number has been input yet.\r\n     * @return {string} [country]\r\n     */\n\n  }, {\n    key: \"getCountry\",\n    value: function getCountry() {\n      var digits = this.state.digits; // Return `undefined` if no digits have been input yet.\n\n      if (digits) {\n        return this._getCountry();\n      }\n    }\n    /**\r\n     * Returns a two-letter country code of the phone number.\r\n     * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n     * @return {string} [country]\r\n     */\n\n  }, {\n    key: \"_getCountry\",\n    value: function _getCountry() {\n      var country = this.state.country;\n      /* istanbul ignore if */\n\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        // `AsYouType.getCountry()` returns `undefined`\n        // for \"non-geographic\" phone numbering plans.\n        if (country === '001') {\n          return;\n        }\n      }\n\n      return country;\n    }\n  }, {\n    key: \"determineTheCountryIfNeeded\",\n    value: function determineTheCountryIfNeeded() {\n      // Suppose a user enters a phone number in international format,\n      // and there're several countries corresponding to that country calling code,\n      // and a country has been derived from the number, and then\n      // a user enters one more digit and the number is no longer\n      // valid for the derived country, so the country should be re-derived\n      // on every new digit in those cases.\n      //\n      // If the phone number is being input in national format,\n      // then it could be a case when `defaultCountry` wasn't specified\n      // when creating `AsYouType` instance, and just `defaultCallingCode` was specified,\n      // and that \"calling code\" could correspond to a \"non-geographic entity\",\n      // or there could be several countries corresponding to that country calling code.\n      // In those cases, `this.country` is `undefined` and should be derived\n      // from the number. Again, if country calling code is ambiguous, then\n      // `this.country` should be re-derived with each new digit.\n      //\n      if (!this.state.country || this.isCountryCallingCodeAmbiguous()) {\n        this.determineTheCountry();\n      }\n    } // Prepends `+CountryCode ` in case of an international phone number\n\n  }, {\n    key: \"getFullNumber\",\n    value: function getFullNumber(formattedNationalNumber) {\n      var _this2 = this;\n\n      if (this.isInternational()) {\n        var prefix = function prefix(text) {\n          return _this2.formatter.getInternationalPrefixBeforeCountryCallingCode(_this2.state, {\n            spacing: text ? true : false\n          }) + text;\n        };\n\n        var callingCode = this.state.callingCode;\n\n        if (!callingCode) {\n          return prefix(\"\".concat(this.state.getDigitsWithoutInternationalPrefix()));\n        }\n\n        if (!formattedNationalNumber) {\n          return prefix(callingCode);\n        }\n\n        return prefix(\"\".concat(callingCode, \" \").concat(formattedNationalNumber));\n      }\n\n      return formattedNationalNumber;\n    }\n  }, {\n    key: \"getNonFormattedNationalNumberWithPrefix\",\n    value: function getNonFormattedNationalNumberWithPrefix() {\n      var _this$state = this.state,\n          nationalSignificantNumber = _this$state.nationalSignificantNumber,\n          complexPrefixBeforeNationalSignificantNumber = _this$state.complexPrefixBeforeNationalSignificantNumber,\n          nationalPrefix = _this$state.nationalPrefix;\n      var number = nationalSignificantNumber;\n      var prefix = complexPrefixBeforeNationalSignificantNumber || nationalPrefix;\n\n      if (prefix) {\n        number = prefix + number;\n      }\n\n      return number;\n    }\n  }, {\n    key: \"getNonFormattedNumber\",\n    value: function getNonFormattedNumber() {\n      var nationalSignificantNumberMatchesInput = this.state.nationalSignificantNumberMatchesInput;\n      return this.getFullNumber(nationalSignificantNumberMatchesInput ? this.getNonFormattedNationalNumberWithPrefix() : this.state.getNationalDigits());\n    }\n  }, {\n    key: \"getNonFormattedTemplate\",\n    value: function getNonFormattedTemplate() {\n      var number = this.getNonFormattedNumber();\n\n      if (number) {\n        return number.replace(/[\\+\\d]/g, DIGIT_PLACEHOLDER);\n      }\n    }\n  }, {\n    key: \"isCountryCallingCodeAmbiguous\",\n    value: function isCountryCallingCodeAmbiguous() {\n      var callingCode = this.state.callingCode;\n      var countryCodes = this.metadata.getCountryCodesForCallingCode(callingCode);\n      return countryCodes && countryCodes.length > 1;\n    } // Determines the country of the phone number\n    // entered so far based on the country phone code\n    // and the national phone number.\n\n  }, {\n    key: \"determineTheCountry\",\n    value: function determineTheCountry() {\n      this.state.setCountry(getCountryByCallingCode(this.isInternational() ? this.state.callingCode : this.defaultCallingCode, this.state.nationalSignificantNumber, this.metadata));\n    }\n    /**\r\n     * Returns a E.164 phone number value for the user's input.\r\n     *\r\n     * For example, for country `\"US\"` and input `\"(222) 333-4444\"`\r\n     * it will return `\"+12223334444\"`.\r\n     *\r\n     * For international phone number input, it will also auto-correct\r\n     * some minor errors such as using a national prefix when writing\r\n     * an international phone number. For example, if the user inputs\r\n     * `\"+44 0 7400 000000\"` then it will return an auto-corrected\r\n     * `\"+447400000000\"` phone number value.\r\n     *\r\n     * Will return `undefined` if no digits have been input,\r\n     * or when inputting a phone number in national format and no\r\n     * default country or default \"country calling code\" have been set.\r\n     *\r\n     * @return {string} [value]\r\n     */\n\n  }, {\n    key: \"getNumberValue\",\n    value: function getNumberValue() {\n      var _this$state2 = this.state,\n          digits = _this$state2.digits,\n          callingCode = _this$state2.callingCode,\n          country = _this$state2.country,\n          nationalSignificantNumber = _this$state2.nationalSignificantNumber; // Will return `undefined` if no digits have been input.\n\n      if (!digits) {\n        return;\n      }\n\n      if (this.isInternational()) {\n        if (callingCode) {\n          return '+' + callingCode + nationalSignificantNumber;\n        } else {\n          return '+' + digits;\n        }\n      } else {\n        if (country || callingCode) {\n          var callingCode_ = country ? this.metadata.countryCallingCode() : callingCode;\n          return '+' + callingCode_ + nationalSignificantNumber;\n        }\n      }\n    }\n    /**\r\n     * Returns an instance of `PhoneNumber` class.\r\n     * Will return `undefined` if no national (significant) number\r\n     * digits have been entered so far, or if no `defaultCountry` has been\r\n     * set and the user enters a phone number not in international format.\r\n     */\n\n  }, {\n    key: \"getNumber\",\n    value: function getNumber() {\n      var _this$state3 = this.state,\n          nationalSignificantNumber = _this$state3.nationalSignificantNumber,\n          carrierCode = _this$state3.carrierCode,\n          callingCode = _this$state3.callingCode; // `this._getCountry()` is basically same as `this.state.country`\n      // with the only change that it return `undefined` in case of a\n      // \"non-geographic\" numbering plan instead of `\"001\"` \"internal use\" value.\n\n      var country = this._getCountry();\n\n      if (!nationalSignificantNumber) {\n        return;\n      }\n\n      if (!country && !callingCode) {\n        return;\n      }\n\n      var phoneNumber = new PhoneNumber(country || callingCode, nationalSignificantNumber, this.metadata.metadata);\n\n      if (carrierCode) {\n        phoneNumber.carrierCode = carrierCode;\n      } // Phone number extensions are not supported by \"As You Type\" formatter.\n\n\n      return phoneNumber;\n    }\n    /**\r\n     * Returns `true` if the phone number is \"possible\".\r\n     * Is just a shortcut for `PhoneNumber.isPossible()`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      var phoneNumber = this.getNumber();\n\n      if (!phoneNumber) {\n        return false;\n      }\n\n      return phoneNumber.isPossible();\n    }\n    /**\r\n     * Returns `true` if the phone number is \"valid\".\r\n     * Is just a shortcut for `PhoneNumber.isValid()`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      var phoneNumber = this.getNumber();\n\n      if (!phoneNumber) {\n        return false;\n      }\n\n      return phoneNumber.isValid();\n    }\n    /**\r\n     * @deprecated\r\n     * This method is used in `react-phone-number-input/source/input-control.js`\r\n     * in versions before `3.0.16`.\r\n     */\n\n  }, {\n    key: \"getNationalNumber\",\n    value: function getNationalNumber() {\n      return this.state.nationalSignificantNumber;\n    }\n    /**\r\n     * Returns the phone number characters entered by the user.\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getChars\",\n    value: function getChars() {\n      return (this.state.international ? '+' : '') + this.state.digits;\n    }\n    /**\r\n     * Returns the template for the formatted phone number.\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate() {\n      return this.formatter.getTemplate(this.state) || this.getNonFormattedTemplate() || '';\n    }\n  }]);\n\n  return AsYouType;\n}();\n\nexport { AsYouType as default };\n//# sourceMappingURL=AsYouType.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// This is a legacy function.\n// Use `findNumbers()` instead.\nimport { PLUS_CHARS, VALID_PUNCTUATION, VALID_DIGITS, WHITESPACE } from './constants.js';\nimport parse from './parse_.js';\nimport { VALID_PHONE_NUMBER_WITH_EXTENSION } from './helpers/isViablePhoneNumber.js';\nimport createExtensionPattern from './helpers/extension/createExtensionPattern.js';\nimport parsePreCandidate from './findNumbers/parsePreCandidate.js';\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate.js';\nimport isValidCandidate from './findNumbers/isValidCandidate.js';\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\n\nexport var EXTN_PATTERNS_FOR_PARSING = createExtensionPattern('parsing');\nvar WHITESPACE_IN_THE_BEGINNING_PATTERN = new RegExp('^[' + WHITESPACE + ']+');\nvar PUNCTUATION_IN_THE_END_PATTERN = new RegExp('[' + VALID_PUNCTUATION + ']+$'); // // Regular expression for getting opening brackets for a valid number\n// // found using `PHONE_NUMBER_START_PATTERN` for prepending those brackets to the number.\n// const BEFORE_NUMBER_DIGITS_PUNCTUATION = new RegExp('[' + OPENING_BRACKETS + ']+' + '[' + WHITESPACE + ']*' + '$')\n\nvar VALID_PRECEDING_CHARACTER_PATTERN = /[^a-zA-Z0-9]/;\nexport default function findPhoneNumbers(text, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  var search = new PhoneNumberSearch(text, options, metadata);\n  var phones = [];\n\n  while (search.hasNext()) {\n    phones.push(search.next());\n  }\n\n  return phones;\n}\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\n\nexport function searchPhoneNumbers(text, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  var search = new PhoneNumberSearch(text, options, metadata);\n  return _defineProperty({}, Symbol.iterator, function () {\n    return {\n      next: function next() {\n        if (search.hasNext()) {\n          return {\n            done: false,\n            value: search.next()\n          };\n        }\n\n        return {\n          done: true\n        };\n      }\n    };\n  });\n}\n/**\r\n * Extracts a parseable phone number including any opening brackets, etc.\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?startsAt, ?endsAt }`.\r\n */\n\nexport var PhoneNumberSearch = /*#__PURE__*/function () {\n  function PhoneNumberSearch(text, options, metadata) {\n    _classCallCheck(this, PhoneNumberSearch);\n\n    this.text = text; // If assigning the `{}` default value is moved to the arguments above,\n    // code coverage would decrease for some weird reason.\n\n    this.options = options || {};\n    this.metadata = metadata; // Iteration tristate.\n\n    this.state = 'NOT_READY';\n    this.regexp = new RegExp(VALID_PHONE_NUMBER_WITH_EXTENSION, 'ig');\n  }\n\n  _createClass(PhoneNumberSearch, [{\n    key: \"find\",\n    value: function find() {\n      var matches = this.regexp.exec(this.text);\n\n      if (!matches) {\n        return;\n      }\n\n      var number = matches[0];\n      var startsAt = matches.index;\n      number = number.replace(WHITESPACE_IN_THE_BEGINNING_PATTERN, '');\n      startsAt += matches[0].length - number.length; // Fixes not parsing numbers with whitespace in the end.\n      // Also fixes not parsing numbers with opening parentheses in the end.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/252\n\n      number = number.replace(PUNCTUATION_IN_THE_END_PATTERN, '');\n      number = parsePreCandidate(number);\n      var result = this.parseCandidate(number, startsAt);\n\n      if (result) {\n        return result;\n      } // Tail recursion.\n      // Try the next one if this one is not a valid phone number.\n\n\n      return this.find();\n    }\n  }, {\n    key: \"parseCandidate\",\n    value: function parseCandidate(number, startsAt) {\n      if (!isValidPreCandidate(number, startsAt, this.text)) {\n        return;\n      } // Don't parse phone numbers which are non-phone numbers\n      // due to being part of something else (e.g. a UUID).\n      // https://github.com/catamphetamine/libphonenumber-js/issues/213\n      // Copy-pasted from Google's `PhoneNumberMatcher.js` (`.parseAndValidate()`).\n\n\n      if (!isValidCandidate(number, startsAt, this.text, this.options.extended ? 'POSSIBLE' : 'VALID')) {\n        return;\n      } // // Prepend any opening brackets left behind by the\n      // // `PHONE_NUMBER_START_PATTERN` regexp.\n      // const text_before_number = text.slice(this.searching_from, startsAt)\n      // const full_number_starts_at = text_before_number.search(BEFORE_NUMBER_DIGITS_PUNCTUATION)\n      // if (full_number_starts_at >= 0)\n      // {\n      // \tnumber   = text_before_number.slice(full_number_starts_at) + number\n      // \tstartsAt = full_number_starts_at\n      // }\n      //\n      // this.searching_from = matches.lastIndex\n\n\n      var result = parse(number, this.options, this.metadata);\n\n      if (!result.phone) {\n        return;\n      }\n\n      result.startsAt = startsAt;\n      result.endsAt = startsAt + number.length;\n      return result;\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      if (this.state === 'NOT_READY') {\n        this.last_match = this.find();\n\n        if (this.last_match) {\n          this.state = 'READY';\n        } else {\n          this.state = 'DONE';\n        }\n      }\n\n      return this.state === 'READY';\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      // Check the state and find the next match as a side-effect if necessary.\n      if (!this.hasNext()) {\n        throw new Error('No next element');\n      } // Don't retain that memory any longer than necessary.\n\n\n      var result = this.last_match;\n      this.last_match = null;\n      this.state = 'NOT_READY';\n      return result;\n    }\n  }]);\n\n  return PhoneNumberSearch;\n}();\n//# sourceMappingURL=findPhoneNumbers_.js.map","import * as Yup from 'yup';\nimport { isValidPhoneNumber } from 'libphonenumber-js';\nimport { CountryCode } from 'libphonenumber-js/types';\n\ndeclare module 'yup' {\n  export interface StringSchema {\n    /**\n     * Check for phone number validity.\n     *\n     * @param {String} [countryCode=US] The country code to check against.\n     * @param {String} [errorMessage=DEFAULT_MESSAGE] returns error if failed validation\n     */\n    phone(countryCode?: CountryCode, errorMessage?: string): StringSchema;\n  }\n}\n\nconst YUP_PHONE_METHOD = 'phone';\nconst CLDR_REGION_CODE_SIZE = 2;\n\nconst isValidCountryCode = (countryCode: string | undefined): boolean => {\n  const isString = typeof countryCode === 'string';\n  const isValidCodeLength = countryCode?.length === CLDR_REGION_CODE_SIZE;\n\n  return isString && isValidCodeLength;\n};\n\nYup.addMethod(\n  Yup.string,\n  YUP_PHONE_METHOD,\n  function yupPhoneLite(countryCode?: CountryCode, errorMessage = '') {\n    if (!isValidCountryCode(countryCode)) {\n      // if not valid countryCode, then set default country to United States (US)\n      countryCode = 'US';\n    }\n\n    const errMsg =\n      typeof errorMessage === 'string' && errorMessage\n        ? errorMessage\n        : `\\${path} must be a valid phone number for region ${countryCode}`;\n\n    // @ts-ignore\n    return this.test(YUP_PHONE_METHOD, errMsg, (value: string) => {\n      try {\n        if (value === undefined || value === '') {\n          return true;\n        }\n\n        /* check if the countryCode provided should be used as\n          default country code or strictly followed\n        */\n        return isValidPhoneNumber(value, countryCode);\n      } catch {\n        return false;\n      }\n    });\n  }\n);\n"],"names":["withMetadata","func","_arguments","args","Array","prototype","slice","call","push","metadata","apply","compare","a","b","split","pa","pb","i","na","Number","nb","isNaN","getType","types","type","getCountryCallingCode","country","Metadata","hasCountry","countryCallingCode","Error","setVersion","version","v1","v2","v3","v4","V3","V4","createExtensionPattern","purpose","rfcExtn","RFC3966_EXTN_PREFIX","getExtensionDigitsPattern","extLimitAfterExplicitLabel","explicitExtn","possibleSeparatorsBetweenNumberAndExtLabel","optionalExtnSuffix","ambiguousExtn","extLimitAfterAmbiguousChar","americanStyleExtnWithSuffix","ambiguousSeparator","extLimitWhenNotSure","autoDiallingExtn","possibleSeparatorsNumberExtLabelNoComma","extLimitAfterLikelyLabel","onlyCommasExtn","parseDigits","string","result","_iterator","_createForOfIteratorHelperLoose","_step","done","digit","DIGITS","value","parseIncompletePhoneNumber","character","parsePhoneNumberCharacter","mergeArrays","merged","element","indexOf","sort","checkNumberLengthForType","nationalNumber","type_info","possible_lengths","possibleLengths","mobile_type","actual_length","length","minimum_length","isPossibleNumber","undefined","matchesEntirely","text","regular_expression","test","RegExp","getNumberType","input","options","selectNumberingPlan","phone","nationalNumberPattern","isNumberTypeEqualTo","pattern","NON_FIXED_LINE_PHONE_TYPES","isValidNumber","hasTypes","applyInternationalSeparatorStyle","formattedNumber","replace","concat","VALID_PUNCTUATION","trim","formatNationalNumberUsingFormat","number","format","_ref","useInternationalFormat","withNationalPrefix","carrierCode","internationalFormat","nationalPrefixFormattingRule","FIRST_GROUP_PATTERN","formatNumber$1","formatNumber","DEFAULT_OPTIONS","formatNationalNumber","ext","formatExtension","formatRFC3966","fromCountry","countryMetadata","defaultIDDPrefix","SINGLE_IDD_PREFIX_REG_EXP","IDDPrefix","iddPrefix","formatNationalNumber$1","formatAs","formats","availableFormats","leadingDigitsPatterns","lastLeadingDigitsPattern","search","nationalNnumber","nationalPrefixIsOptionalWhenFormattingInNationalFormat","nationalPrefix","stripIddPrefix","callingCode","IDDPrefixPattern","matchedGroups","match","CAPTURING_DIGIT_PATTERN","extractNationalNumberFromPossiblyIncompleteNumber","numberingPlan","nationalPrefixForParsing","prefixPattern","prefixMatch","exec","capturedGroupsCount","hasCapturedGroups","nationalPrefixTransformRule","possiblePositionOfTheFirstCapturedGroup","extractNationalNumber","_extractNationalNumbe","shouldHaveExtractedNationalPrefix","isPossibleIncompleteNationalNumber","extractCountryCallingCodeFromInternationalNumberWithoutPlusSign","possibleShorterNumber","possibleShorterNationalNumber","extractCountryCallingCode","numberWithoutIDD","shorterNumber","MAX_LENGTH_COUNTRY_CODE","hasCallingCode","getCountryByCallingCode","nationalPhoneNumber","possibleCountries","getCountryCodesForCallingCode","leadingDigits","selectCountryFromList","parse","defaultCountry","ParseError","extract","_part$split","part","_part$split2","name","MIN_LENGTH_FOR_NSN","VALID_PHONE_NUMBER_PATTERN","parseRFC3966","MAX_INPUT_STRING_LENGTH","startsAt","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","start","EXTN_PATTERN","numberWithoutExtension","matches","withExtensionStripped","VALID_PHONE_NUMBER_START_REG_EXP","error","formattedPhoneNumber","_parseInput","defaultCallingCode","_extractCountryCallin","exactCountry","hasSelectedNumberingPlan","MAX_LENGTH_FOR_NSN","phoneNumber","PhoneNumber","valid","extended","possible","isValidPhoneNumber$1","isValidPhoneNumber","_Array$prototype$slic","arguments","arg_1","arg_2","arg_3","arg_4","TypeError","_typeof","_objectSpread","countries","parseNumber","isValid","limit","lower","upper","trimAfterFirstMatch","regexp","index","isLatinLetter","letter","pL_regexp","pMn_regexp","latinLetterRegexp","containsOnlyValidXChars","candidate","charAtIndex","charAt","charAtNextIndex","util","isNumberMatch","substring","MatchType","NSN_MATCH","isNationalPrefixPresentIfRequired","_metadata","getCountryCodeSource","phoneNumberRegion","getRegionCodeForCountryCode","getCountryCode","getMetadataForRegion","getNationalSignificantNumber","formatRule","chooseFormattingPatternForNumber","numberFormats","getNationalPrefixFormattingRule","getNationalPrefixOptionalWhenFormatting","PhoneNumberUtil","formattingRuleHasFirstGroupOnly","rawInputCopy","normalizeDigitsOnly","getRawInput","maybeStripNationalPrefixAndCarrierCode","containsMoreThanOneSlashInNationalNumber","firstSlashInBodyIndex","secondSlashInBodyIndex","CountryCodeSource","FROM_NUMBER_WITH_PLUS_SIGN","FROM_NUMBER_WITHOUT_PLUS_SIGN","String","checkNumberGroupingIsValid","checkGroups","regExpCache","normalizedCandidate","normalizeDigits","formattedNumberGroups","getNationalNumberGroups","alternateFormats","MetadataManager","getAlternateFormatsForCountry","nationalSignificantNumber","alternateFormat","getPatternForRegExp","leadingDigitsRegExp","formattingPattern","formatNsnUsingPattern","rfc3966Format","endIndex","startIndex","allNumberGroupsAreExactlyPresent","candidateGroups","NON_DIGITS_PATTERN","candidateNumberGroupIndex","hasExtension","contains","formattedNumberGroupIndex","endsWith","allNumberGroupsRemainGrouped","fromIndex","FROM_DEFAULT_COUNTRY","countryCode","region","getNddPrefixForRegion","Character","isDigit","getExtension","isValidPreCandidate","offset","SLASH_SEPARATED_DATES","TIME_STAMPS","followingText","TIME_STAMPS_SUFFIX_LEADING","isValidCandidate","leniency","MATCHING_BRACKETS_ENTIRE","PUB_PAGES","LEAD_CLASS_LEADING","previousChar","isInvalidPunctuationSymbol","pSc_regexp","lastCharIndex","nextChar","repeat","times","cutAndStripNonPairedParens","cutBeforeIndex","dangling_braces","pop","cleared_string","_i","formatCompleteNumber","state","shouldTryNationalPrefixFormattingRule","getSeparatorAfterNationalPrefix","matcher","international","useNationalPrefixFormattingRule","formatNationalNumberWithAndWithoutNationalPrefixFormattingRule","_ref3","formattedNationalNumber","complexPrefixBeforeNationalSignificantNumber","getNationalDigits","_match","characters","tree","last","overflow","characterString","join","matchedChars","partialMatch","isArray","restCharacters","JSON","stringify","op","_step2","_iterator2","char","_isValidPhoneNumber","PhoneNumberMatcher","_PhoneNumberMatcher","AsYouType","_AsYouType","_Metadata","PhoneNumberSearch","_PhoneNumberSearch","code","_classCallCheck","_this","Object","setPrototypeOf","constructor","DASHES","SLASHES","DOTS","WHITESPACE","BRACKETS","TILDES","CALLING_CODE_REG_EXP","is_object","keys","getCountries","filter","_","getCountryMetadata","nonGeographic","nonGeographical","countryCodes","countryCallingCodes","isNonGeographicCallingCode","NumberingPlan","getNumberingPlanMetadata","getCountryCodeForCallingCode","country_phone_code_to_countries","country_calling_codes","chooseCountryByCountryCallingCode","globalMetadataObject","getDefaultCountryMetadataForRegion","_getFormats","map","Format","_getNationalPrefixFormattingRule","_nationalPrefixForParsing","_getNationalPrefixIsOptionalWhenFormatting","Type","DEFAULT_EXT_PREFIX","_format","nationalPrefixIsMandatoryWhenFormattingInNationalFormat","usesNationalPrefix","FIRST_GROUP_ONLY_PREFIX_PATTERN","maxLength","VALID_DIGITS","VALID_PHONE_NUMBER_WITH_EXTENSION","extension","setExt","isPossible","isNonGeographic","isEqual","formatNational","formatInternational","getURI","Node","_createClass","key","next","prev","LRUCache","size","tail","head","cache","put","ensureLimit","node","get","remove","console","log","clear","RegExpCache","regExp","pZ","_pZ","PZ","pNd","_pNd","pL","_pL","pSc","_pSc","pMn","_pMn","Leniency","POSSIBLE","VALID","toString","STRICT_GROUPING","candidateString","EXACT_GROUPING","SECOND_NUMBER_START_PATTERN","NON_PARENS","OPENING_PARENS","CLOSING_PARENS","LEAD_CLASS","PLUS_CHARS","BRACKET_PAIR_LIMIT","EXTN_PATTERNS_FOR_MATCHING","INNER_MATCHES","leadLimit","punctuationLimit","blockLimit","punctuation","digitSequence","PATTERN","UNWANTED_END_CHAR_PATTERN","_pN","MAX_SAFE_INTEGER","Math","pow","maxTries","searchIndex","find","parseAndVerify","extractInnerMatch","endsAt","isFirstMatch","candidateMatch","innerMatchRegExp","candidateIndexGuess","hasNext","lastMatch","AsYouTypeState","onCountryChange","onCallingCodeChange","reset","missingPlus","digits","resetNationalSignificantNumber","initCountryAndCallingCode","nationalSignificantNumberMatchesInput","update","properties","_Object$keys","setCountry","setCallingCode","startInternationalNumber","appendDigits","nextDigits","appendNationalSignificantNumberDigits","getDigitsWithoutInternationalPrefix","DIGIT_PLACEHOLDER_MATCHER","PatternMatcher","matchTree","PatternParser","allowOverflow","OPERATOR","ILLEGAL_CHARACTER_REGEXP","context","or","instructions","parsePattern","_this$context$","branches","startContext","endContext","getContext","operator","before","rightPart","_this$getContext","oneOfSet","values","prevValue","charCodeAt","nextValue","fromCharCode","LONGEST_DUMMY_PHONE_NUMBER","DUMMY_DIGIT","LONGEST_NATIONAL_PHONE_NUMBER_LENGTH","NATIONAL_PREFIX_SEPARATORS_PATTERN","NON_ALTERING_FORMAT_REG_EXP","AsYouTypeFormatter","resetFormat","populatedNationalNumberTemplate","nationalNumberTemplate","template","chosenFormat","populatedNationalNumberTemplatePosition","isNANP","matchingFormats","narrowDownMatchingFormats","formattedCompleteNumber","setNationalNumberTemplate","DIGIT_PLACEHOLDER","lastIndexOf","formatNationalNumberWithNextDigits","previouslyChosenFormat","newlyChosenFormat","chooseFormat","formatNextNationalNumberDigits","_ref2","_this2","leadingDigitsPatternIndex","MIN_LEADING_DIGITS_LENGTH","formatSuits","formatMatches","leadingDigitsPatternsCount","min","leadingDigitsPattern","getFormatFormat","_this3","_loop","createTemplateForFormat","_ret","getTemplateForFormat","getInternationalPrefixBeforeCountryCallingCode","spacing","getTemplate","internationalPrefix","_ref4","strictPattern","nationalNumberDummyDigits","numberFormat","numberFormatWithNationalPrefix","nationalPrefixIncludedInTemplate","position","_ref5","VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN","VALID_FORMATTED_PHONE_NUMBER_PART","AFTER_PHONE_NUMBER_DIGITS_END_PATTERN","COMPLEX_NATIONAL_PREFIX","AsYouTypeParser","onNationalSignificantNumberChange","hasPlus","extractedNumber","extractFormattedPhoneNumber","_extractFormattedDigi4","_slicedToArray","_extractFormattedDigi3","formattedDigits","_extractFormattedDigi2","_extractFormattedDigi","justLeadingPlus","inputDigits","hasReceivedThreeLeadingDigits","extractIddPrefix","isWaitingForCountryCallingCode","hasExtractedNationalSignificantNumber","extractNationalSignificantNumber","stateUpdate","extractCountryCallingCode$1","couldPossiblyExtractAnotherNationalSignificantNumber","nationalDigits","setState","onExtractedNationalNumber","extractAnotherNationalSignificantNumber","prevNationalSignificantNumber","_extractNationalNumbe2","nationalSignificantNumberIndex","prefixBeforeNationalNumber","reExtractNationalSignificantNumber","fixMissingPlus","extractCallingCodeAndNationalSignificantNumber","_extractCountryCallin2","newCallingCode","optionsOrDefaultCountry","_this$getCountryAndCa","getCountryAndCallingCode","_this$parser$input","parser","formattedOutput","determineTheCountryIfNeeded","formatter","getFullNumber","getNonFormattedNumber","isInternational","getCallingCode","getCountry","_getCountry","isCountryCallingCodeAmbiguous","determineTheCountry","prefix","getNonFormattedNationalNumberWithPrefix","_this$state","getNonFormattedTemplate","getNumberValue","_this$state2","getNumber","_this$state3","getNationalNumber","getChars","create","WHITESPACE_IN_THE_BEGINNING_PATTERN","PUNCTUATION_IN_THE_END_PATTERN","parseCandidate","last_match","isValidCountryCode","isValidCodeLength","CLDR_REGION_CODE_SIZE","Yup","addMethod","YUP_PHONE_METHOD","yupPhoneLite","errorMessage","errMsg","_unused"],"mappings":"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"}